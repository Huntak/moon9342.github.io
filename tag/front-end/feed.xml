<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>Development & Technical Training</description>
   <language>en-uk</language>
   
   <title>
   <![CDATA[ IT Blog ]]>
   </title>
   <description>
   <![CDATA[ Development & Technical Training ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>IT Blog</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>TypeScript 강좌(6) - Interface</title>
	  <link>https://moon9342.github.io/typescript-interface</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-24T09:51:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-interface</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript Interface</strong></p>

<p><code class="highlighter-rouge">interface</code>는 우리가 알고 있는 <code class="highlighter-rouge">Java</code>의 interface와 문법적으로 유사합니다. 하지만 객체지향에서 말하는 interface와는
의미적으로 좀 차이가 있습니다. 그 부분은 예제 중간중간에 살펴보기로 하고 지금은 TypeScript의 interface 
에 대해서만 살펴보도록 하겠습니다.</p>

<p>TypeScript에서 interface는 새로운 데이터 타입을 만드는 추상 데이터 타입(<code class="highlighter-rouge">abstract data type</code>)으로 사용이 되며
일반 변수, 함수, 클래스의 type check를 위해 사용됩니다. interface 이용하여 타입을 선언하면 
interface안의 property의 선언과 method의 구현이 강제되기 때문에 프로그래밍의 일관성을 확보할 수 있습니다.</p>

<p>참고로 ES6는 interface를 지원하지 않습니다. TypeScript만 지원합니다. 
그렇기 때문에 interface를 컴파일 한 결과물을 보면 interface의 내용은 나타나지 않게됩니다.</p>

<hr />

<p><strong>Basic Exam</strong></p>

<p>그럼 간단한 예를 통해 알아보도록 하겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">;</span>

<span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>
<p>해당 <code class="highlighter-rouge">.ts</code> 파일을 컴파일 한 결과 <code class="highlighter-rouge">.js</code> 파일을 살펴보면 다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">myBook</span><span class="p">;</span>
<span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>위에서 언급한 대로 interface에 대한 내용은 포함되어 있지 않습니다. TypeScript의 interface는 type check를 위한
용도로 사용되게 됩니다.</p>

<hr />

<p><strong>Parameter Type Check</strong></p>

<p>비슷한 용도로 함수의 인자를 넘길 때 인자의 type으로 interface를 이용할 수 있습니다. 
아래의 예를 한번 살펴보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">myBook</span><span class="p">:</span> <span class="nx">IBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>굳이 설명할 것도 없는거 같습니다. <code class="highlighter-rouge">printBookInfo()</code>의 인자로 interface type의 객체가 전달되어
사용된 것이죠.</p>

<p>여기까지는 별 문제 없이 이해할 수 있습니다. 이제 그 다음이 살짝 이상합니다.</p>

<hr />

<p><strong>Duck Typing</strong></p>

<p>아래의 코드에서 문법 오류가 일어날까요?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span><span class="p">,</span>
    <span class="na">bookPrice</span><span class="p">:</span> <span class="mi">3000</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>원래 예상대로라면 이 코드는 문제가 있는 것이 맞습니다. <code class="highlighter-rouge">myBook</code>이라는 객체는 <code class="highlighter-rouge">IBook</code> interface type으로 지정되지 
않고 parameter로 전달이 되었거든요. 하지만 이 코드는 에러없이 컴파일이 진행됩니다.</p>

<p>왜 이런 현상이 발생할까요?</p>

<p><strong>TypeScript의 중요한 원칙 중 하나는 type-checking을 가지고 있는 값들의 형태를 가지고 판단한다는 것입니다.</strong> 말이 좀 
어렵네요. 풀어서 설명하자면 TypeScript에서 type-checking은 선언된 타입만을 비교하는것이 아니라 
실제 이용될 수 있는 형태의 값들을 가지고 있느냐 그렇지 않느냐를 가지고 한다는 의미입니다.</p>

<p>위의 예제에서 <code class="highlighter-rouge">myBook</code> 객체는 비록 IBook interface type은 아니지만 IBook interface type을 <strong>모두 커버할 수 있는 값들의 형태</strong>를
가지고 있습니다. 이런 경우 <strong><code class="highlighter-rouge">myBook</code> 객체는 IBook interface 타입으로 간주</strong>한다는 말이지요.</p>

<p>이런걸 동적 typing의 한 종류인 <code class="highlighter-rouge">duck typing</code>이라고 합니다. TypeScript는 duck typing을 지원하는 언어입니다. 일반적으로
말하자면 class의 상속이나 interface의 구현으로 타입을 구분하는 것이 아니라 객체가 특정 타입에 걸맞는 property와 method를 
가지고 있으면 해당 type으로 간주한다는 의미로 받아들이시면 됩니다.</p>

<p>해서 결론적으로 저 위의 코드는 에러없이 사용할 수 있습니다.</p>

<hr />

<p><strong>Optional Properties</strong></p>

<p>TypeScript interface의 모든 property와 method는 구현하는 클래스 혹은 구현 객체에서 기본적으로 모두 재정의되어야 합니다. 
하지만 <code class="highlighter-rouge">Optional Property</code>를 이용하면 property 중 <code class="highlighter-rouge">?</code> 가 붙어있는 property는 구현하지 않아도 상관없습니다. 즉, 선택적으로 
구현여부를 결정할 수 있는 property가 optional property입니다.</p>

<p>아래의 예를 가지고 살펴보겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">bookISBN</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>   <span class="c1">// Optional Property</span>

    <span class="nx">getName</span><span class="p">():</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">myBook</span><span class="p">:</span> <span class="nx">IBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span><span class="p">,</span>

    <span class="na">getName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">bookName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<p><strong>Readonly Properties</strong></p>

<p><code class="highlighter-rouge">readonly</code> keyword를 이용해 객체가 처음 생성되는 시점에만 property들을 수정가능하도록 설정할 수 있습니다.<br />
한번 값이 세팅되면 그 후에는 수정할 수 없게됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Point</span> <span class="p">{</span>
    <span class="nx">readonly</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">y</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">p1</span><span class="p">:</span> <span class="nx">Point</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">20</span> <span class="p">};</span>
<span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>    <span class="c1">// 오류 발생</span>
</code></pre></div></div>

<p>이이 포스트의 내용은 <a href="http://www.typescriptlang.org" target="_blank">TypeScript official home page</a>을 참조했습니다.
 조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Babel을 사용해보자</title>
	  <link>https://moon9342.github.io/javascript-babel</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-24T02:30:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-babel</guid>
	  <description><![CDATA[
	     <p><strong>Babel이란 무엇인가?</strong></p>

<p>아무 생각없이 <code class="highlighter-rouge">Babel</code>을 쓰고 있지만 예전부터 궁금했던 Babel이란 이름이 내가 알고 있는 그 바벨탑의 바벨인가? 
라는 의문에 이름의 근원을 찾아보고 이왕 블로그를 한 김에 Babel의 간단한 사용법 정도만 정리해 보도록 하겠습니다.
( 도데체 이런게 왜 궁금한건대? )</p>

<p>결론적으로 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a> 에서는 이름에 대한 근원을 찾을수는 없었습니다. 
어딘가에 숨어있는지는 모르겠지만요. 여하간 Babel은 성경 영어로 구약성서 창세기에 그 근원을 두고 있습니다.
( 왠지 산으로 가는 느낌입니다. )</p>

<p>노아의 홍수 이후로 인간은 다시 번성하기 시작했고 그 당시에는 전 세계의 언어가 하나였다고 합니다. 하나님은 인간들에게
흩어져 살 것을 명하셨지만, 사람들은 하나님의 말씀에 불순종하여 <code class="highlighter-rouge">Shinar</code> 라는 곳에 모여 살았답니다. 그리고 그들은
자신들을 위해 하나의 도시를 건설하고 하늘에까지 닿는 높은 탑도 같이 세워 자신들의 이름을 높이고 흩어지지 않겠다는 의미로
하나의 높은 탑을 건설하게 되었는데 이게 그 <code class="highlighter-rouge">Babel</code>(바벨탑)이랍니다.</p>

<p>하지만 인간들의 그러한 동기를 아시는 하나님께서 그들이 탑을 세우지 못하고 전 세계로 흩어지게끔 그들의 언어를 여러개로
나누셔서 서로간의 의사소통이 되지 않도록 하셨답니다. 말이 안통하자 탑 공사는 중단되고 결국 언어가 맞는 사람끼리 뿔뿔히
흩어져 살게되었다라는 이야기지요.</p>

<p>그래서 <code class="highlighter-rouge">Babel</code>의 사전적 의미는 “와글와글”, “바벨탑”, “거대한 탑” 의 의미를 가지게 되었다고 합니다.</p>

<hr />

<p>Babel은 JavaScript transpiler입니다. 공식 홈에는 compiler라고 표현했지만 사실 compiler보다는 transpiler라는 용어가
더 맞지 않나 싶습니다. 여하간 Babel의 입력은 JavaScript이고 출력 역시 JavaScript입니다.</p>

<p>잘 알다시피 <code class="highlighter-rouge">ES5</code> 표준은 2009년도에 표준화되었습니다. 그리고 한동안 변경이 없다가 2015년에 <code class="highlighter-rouge">ES6</code>가 표준화가 됩니다.
현재 시점은 <code class="highlighter-rouge">ES7</code> 이 최신표준이지만 아직까지 ES6가 대세라고 볼 수 있습니다. 이 ES6에 들어와서는 여러가지 획기적인
변화가 생기게 되었습니다.</p>

<p>변화된 내용 중 대표적인 것들은 다음과 같습니다.</p>

<ul>
  <li><code class="highlighter-rouge">class</code></li>
  <li><code class="highlighter-rouge">arrow function</code></li>
  <li><code class="highlighter-rouge">template string</code></li>
  <li><code class="highlighter-rouge">generator</code></li>
  <li><code class="highlighter-rouge">destructuring</code></li>
  <li><code class="highlighter-rouge">let &amp; const</code></li>
</ul>

<p>문제는 이런 최신의 문법들로 쓰여진 JavaScript 코드를 런타임 환경인 <code class="highlighter-rouge">browser</code>가 인식하고 실행할 수 있는냐는 것입니다. 
browser는 최신 ECMAScript 문법을 다 지원하지 못하거든요. 특히 구형 browser나 <code class="highlighter-rouge">IE</code>같은 경우는 그 정도가 심합니다.</p>

<p>하지만 생산성과 유지보수성등의 이유로 코드자체는 ECMAScript 최신버전으로 구현하는게 당연히 좋습니다. 즉, 구현과 
실행환경과의 버전차이가 생기게 됩니다. Babel은  ECMAScript 6,7 으로 작성된 코드를 browser가 인식할 수 잇는 문법(ES5)으로
변환시켜주는 transpiler입니다.</p>

<p>한가지 주의해야 할 점은 Babel을 사용한다고 해서 모든 최신의 JavaScript함수를 다 사용할 수 있는건 아닙니다. Babel은
문법만 변환시켜 주는 역할만 할 뿐입니다. 따라서 프로그램이 처음에 시작될 때 browser에서 지원하지 않는 함수를 검사해 처리해주는
작업이 이루어져야 하고 이 부분은 <code class="highlighter-rouge">babel-ployfill</code>이 runtime에 담당하게 됩니다. ( 이 기능을 사용하기 위해서는 
추가적인 설정이 필요합니다. )</p>

<hr />

<p>자 그럼 실제 사용하는 예를 알아보도록 하겠습니다.</p>

<p><code class="highlighter-rouge">Babel</code>역시 다른 node module과 마찬가지로 npm으로 설치하면 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">preset</span><span class="o">-</span><span class="nx">es2015</span>
</code></pre></div></div>

<p>package.json에 다음과 같이 npm script 작성</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="s2">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel babelTest.js -d lib"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>ES6로 다음과 같은 코드 작성하고 <code class="highlighter-rouge">babelTest.js</code>로 저장합니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">Student</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>다음과 같이 <code class="highlighter-rouge">.babelrc</code> 파일을 작성합니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"es2015"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>다음과 같이 npm script를 실행시켜 lib폴더에 생성된 컴파일된 결과 파일을 확인합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">build</span>
</code></pre></div></div>

<p>결과로 생성된 <code class="highlighter-rouge">ES5</code> 파일의 내용</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">_classCallCheck</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">Constructor</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">instance</span> <span class="k">instanceof</span> <span class="nx">Constructor</span><span class="p">))</span> <span class="p">{</span> 
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">"Cannot call a class as a function"</span><span class="p">);</span> 
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>


<span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello "</span> <span class="o">+</span> <span class="nx">myName</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">Student</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Student</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>여기서는 <code class="highlighter-rouge">Babel</code>이 어떤 역할을 하고 어떻게 사용하는 것인지에 대해서 간단하게 알아보았습니다.</p>

<p>이 포스트의 내용은 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>JavaScript의 strict mode란 무엇인가?</title>
	  <link>https://moon9342.github.io/javascript-use-strict</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-24T01:35:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-use-strict</guid>
	  <description><![CDATA[
	     <p><strong>“use strict”를 써야하는 이유</strong></p>

<p><code class="highlighter-rouge">"use strict"</code>는 ES5에서 새롭게 나온 directive입니다. 실제 수행 문장이 아니라 literal expression이기 
때문에 이전 버전의 JavaScript에서는 무시됩니다.</p>

<p>일반적으로 JavaScript 코드 최 상단에 이 “use strict”가 위치하는데 이 의미에 대해서 간단하게 
정리해 봤습니다.</p>

<p>“use strict”의 목적은 우리의 코드가 <code class="highlighter-rouge">strict mode</code>로 실행되게끔 지시하는 것입니다. 
여기서 말하는 strict mode란 프로그램 실행 시 예외를 발생시킬 만한 몇가지 특이한 동작을 
수행할 수 없도록 엄격한 제한이 걸려있는 실행 <code class="highlighter-rouge">context</code>를 지칭합니다. 
즉, 일반적으로 동작하는 코드를 “use strict”를 이용하면 에러가 발생할 수 있다는 말이지요.</p>

<p>“use strict”는 함수별로 따로 지정할 수 있습니다. 즉, 함수내부에 “use strict”를 선언하면
해당 함수는 strict mode로 실행되게 됩니다.</p>

<p>몇가지 예를 들어보죠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>        <span class="c1">// x가 선언되지 않았기 때문에 error 발생</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>       <span class="c1">// strict mode가 아니기 때문에 에러 아님.</span>

<span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>   <span class="c1">// y가 선언되지 않았기 때문에 에러 발생</span>
<span class="p">}</span>

<span class="nx">myFunction</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>

<span class="k">delete</span> <span class="nx">x</span><span class="p">;</span>   <span class="c1">// strict mode에서는 delete를 사용할 수 없다.   </span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="kr">public</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">;</span>   <span class="c1">// strict mode에서는 키워드로 변수명을 쓸수 없다.</span>
</code></pre></div></div>

<p>그 외의 예로는 함수의 매개변수의 리스트에서 중복된 부분이 있을 때 오류를 발생시키고 동일한 라이브러리를 중복해서
로딩하는 경우 에러를 발생시킵니다. (예를 들면, <code class="highlighter-rouge">jQuery</code> library 중복로딩 )</p>

<p>결론적으로 잠재적인 오류가 발생할 수 있는 여지를 막아주도록 코드에 대한 문법 사항을 엄걱하게 지키도록 하는
directive정도로 인식하시면 될 듯 합니다.</p>

<blockquote>
  <p>결론은 <strong>고민하지 말고 무조건 써야된다!!</strong> 입니다. ^^</p>
</blockquote>

<p>이 포스트의 내용은 <a href="https://www.w3schools.com/js/js_strict.asp" target="_blank">w3schools.com</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(5) - Destructuring</title>
	  <link>https://moon9342.github.io/typescript-destructuring</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-23T17:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-destructuring</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript Destructuring</strong></p>

<p>이번 포스트의 내용은 <code class="highlighter-rouge">Destructuring</code> 입니다. 
Destructuring은 ECMAScript 2015 문법인데 TypeScript에서도 지원합니다.</p>

<blockquote>
  <p>아래의 예제를 정상적으로 실행해보실려면 <code class="highlighter-rouge">tsconfig.json</code>에서 <code class="highlighter-rouge">compilerOptions</code>의 <code class="highlighter-rouge">target</code> 속성을
<code class="highlighter-rouge">es6</code>로 해 주셔야 합니다.</p>
</blockquote>

<p>일반적으로 <code class="highlighter-rouge">Destructuring Assignment</code>(비구조할당)라고 하는데 쉽게 말하자면 배열의 요소나 객체의 속성을 
배열 literal 혹은 객체 literal과 유사한 형태의 문법을 이용하여
변수에 할당하는 기법입니다. 잘 알아두면 코드를 좀 더 쉽게 작성할 수 있습니다.</p>

<hr />

<h2 id="array-destructuring">Array Destructuring</h2>

<p>다음과 같이 배열이 있을 경우 각 배열의 원소값을 가지는 변수를 만들려고 합니다. 
아마도 코드는 다음처럼 써야 할 듯 보입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">,</span> <span class="s2">"Moon"</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">first</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">second</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">third</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>     <span class="c1">// "Hello" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>    <span class="c1">// "World" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">third</span><span class="p">);</span>     <span class="c1">// "Moon" 출력</span>
</code></pre></div></div>

<p>이 코드를 Destructuring Assignment(비구조할당)를 이용하면 다음과 같이 표현할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">,</span> <span class="s2">"Moon"</span><span class="p">];</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">,</span> <span class="nx">third</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>     <span class="c1">// "Hello" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>    <span class="c1">// "World" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">third</span><span class="p">);</span>     <span class="c1">// "Moon" 출력</span>
</code></pre></div></div>

<p>위의 코드에서 <code class="highlighter-rouge">[first, second, third]</code> 형태를 <code class="highlighter-rouge">Destructuring Array</code>(비구조배열)이라고 합니다.
즉, <code class="highlighter-rouge">let [first, second, third]</code> 구문은 변수 선언과 동시에 Destructuring Array(비구조배열)을 생성한 것입니다.</p>

<p>만약 Destructuring Array(비구조배열)에 data type을 지정하고 싶은경우는 다음과 같이 하시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">,</span> <span class="s2">"Moon"</span><span class="p">];</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">,</span> <span class="nx">third</span><span class="p">]:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>
</code></pre></div></div>

<p>간단한 응용을 보도록 하죠. 두개의 변수에 대한 swap처리입니다. 기본적으로는 임시변수가 있어야 두 변수의 값을 swap처리
할 수 있지만 Destructuring Assignment를 이용하면 보다 간단하게 할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">];</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>     <span class="c1">// "Hello" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>    <span class="c1">// "World" 출력</span>

<span class="p">[</span><span class="nx">second</span><span class="p">,</span> <span class="nx">first</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">];</span>   <span class="c1">// swap 처리</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>     <span class="c1">// "World" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>    <span class="c1">// "Hello" 출력</span>
</code></pre></div></div>

<p>이런 방식은 함수에 parameter를 전달할 때도 사용할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">([</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]:</span> <span class="p">[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">number</span><span class="p">]):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`x의 값은 </span><span class="p">${</span><span class="nx">x</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`y의 값은 </span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">myFunc</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">]);</span>
</code></pre></div></div>

<p>나머지 몇몇 응용에 대해서 알아보겟습니다. <code class="highlighter-rouge">...</code>을 이용하면 다음과 같은 형태로 서브배열을
생성할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">first</span><span class="p">,</span> <span class="p">...</span><span class="nx">others</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>    <span class="c1">// 1 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">others</span><span class="p">);</span>   <span class="c1">// [2, 3, 4] 출력 ( 서브배열 )</span>
</code></pre></div></div>

<p>다음과 같은 형태로 Destructuring Array를 이용할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">first</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>

<span class="kd">let</span> <span class="p">[,</span><span class="nx">second</span><span class="p">,</span> <span class="p">,</span><span class="nx">fourth</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArr</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>     <span class="c1">// 1 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>    <span class="c1">// 2 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fourth</span><span class="p">);</span>    <span class="c1">// 4 출력</span>
</code></pre></div></div>

<hr />

<h2 id="object-destructuring">Object Destructuring</h2>

<p>이번에는 객체를 비구조할당을 통해 이용해 보도록 하겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">key1</span> <span class="p">:</span> <span class="s2">"Hello World"</span><span class="p">,</span>
    <span class="na">key2</span> <span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="na">key3</span> <span class="p">:</span> <span class="s2">"TypeScript"</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span> <span class="na">key1</span><span class="p">:</span><span class="nx">a</span><span class="p">,</span> <span class="na">key2</span><span class="p">:</span><span class="nx">b</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>    <span class="c1">// Hello World 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>    <span class="c1">// 100 출력</span>
</code></pre></div></div>
<p>새로운 변수 a와 b가 생성되고 <code class="highlighter-rouge">obj.key1</code>의 값의 <code class="highlighter-rouge">key1:a</code>에 의해서 a 변수에 대입됩니다.
마찬가지로 <code class="highlighter-rouge">obj.key2</code>의 값이 <code class="highlighter-rouge">key2:b</code>에 매칭되서 b 변수에 값이 할당되는 것이구요. <code class="highlighter-rouge">obj.key3</code>는 당연히 무시됩니다.
변수를 선언할 때 <code class="highlighter-rouge">[ ]</code>가 아닌 <code class="highlighter-rouge">{ }</code>를 이용한다는 것에 주의하셔야 합니다.</p>

<p>만약 객체의 Key( 위의 예제에서는 <code class="highlighter-rouge">key1</code>, <code class="highlighter-rouge">key2</code>, <code class="highlighter-rouge">key3</code> )가 비구조 객체에 쓰이는 변수의 이름과 동일하다면
간소화된 형태로 이용할 수 있습니다. 아래의 예처럼 말이죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">key1</span> <span class="p">:</span> <span class="s2">"Hello World"</span><span class="p">,</span>
    <span class="na">key2</span> <span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="na">key3</span> <span class="p">:</span> <span class="s2">"TypeScript"</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span> <span class="nx">key1</span><span class="p">,</span> <span class="nx">key2</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key1</span><span class="p">);</span>    <span class="c1">// Hello World 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key2</span><span class="p">);</span>    <span class="c1">// 100 출력</span>
</code></pre></div></div>

<p>그러면 다음과 같이 표현할 수 도 있겠네요.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">{</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s2">"Hello World"</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">100</span> <span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>    <span class="c1">// Hello World 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>    <span class="c1">// 100 출력</span>
</code></pre></div></div>

<p>조금 헷갈리긴 하지만 익숙해지면 할 만 합니다. ^^;</p>

<p>아까 위에서 나왔던 <code class="highlighter-rouge">...</code>을 기억하시나요? 배열의 나머지를 가지고 서브배열을 생성할 때 사용했었습니다. 
Object Destructuring에서도 <code class="highlighter-rouge">...</code>을 이용할 수 있습니다. 아래의 코드를 살펴보도록 하죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s2">"홍길동"</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s2">"서울"</span><span class="p">,</span>
    <span class="na">myAge</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span> <span class="nx">myName</span><span class="p">,</span> <span class="p">...</span><span class="nx">otherInfo</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`이름은 : </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`나이는 : </span><span class="p">${</span><span class="nx">otherInfo</span><span class="p">.</span><span class="nx">myAge</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
</code></pre></div></div>

<p>객체의 property의 이름을 다른 것으로 바꿀 수 있습니다. 아래의 코드를 보시죠</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">a</span><span class="p">:</span> <span class="s2">"홍길동"</span><span class="p">,</span>
    <span class="na">b</span><span class="p">:</span> <span class="s2">"서울"</span><span class="p">,</span>
    <span class="na">c</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span><span class="nx">myName</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span><span class="nx">myAddress</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`이름은 : </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>     <span class="c1">// 홍길동 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`주소는 : </span><span class="p">${</span><span class="nx">myAddress</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>  <span class="c1">// 서울 출력</span>
</code></pre></div></div>

<p>위의 코드에서 주의해야 할 점은 <code class="highlighter-rouge">a:myName, b:myAddress</code>에서 <code class="highlighter-rouge">:</code>의 의미가 data type을 지정하는 것으로 
사용된 것이 아니라는 것입니다. 만약 데이터 타입을 지정해서 사용하려면 다음과 같이 사용하셔야 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">a</span><span class="p">:</span> <span class="s2">"홍길동"</span><span class="p">,</span>
    <span class="na">b</span><span class="p">:</span> <span class="s2">"서울"</span><span class="p">,</span>
    <span class="na">c</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span><span class="nx">myName</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span><span class="nx">myAddress</span> <span class="p">}:</span> <span class="p">{</span><span class="nl">a</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span><span class="nx">string</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`이름은 : </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>     <span class="c1">// 홍길동 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`주소는 : </span><span class="p">${</span><span class="nx">myAddress</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>  <span class="c1">// 서울 출력</span>
</code></pre></div></div>

<p>점점 복잡해 지는군요. 한가지 주의해야 할 점은 ECMAScript 2015(ES6)에서의 Destructuring과 TypeScript의
Destructuring이 완벽하게 똑같지는 않다는 것입니다.</p>

<p>이번에 살펴볼 것은 <code class="highlighter-rouge">default</code> 값입니다. Destructuring하려는 속성이 존재하지 않을 때를 대비해서 default값을
지정할 수 있습니다. 아래의 예를 보시죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span><span class="p">:</span> <span class="p">{</span><span class="nl">myName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">myAge</span><span class="p">?:</span><span class="nx">number</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span> <span class="p">:</span> <span class="s2">"홍길동"</span><span class="p">,</span>
<span class="p">};</span>


<span class="kd">let</span> <span class="p">{</span> <span class="na">myName</span><span class="p">:</span><span class="nx">uNmae</span><span class="p">,</span> <span class="na">myAge</span><span class="p">:</span><span class="nx">uAge</span> <span class="o">=</span> <span class="mi">30</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uNmae</span><span class="p">);</span>  <span class="c1">// 홍길동</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uAge</span><span class="p">);</span>   <span class="c1">// 30</span>
</code></pre></div></div>

<p>위의 예에서 <code class="highlighter-rouge">myAge?:number</code> 부분의 <code class="highlighter-rouge">?</code>의 의미는 해당 property가 있을 수도 있고 없을 수도 있다는것을 의미합니다.
<code class="highlighter-rouge">myAge:uAge = 30</code> 부분이 default value를 사용한 부분입니다.</p>

<hr />

<h2 id="어디에-쓰면-좋을까요">어디에 쓰면 좋을까요?</h2>

<p>간단하게 Destructuring이 무엇인지를 살펴보았는데 그럼 도데체 이걸 어디에 써 먹어야 할까요?
이런식의 응용이 가능하구나 하는 정도로 가볍게 보시면 될 듯 합니다.</p>

<p>첫번째로 생각할 수 있는 응용은 ECMAScript 2015에서 제공되는 <code class="highlighter-rouge">Iteration Protocol</code>과의 연계사용입니다.
아주 쉽게 생각하면 <strong><code class="highlighter-rouge">Map</code>사용에 응용할 수 있다</strong> 정도로 보시면 됩니다. Map 자료구조는 key와 value의 쌍으로
데이터를 저장하는 구조이고 다음과 같은 형태로 Destructuring과 함께 이용할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>

<span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s2">"myName"</span><span class="p">,</span><span class="s2">"홍길동"</span><span class="p">);</span>
<span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s2">"myAddress"</span><span class="p">,</span><span class="s2">"서울"</span><span class="p">);</span>
<span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s2">"myAge"</span><span class="p">,</span><span class="mi">30</span><span class="p">);</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> 의 값은 </span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2"> 입니다.`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 모든 key 값만을 출력할 수 있습니다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="p">[,</span><span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 모든 value 값만을 출력할 수 있습니다.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">value</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>두번째는 함수의 리턴값에 응용하는 것입니다. 리턴값이 두개 이상 필요할 때 우리는 배열형태나 객체형태로 
리턴을 받게 되는데 Destructuring을 이용하면 편합니다.</p>

<p>다음은 배열을 리턴받는 경우입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">():</span> <span class="nx">string</span><span class="p">[]</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">arr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="c1">// 로직처리 ...</span>
    <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"첫번째 결과값"</span><span class="p">;</span>
    <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"두번째 결과값"</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="p">[</span><span class="nx">result1</span><span class="p">,</span> <span class="nx">result2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myFunc</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result2</span><span class="p">);</span>
</code></pre></div></div>

<p>다음은 객체를 리턴받는 경우입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">():</span> <span class="p">{</span><span class="nl">result1</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">result2</span><span class="p">?:</span><span class="nx">number</span><span class="p">}</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">result1</span> <span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
        <span class="na">result2</span> <span class="p">:</span> <span class="mi">0</span>
    <span class="p">};</span>
    <span class="c1">// 로직처리 ...</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">result1</span> <span class="o">=</span> <span class="s2">"첫번째 결과값"</span><span class="p">;</span>
    <span class="nx">obj</span><span class="p">.</span><span class="nx">result2</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="p">{</span><span class="na">result1</span><span class="p">:</span><span class="nx">first</span><span class="p">,</span> <span class="na">result2</span><span class="p">:</span><span class="nx">second</span><span class="p">}</span> <span class="o">=</span> <span class="nx">myFunc</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">second</span><span class="p">);</span>
</code></pre></div></div>

<p>꼭 사용해야 할 필요는 없지만 알아두면 편하고 좋은 <code class="highlighter-rouge">Destructuring</code>에 대해서 알아보았습니다.</p>

<p>이 포스트의 내용은 <a href="http://www.typescriptlang.org" target="_blank">TypeScript official home page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(4) - 변수 선언</title>
	  <link>https://moon9342.github.io/typescript-variable</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-22T19:14:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-variable</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript Variable Declarations</strong></p>

<p>이번 포스트에서는 <code class="highlighter-rouge">var</code>, <code class="highlighter-rouge">let</code>, <code class="highlighter-rouge">const</code>에 대해서 알아보겠습니다. let은 var과 유사하지만 var이
가지고 있는 우리에게 익숙치 않은 몇가지 사항들을 피하도록 도와줍니다. const는 이름에서 의미하다시피 변수에
재할당을 금지하는 목적으로 사용하는 것이구요.</p>

<p><strong>결론을 미리 말하자면 <code class="highlighter-rouge">TypeScript</code>는 <code class="highlighter-rouge">let</code>과 <code class="highlighter-rouge">const</code>를 이용합니다.</strong></p>

<p>먼저 <code class="highlighter-rouge">var</code>에 대해서 알아보고 그 다음에 <code class="highlighter-rouge">let</code>, <code class="highlighter-rouge">const</code>에 대해서 알아보도록 하겠습니다.</p>

<hr />

<h2 id="var">var</h2>

<p>코드로 설명하자면 다음과 같이 변수를 선언할 수 있습니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<p>당연한 말이지만 함수내에서도 선언할 수 있습니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="s2">"Hello World"</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">message</span>
<span class="p">}</span>
</code></pre></div></div>

<p>JavaScript는 함수안에 다른 함수를 선언할 수 있습니다. 그러한 경우 내부 함수가 외부 함수가 가지고 있는
변수를 참조할 수 있습니다. 또한 JavaScript는 1급 함수(<code class="highlighter-rouge">first-class function</code>)를 지원합니다. 쉽게 말하면
JavaScript의 함수는 <strong>값의 의미</strong>로 사용될 수 있다는 것입니다. 함수가 값의 역할을 하다보니 다음과 같은 형태의
코드가 가능합니다.</p>

<ul>
  <li>함수를 변수에 저장.</li>
  <li>함수를 다른 함수의 인자로 전달.</li>
  <li>함수를 다른 함수의 리턴값으로 사용.</li>
</ul>

<p>위와 같은 형태의 함수를 이용할 때는 함수의 이름이 특별히 필요하지 않기 때문에 
이런 함수는 특별히 이름을 명시하지 않고 사용합니다.
이런 함수를 우리는 익명함수( <code class="highlighter-rouge">Anonymous function</code> )라고 하죠. 다른 표현으로는 람다( <code class="highlighter-rouge">Lambda</code> )라고도 합니다.
( 사실 Lambda에 대한 내용은 조금 더 파고 들어야 합니다. 나중에 다른 포스트에서 정리해볼께요 )</p>

<p>위의 내용으로 간단한 예를 들자면 아래와 같습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">myFunc</span> <span class="o">=</span> <span class="nx">outerFunc</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">());</span>    <span class="c1">// 200 출력</span>
</code></pre></div></div>

<p>사실 위의 예제는 좀 이상합니다. 아니 많이 이상하죠.</p>

<p>다음과 같은</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myFunc</span> <span class="o">=</span> <span class="nx">outerFunc</span><span class="p">();</span>
</code></pre></div></div>
<p>코드에서 <code class="highlighter-rouge">outerFunc()</code>함수는 수행이 종료되었기
때문에 그 안에 선언된 변수 <code class="highlighter-rouge">a</code>는 사실 사용할 수 없어야 합니다. 
우리가 익히 알고 있는 다른 프로그래밍 언어의 변수 scope 개념으로 본다면 말이죠.</p>

<p>하지만 JavaScript의 <code class="highlighter-rouge">var</code> 변수 scope는 좀 다릅니다. <strong><code class="highlighter-rouge">outerFunc()</code> 함수의 호출이 끝났음에도 불구하고 
<code class="highlighter-rouge">a</code> 변수값이 유지됩니다.</strong> 즉, outerFunc()에 대한 참조가 남아있는 한 메모리에 계속 유지하게 되는 구조입니다.
( outerFunc() 함수가 실행중인 상태로 간주한다는 의미이기도 합니다. ) 
그렇기 때문에 위에서 <code class="highlighter-rouge">myFunc()</code>를 호출했을 때 <code class="highlighter-rouge">a</code> 변수를 이용할 수 있는 것입니다.</p>

<p>조금 다른 예제를 살펴보겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">init</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">init</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>  <span class="c1">// 10 출력</span>
</code></pre></div></div>

<p><strong>위의 코드는 JavaScript 코드입니다.</strong> <code class="highlighter-rouge">var</code> 변수는 if block 안에서 선언되었음에도 불구하고 
block 외부에서도 사용이 가능합니다. 위에서 언급했듯이 JavaScript의 var 변수 scope가 좀 독특해서 그렇습니다. 
var로 선언된 변수는 block에 상관없이 function 내에서 사용이 가능합니다.</p>

<blockquote>
  <p>이런 특성을 <strong>var은 <code class="highlighter-rouge">function-scoping</code>을 가진다</strong> 라고 표현합니다.</p>
</blockquote>

<p>var에 대해서 마지막 하나만 더 살펴보고 정리하겠습니다.</p>

<p>다음과 같은 <code class="highlighter-rouge">setTimeout</code>을 이용한 코드가 있을 때 실행결과가 어떻게 출력될까요?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">},</span>
        <span class="mi">1000</span>
    <span class="p">);</span>
<span class="p">}</span>   
</code></pre></div></div>

<p>결과는 다음과 같이 출력됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10
10
10
10
10
10
10
10
10
10
</code></pre></div></div>

<p>JavaScript를 알고 있는 사람들에게는 꽤나 익숙한 코드형태이자 결과일겁니다. <code class="highlighter-rouge">setTimeout</code>은 두번째 인자로 들어가는
시간을 delay로 첫번째 인자의 함수를 호출해 주는 역할을 하는 함수입니다. (내부 Thread로 동작하겠죠)</p>

<p>for문은 순식간에 수행될 것이고 1초뒤에 다음 코드가</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">}</span>
</code></pre></div></div>

<p>10번 호출되게 됩니다. 이 때 <code class="highlighter-rouge">i</code>변수는
상위 for문의 scope를 참조하게 되므로 실제 <code class="highlighter-rouge">console.log(i)</code>가 수행될 때 <code class="highlighter-rouge">i</code>값을 참조하면 10이라는 값을 가지고 있을테니
화면에 10이 10번 출력되게 됩니다.</p>

<p>그러면 0부터 9까지 순차적으로 출력하려면 어떻게 해야 할까요? 이 작업을 수행하기 위해 <code class="highlighter-rouge">IIFE</code>을 이용합니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">IIFE</code>는 <strong>Immediately Invoked Function Expression</strong>을 의미합니다.</p>
</blockquote>

<p>코드를 아래와 같이 수정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tmp</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">setTimeout</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span> <span class="p">},</span>
            <span class="mi">1000</span>
        <span class="p">);</span>
    <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>즉시 실행되는 함수 표현법(IIFE)를 이용하여 새로운 function scope를 생성해서 
<code class="highlighter-rouge">i</code>값을 capture하는 방식으로 처리하면 될 듯 합니다.</p>

<p>이 부분을 정확히 이해하기 위해서는 <code class="highlighter-rouge">free variable</code>, <code class="highlighter-rouge">scope chain</code>, <code class="highlighter-rouge">Closure</code>에 대한 이해가 있어야 합니다. 너무 이야기가
산으로 가니 이 부분은 JavaScript 관련 포스트에서 따로 정리해 보도록 하겠습니다.</p>

<hr />

<h2 id="let">let</h2>

<p>위에서 언급한 var의 모호성을 <code class="highlighter-rouge">let</code>을 이용해 해결할 수 있습니다. 변수를 선언할 때 단순히 var대신 let을 이용하면
됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">"Hello World!!"</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">let</code>은 우리에게 친숙한 <code class="highlighter-rouge">block-scoping</code>을 가집니다. ( <code class="highlighter-rouge">lexical-scoping</code> 이라고도 합니다. )</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">input</span><span class="p">:</span> <span class="kr">boolean</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">// a에 접근이 가능합니다.</span>
        <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>            <span class="c1">// 코드 에러( b에 접근할 수 없습니다. )</span>
<span class="p">}</span>
</code></pre></div></div>

<p>let의 또 다른 특징은 변수의 중복 선언이 안된다는 것입니다. 사실 프로그래밍 언어에서는 거의 당연시 여겨지는 것이지만
var는 중복선언이 가능합니다. 다음과 같이 말이죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>          <span class="c1">// JavaScript의 var은 같은 변수를 중복선언할 수 있습니다. </span>
    
    <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>자 그럼 아까 var로 선언했을 때 이상하게 동작했던 setTimeout을 이번에는 let을 이용해서
처리하면 어떻게 될까요?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">},</span>
        <span class="mi">1000</span>
    <span class="p">);</span>
<span class="p">}</span>  
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
1
2
3
4
5
6
7
8
9
</code></pre></div></div>

<p><code class="highlighter-rouge">var</code>로 선언했을 때와 다른 결과를 볼 수 있습니다.</p>

<blockquote>
  <p>결론적으로 <code class="highlighter-rouge">let</code>은 우리가 익히 알던 (다른 언어의) 변수 특징을 가지는 <br />
변수를 선언하기 위한 keyword라고 생각하시면 됩니다.</p>
</blockquote>

<hr />

<h2 id="const">const</h2>

<p>변수를 선언하기 위한 또 다른 방법은 <code class="highlighter-rouge">const</code>를 이용하는 것입니다. 하지만 const로 선언된 변수에는
재 할당(re-assign)이 불가능 합니다. 아래의 예처럼 말이죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myName</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">myName</span> <span class="o">=</span> <span class="s2">"강감찬"</span><span class="p">;</span>   <span class="c1">// 코드 에러</span>
</code></pre></div></div>

<p>const를 사용할 때 한가지만 주의하시면 됩니다. 만약 const 변수가 객체를 지칭하게 되면 다른 객체로 reference를
바꾸지는 못하지만 현재 reference하고 있는 객체의 속성에 대해서는 값을 변경할 수 있습니다.
아래의 예처럼 말이죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">count</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myProfile</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s2">"홍길동"</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s2">"서울"</span><span class="p">,</span>
    <span class="na">myCount</span><span class="p">:</span> <span class="nx">count</span>
<span class="p">};</span>

<span class="nx">myProfile</span> <span class="o">=</span> <span class="p">{</span>                  <span class="c1">// 코드 에러 ( re-assign 안됨 )</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s2">"강감찬"</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s2">"인천"</span><span class="p">,</span>
<span class="p">};</span>                   

<span class="nx">myProfile</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="s2">"강감찬"</span><span class="p">;</span>   <span class="c1">// 가능</span>
<span class="nx">myProfile</span><span class="p">.</span><span class="nx">myAddress</span> <span class="o">=</span> <span class="s2">"인천"</span><span class="p">;</span>
<span class="nx">myProfile</span><span class="p">.</span><span class="nx">myCount</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>변수 선언에 대한 keyword에 대해서는 이정도 알아두시면 될 듯 보입니다. 다음 주제는 <code class="highlighter-rouge">Destructuring</code>(디스트럭쳐링)입니다.</p>

<p>이 포스트의 내용은 <a href="http://www.typescriptlang.org" target="_blank">TypeScript official home page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(3) - Data Type(Part 2)</title>
	  <link>https://moon9342.github.io/typescript-datatype-2</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-22T16:44:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-datatype-2</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript Data Type</strong></p>
<ul>
  <li><code class="highlighter-rouge">any</code></li>
  <li><code class="highlighter-rouge">void</code></li>
  <li><code class="highlighter-rouge">null &amp; undefined</code></li>
  <li><code class="highlighter-rouge">never</code></li>
  <li><code class="highlighter-rouge">type assertions</code></li>
</ul>

<p>이전 포스트에서 기본적인 data type을 알아보았으니 이번에는 조금 더 색다른 data type을 살펴보도록 하겠습니다.</p>

<hr />

<h2 id="any">any</h2>

<p>Application을 작성하는 시점을 기준으로 할 때 <strong>어떤 변수의 data type을 결정할 수 없는 경우</strong>가 아주 간혹 있습니다.</p>

<p>가장 쉬운 예로 3rd party library를 이용해 dynamic content를 로딩해 저장하는 변수를 생각하시면 됩니다.
즉, 동적으로 로딩되는 데이터의 타입이 runtime에 결정되므로 컴파일 타임에 data type을 지정할 수 없는 경우입니다.<br />
(하지만 사실 우리는 대부분 데이터 타입을 정해놓고 구현을 진행하긴 합니다. ^^)</p>

<p>이런 경우 어떠한 data type도 될 수 있다라는 의미로 <code class="highlighter-rouge">any</code> data type을 이용할 수 있습니다.
data type에 구애받지 않고 쉽게 코드를 작성할 수 있도록 만들어주지만 위에서 언급한 특정 목적을 제외하고는
<strong>당연히 사용하지 않는것이 좋습니다.</strong></p>

<p>아래의 코드를 살펴보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="nx">any</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="nx">myVar</span> <span class="o">=</span> <span class="s2">"Hello World!!"</span><span class="p">;</span> <span class="c1">// 가능</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>            <span class="c1">// 가능 </span>
</code></pre></div></div>

<p>배열의 data type으로 <code class="highlighter-rouge">any</code>를 이용하여 서로 다른 data type으로 배열을 이용하는게 가능해집니다.
아래의 코드처럼 말이죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="s2">"Hello"</span><span class="p">,</span> <span class="kc">true</span><span class="p">];</span>
</code></pre></div></div>

<hr />

<h2 id="void">void</h2>

<p>어디서 많이 본 것입니다. 일반적으로 <code class="highlighter-rouge">void</code>는 함수가 리턴값이 없을 때 함수의 리턴 type으로 이용합니다. 
아래의 코드를 보시죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">!!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">myFunc</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
</code></pre></div></div>

<p>일반 변수를 만약 void로 선언하면 어떻게 될까요? 변수를 void type으로 선언하면 해당 변수에는 
<code class="highlighter-rouge">null</code> 혹은 <code class="highlighter-rouge">undefined</code>만 assign이 가능합니다. 이렇게 사용할 일이 과연 있을까 싶네요.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="k">void</span><span class="p">;</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>       <span class="c1">// 불가능(코드 에러)</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="s2">"Hello"</span><span class="p">;</span>   <span class="c1">// 불가능(코드 에러)</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>      <span class="c1">// 가능</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// 가능</span>
</code></pre></div></div>

<blockquote>
  <p>여기서 주의해야 할 점은 <code class="highlighter-rouge">tsconfig.json</code>파일안에 <code class="highlighter-rouge">compilerOptions</code> 부분에 <code class="highlighter-rouge">"strictNullChecks": false</code> option을
설정해야 한다는 것입니다.</p>
</blockquote>

<hr />

<h2 id="null--undefined">null &amp; undefined</h2>

<p>TypeScript에서 <code class="highlighter-rouge">null</code>과 <code class="highlighter-rouge">undefined</code>는 값이자 하나의 data type입니다. 그렇기 때문에 다음과 같이 사용해야 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myNull</span><span class="p">:</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">myUndefined</span><span class="p">:</span> <span class="kc">undefined</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</code></pre></div></div>

<p>하지만 null과 undefined는 <strong>다른 모든 type의 subtype</strong>입니다. 
쉽게 말하면 다른 모든 type에 null과 undefined를 assign할 수 있다는 말입니다.</p>

<p>여기서 주의해야 할 점은 만약 <code class="highlighter-rouge">--strictNullChecks</code> flag를 이용해 <code class="highlighter-rouge">.ts</code>파일을 컴파일 할 경우 null과 undefined는 void 혹은
자신의 data type에만 assign될 수 있게됩니다.
(<code class="highlighter-rouge">tsconfig.json</code>파일안에서 <code class="highlighter-rouge">"strictNullChecks": true</code>로 설정한 경우를 의미 )</p>

<blockquote>
  <p>tsconfig.json파일안에 compilerOptions 부분에 <code class="highlighter-rouge">"strictNullChecks": false</code> option 적용한 경우</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myName</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myVoid</span><span class="p">:</span> <span class="k">void</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myNull</span><span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myUndefined</span><span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>

<span class="nx">myName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 가능</span>
<span class="nx">myName</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 가능</span>

<span class="nx">myVoid</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 가능</span>
<span class="nx">myVoid</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 가능</span>

<span class="nx">myNull</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 가능</span>
<span class="nx">myNull</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 가능</span>

<span class="nx">myUndefined</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>       <span class="c1">// 가능</span>
<span class="nx">myUndefined</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>  <span class="c1">// 가능</span>
</code></pre></div></div>

<blockquote>
  <p>tsconfig.json파일안에 compilerOptions 부분에 <code class="highlighter-rouge">"strictNullChecks": true</code> option 적용한 경우</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myName</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myVoid</span><span class="p">:</span> <span class="k">void</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myNull</span><span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myUndefined</span><span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>

<span class="nx">myName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 불가능</span>
<span class="nx">myName</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 불가능</span>

<span class="nx">myVoid</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 불가능</span>
<span class="nx">myVoid</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 가능</span>

<span class="nx">myNull</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>            <span class="c1">// 가능</span>
<span class="nx">myNull</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>       <span class="c1">// 불가능</span>

<span class="nx">myUndefined</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>       <span class="c1">// 불가능</span>
<span class="nx">myUndefined</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>  <span class="c1">// 가능</span>
</code></pre></div></div>

<hr />

<h2 id="never">never</h2>

<p><code class="highlighter-rouge">never</code> type은 일반적으로 함수의 리턴 타입으로 사용됩니다. 만약 함수의 리턴 type으로 never가 사용되면 해당
함수는 항상 exception을 발생시키던가 혹은 절대 return되지 않는다는 것을 의미합니다. 절대 return되지 않는다는
것은 무한 loop에 빠지는 것등을 의미합니다.</p>

<p>코드상으로 이해하자면 다음과 같은 경우입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nx">never</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">error</span><span class="p">(</span><span class="s2">"Something Wrong!!"</span><span class="p">);</span>



<span class="kd">function</span> <span class="nx">infiniteLoop</span><span class="p">():</span> <span class="nx">never</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="type-assertions">Type assertions</h2>

<p><code class="highlighter-rouge">Type assertions</code>는 컴파일러에게 “이 타입 사용이 맞아!!”라는 의미를 전달하는 것입니다. Type assertions
은 type casting과 같은 의미로 사용되지만 실제 특별한 체크작업이나 데이터 재구조화 작업이 발생하지 않습니다.
TypeScript는 프로그래머가 특정한 type check를 진행했다고 가정한 후 컴파일을 진행합니다.
( TypeScript가 따로 검증하지 않는다는 거죠. )</p>

<p>Type assertions을 하는 방법은 2가지가 있습니다. angle-bracket syntax(<code class="highlighter-rouge">&lt;&gt;</code>)를 이용하는 방법과 <code class="highlighter-rouge">as</code> syntax를
이용하는 방법입니다. 아래의 코드를 보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="nx">any</span> <span class="o">=</span> <span class="s2">"Hello World"</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">myVarCount</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="nx">myVar</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>

<span class="nx">myVarCount</span> <span class="o">=</span> <span class="p">(</span><span class="nx">myVar</span> <span class="k">as</span> <span class="nx">string</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="nx">myVar</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">());</span>  <span class="c1">// runtime error</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">any</code> data type과 함께 사용되는 경우가 많으며 데이터 타입을 한정지어서 사용할 수 있도록 도와주는 역할을 합니다.</p>

<p>여기까지가 TypeScript의 기본 data type입니다. 다음 포스트는 변수를 선언하기 위한 키워드인 
<code class="highlighter-rouge">var</code>, <code class="highlighter-rouge">let</code>, <code class="highlighter-rouge">const</code>에 대해서 알아보도록 하겠습니다.</p>

<p>이 포스트의 내용은 <a href="http://www.typescriptlang.org" target="_blank">TypeScript official home page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(2) - Data Type(Part 1)</title>
	  <link>https://moon9342.github.io/typescript-datatype-1</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-22T13:07:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-datatype-1</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript Data Type</strong></p>
<ul>
  <li><code class="highlighter-rouge">boolean</code></li>
  <li><code class="highlighter-rouge">number</code></li>
  <li><code class="highlighter-rouge">string</code></li>
  <li><code class="highlighter-rouge">Array</code></li>
  <li><code class="highlighter-rouge">Tuple</code></li>
  <li><code class="highlighter-rouge">enum</code></li>
</ul>

<p>프로그래밍 언어를 배울 때 가장 먼저 학습하는 부분이 바로 <code class="highlighter-rouge">Data Type</code>입니다. 이전에도 언급했듯이
TypeScript는 JavaScript의 superset이기 때문에 JavaScript의 data type을 그대로 이용합니다. 거기에
추가적인 데이터 타입이 더 존재합니다.</p>

<p>그럼 하나하나 예를 들면서 보도록 하죠.</p>

<hr />

<h2 id="boolean">boolean</h2>

<p>우리가 알고있는 <code class="highlighter-rouge">boolean</code> type입니다. <code class="highlighter-rouge">true</code>와 <code class="highlighter-rouge">false</code> keyword를 사용할 수 있습니다.</p>

<p>TypeScript에서는 변수선언시 <code class="highlighter-rouge">var</code>을 사용하지 않습니다. 
var는 전통적으로 javascript의 변수를 선언하기 위한 keyword로 사용되고 있지만
몇가지 우리를 힘들게 하는 특징이 있습니다. 이부분은 나중에 다시 포스팅하기로 하겠습니다.</p>

<p>여하간 TypeScript에서는 var대신 <code class="highlighter-rouge">const</code>와 <code class="highlighter-rouge">let</code>을 이용합니다. 다음과 같이 boolean type의 변수를 선언할
수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</code></pre></div></div>

<p>WebStorm에서는 다음그림처럼 확인하시면 편합니다. 왼쪽창에는 <code class="highlighter-rouge">.ts</code>파일, 오른쪽 창에는 변환된 <code class="highlighter-rouge">.js</code>파일을
열어서 .ts가 어떻게 .js로 변환되는지를 확인해보세요.</p>

<p><img src="assets/built/images/webstorm-project-datatype-boolean.png" alt="코드비교" /></p>

<p>JavaScript에는 <strong>생성자 함수</strong>라는게 있습니다. <br />
원래 Javascript는 객체지향언어가 아닙니다. <code class="highlighter-rouge">Prototype</code>기반의 언어입니다.
그래서 JavaScript 초기버전에는 <code class="highlighter-rouge">class</code>가 도입되지 않았습니다. class는 ECMAScript 2015(ES6)에 도입되었습니다. 
class가 도입되기 이전에는 함수를 이용해서 객체를 생성하는 <strong>생성자 함수</strong>라는걸 사용했습니다. 
지금도 역시 사용하고 있구요. 우리가 알고있는 <code class="highlighter-rouge">new Date();</code> 이런게 다 생성자 함수를 이용한 객체의 생성입니다.</p>

<p>그 중 특수한 생성자 함수들이 있습니다. <strong>바로 primitive type에 대한 생성자 함수들 입니다.</strong> 
이런것들을 우리는 흔히 <code class="highlighter-rouge">Wrapper</code>라고 부릅니다. JavaScript에도 Wrapper Object가 존재합니다. 
<code class="highlighter-rouge">Boolean</code>과 같은 생성자 함수를 이용해서 object를 만들면 우리는 그걸 primitive wrapper object라고 하는거지요.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myBooleanVar</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>   
</code></pre></div></div>

<p>이제 아래의 코드를 살펴보죠.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myBooleanVar</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBooleanVar</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">());</span></code></pre></figure>

<p>위와 같은 코드는 좀 이상합니다. <code class="highlighter-rouge">myVar</code>는 primitive type임에도 불구하고 method를 호출했습니다.
그럼에도 이상없이 실행이 잘 됩니다. 그 이유는 자동형변환이 일어나기 때문입니다. <code class="highlighter-rouge">autoboxing</code>이라고 하죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span><span class="p">:</span> <span class="kr">boolean</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>    <span class="c1">// 코드 에러</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">());</span>
</code></pre></div></div>
<p>위의 코드는 에러입니다. boolean type의 변수에 Boolean wrapper object를 assign할 수 없다는 오류가 발생합니다.</p>

<p>혼용해서 사용하는건 좋지 않습니다. JavaScript할 때야 그냥 막(?) 했지만 TypeScript는 data type을 정확히 명시하는
습관을 들이셔야 합니다.</p>

<blockquote>
  <p>결론적으로 <code class="highlighter-rouge">booelan</code> / <code class="highlighter-rouge">Boolean</code> 이 존재하는군요. 하나는 primitive data type이고 다른 하나는 primitive wrapper object를
만들기 위한 생성자 함수입니다. <strong>data type 용도로 사용할 경우는 <code class="highlighter-rouge">boolean</code>을 이용하셔야 합니다.(나머지 data type에 대해서도
동일합니다. - 권장사항)</strong></p>
</blockquote>

<hr />

<h2 id="number">number</h2>

<p>TypeScript는 정수와 실수를 구분하지 않습니다. 모두 다 실수( <code class="highlighter-rouge">floating point values</code> )입니다. data type으로는
<code class="highlighter-rouge">number</code>를 사용합니다. 대응되는 wrapper 생성자 함수는 <code class="highlighter-rouge">Number</code>가 되겠네요.
기본적인 10진수, 16진수에 더해 ECMAScript 2015에서 2진수, 8진수의 사용도 추가되었습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">decimal</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>     
<span class="kd">let</span> <span class="nx">hex</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mh">0xf00d</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">binary</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mb">0b1010</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">octal</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mo">0o744</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">octal</span><span class="p">.</span><span class="nx">valueOf</span><span class="p">());</span>
</code></pre></div></div>

<hr />

<h2 id="string">string</h2>

<p>문자열을 지칭합니다. 기본적으로 double quotes (<code class="highlighter-rouge">"</code>) 와 single quotes (<code class="highlighter-rouge">'</code>) 둘 다 이용할 수 있습니다.
대응되는 wrapper 생성자 함수는 <code class="highlighter-rouge">String</code> 입니다.</p>

<p>한가지 더 기억해야 할 것이 있는데 <code class="highlighter-rouge">template string</code>이라는 걸 사용할 수 있습니다. backquote ( ` ) 를 이용하여
여러줄에 걸쳐 문자열을 입력할 수 있고 <code class="highlighter-rouge">${ expr }</code> 형태로 embedded expression을 사용할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myStr</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">"Hello"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myNumber</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">myTemplateString</span> <span class="o">=</span> <span class="s2">`this is
a
sample
Text =&gt; </span><span class="p">${</span> <span class="nx">myNumber</span> <span class="o">+</span> <span class="mi">100</span> <span class="p">}</span><span class="s2">
myStr : </span><span class="p">${</span> <span class="nx">myStr</span><span class="p">}</span><span class="s2">
`</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myTemplateString</span><span class="p">);</span>
</code></pre></div></div>

<p>실행결과는 다음과 같습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this is
a
sample
Text =&gt; 200
myStr : Hello
</code></pre></div></div>

<hr />

<h2 id="array">Array</h2>

<p>TypeScript는 JavaScript와 마찬가지로 <code class="highlighter-rouge">Array</code>를 지원합니다. 배열은 primitive data type이 아닌 객체입니다.
배열은 두가지 방식으로 사용할 수 있습니다. 일반적인 방식은 다음과 같습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">string</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"Hi"</span><span class="p">,</span> <span class="s2">"안녕하세요"</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myArr</span><span class="p">);</span>
</code></pre></div></div>

<p>또 다른 방식은 <code class="highlighter-rouge">Array Interface</code>와 <code class="highlighter-rouge">generic</code>을 이용하는 방법입니다. 
자세한 설명은 다른 포스트에서 진행합니다. 여기서는 어떻게 배열을 선언하고 
사용하는지만 보시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myNumArr</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myNumArr</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<h2 id="tuple">Tuple</h2>

<p><code class="highlighter-rouge">Tuple</code>은 배열입니다. 특수한 형태의 배열로 인식하시면 됩니다. 
배열의 각 원소에 대해 각기 다른 data type을 허용합니다.
다음과 같은 코드를 가지고 이해해보죠</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kd">let</span> <span class="nx">myTuple</span><span class="p">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">];</span>

<span class="nx">myTuple</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span> <span class="c1">// 가능</span>

<span class="nx">myTuple</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">];</span> <span class="c1">// 에러</span></code></pre></figure>

<p>위의 코드의 제일 마지막 문장인</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myTuple</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">];</span>
</code></pre></div></div>

<p>코드는 Tuple의 type선언에 맞지 않기때문에 Error가 발생합니다.</p>

<p>다음의 코드를 살펴보죠</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myTuple</span><span class="p">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">];</span>

<span class="nx">myTuple</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span> <span class="c1">// 가능</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myTuple</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>  <span class="c1">// "Hello" 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myTuple</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>  <span class="c1">// 100 출력</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myTuple</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>  <span class="c1">// undefined 출력</span>
</code></pre></div></div>

<p>위에서 언급했듯이 배열로 사용합니다. 2칸짜리 배열을 만들고 첫번째 칸에는 string, 두번째 칸에는 number를 data type으로
가지는 배열입니다.</p>

<p>JavaScript의 배열은 크기를 동적으로 늘릴 수 있습니다. 3번째 칸( <code class="highlighter-rouge">myTuple[2]</code> )에 데이터를 입력해 보겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myTuple</span><span class="p">:</span> <span class="p">[</span><span class="nx">string</span><span class="p">,</span> <span class="nx">number</span><span class="p">];</span>

<span class="nx">myTuple</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span> <span class="c1">// 가능</span>

<span class="nx">myTuple</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"World"</span><span class="p">;</span> <span class="c1">// 가능</span>
<span class="nx">myTuple</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>     <span class="c1">// 가능</span>
<span class="nx">myTuple</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>    <span class="c1">// 불가능( 코드 에러 )</span>
</code></pre></div></div>

<p>3번째 칸에 string과 number는 assign이 되는것을 확인할 수 있습니다. 하지만 boolean은 들어가지 않는군요.</p>

<p>정리하자면 현재 사용할 수 있는 index를 넘어가는 곳에 데이터를 입력할 때는 Tuple선언에서 사용한 data type의
<code class="highlighter-rouge">union type</code>을 이용합니다. 쉽게 말하면 string 혹은 number가 되어야 한다는 말입니다.</p>

<hr />

<h2 id="enum">enum</h2>

<p><code class="highlighter-rouge">enum</code>을 이용할 수 있습니다. C#의 enum과 동일합니다. 
<strong>숫자 대신 친숙한 이름으로 설정</strong>하기 위해서 이용합니다.
다음의 코드를 이용해서 살펴보죠</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Color</span> <span class="p">{</span> <span class="nx">Red</span><span class="p">,</span> <span class="nx">Green</span><span class="p">,</span> <span class="nx">Blue</span> <span class="p">}</span>

<span class="kd">let</span> <span class="nx">myColor</span><span class="p">:</span> <span class="nx">Color</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Red</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myColor</span><span class="p">);</span>   <span class="c1">// 0 출력</span>
</code></pre></div></div>

<p>별다른 설명이 필요없습니다. 이번에는 다음의 코드를 보죠</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Color</span> <span class="p">{</span> <span class="nx">Red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">Green</span><span class="p">,</span> <span class="nx">Blue</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">}</span>

<span class="kd">let</span> <span class="nx">myColor</span><span class="p">:</span> <span class="nx">Color</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Green</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myColor</span><span class="p">);</span>   <span class="c1">// 2 출력</span>

<span class="nx">myColor</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Blue</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myColor</span><span class="p">);</span>   <span class="c1">// 4 출력</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">Color.Red</code>의 값을 1로 설정하면 그 다음 원소들은 당연히 1부터 1씩 증가합니다. <code class="highlighter-rouge">Color.Blue</code>는 4로 명시적으로 지정했네요.</p>

<p>아래의 예제는 좀 특이합니다. string 변수에 <code class="highlighter-rouge">enum</code>을 대입한 후 결과를 출력합니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">enum</span> <span class="nx">Color</span> <span class="p">{</span> <span class="nx">Red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">Green</span><span class="p">,</span> <span class="nx">Blue</span> <span class="p">}</span>

<span class="kd">let</span> <span class="nx">myColorStr</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Green</span><span class="p">;</span>  <span class="c1">// 코드 에러( 문자열에 숫자대입 안됨 )</span>

<span class="kd">let</span> <span class="nx">myColor</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>        <span class="c1">// 가능( 배열로 처리 - index에 주의 )</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myColor</span><span class="p">);</span>                  <span class="c1">// "Blue" 출력</span>
</code></pre></div></div>

<p>위의 코드에서</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myColorStr</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">.</span><span class="nx">Green</span><span class="p">;</span>
</code></pre></div></div>

<p>코드는 에러가 발생합니다. 문자열 type에 숫자를 넣으려 했기 때문이죠.
또한 enum은 배열형태로 사용이 가능한 데 이런 경우 해당 문자열을 바로 이용할 수 있습니다.</p>

<p>여기까지는 아마 우리가 알고있던 JavaScript와 거의 동일하니 이해하는데 어려움은 없을 듯 보입니다.
나머지 data type은 다음 포스트에서 이어가도록 하죠.</p>

<p>이 포스트의 내용은 <a href="http://www.typescriptlang.org" target="_blank">TypeScript official home page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(1) - Introduction</title>
	  <link>https://moon9342.github.io/typescript-introduction</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
	  <pubDate>2018-01-21T17:42:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-introduction</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
</ul>

<hr />

<p><strong>TypeScript 개요 및 WebStorm 개발환경 설정</strong></p>

<p><code class="highlighter-rouge">TypeScript</code>는 Microsoft에서 개발하여 2012년에 발표한 오픈 소스 프로그래밍 언어입니다. 
대규모 JavaScript application 개발을 목적으로 만들어졌습니다.</p>

<p>TypeScript의 특징은 다음과 같습니다.</p>

<ul>
  <li><strong>TypeScript는 JavaScript의 Superset입니다.</strong> TypeScript는 JavaScript의 모든 기능을 포함하고 
그 외 추가적인 기능들을 가지고 있습니다.</li>
  <li>TypeScript는 컴파일 언어이지만 컴파일 결과가 machine code가 아닌 JavaScript 코드가 나옵니다.
( 이런 프로그래밍을 <a href="./what-is-metaprogramming.html" target="_blank">메타프로그래밍</a> 이라고 하죠. ) 
그렇기 때문에 compile 대신에 transpile 이라고도 합니다.</li>
  <li>TypeScript는 compile 시점에 type checking이 일어나는 <strong>정적 타입 언어</strong>입니다.</li>
</ul>

<hr />

<p><strong>TypeScript 개발환경 설정</strong></p>

<p>여기서는 <code class="highlighter-rouge">Node.js</code>를 이용하여 <code class="highlighter-rouge">npm</code>(Node Package Manager)을 설치하고 이 npm을 이용해 TypeScript를 설치하고 
사용하는 방법에 대해서 알아보겠습니다.</p>

<p>먼저 <a href="https://nodejs.org/" target="_blank">Node.js</a>사이트에 접속해 LTS 버전이나 최신버전 둘 중 하나를 선택해
다운로드 합니다. (어떤것을 설치해도 상관없습니다.)
<img src="assets/built/images/nodejs-download.jpg" alt="nodejs download" /></p>

<p>저는 LTS 버전으로 다운로드 했습니다. 다운로드가 끝나면 기본 형태로 설치를 진행합니다. 설치가 끝나면
<code class="highlighter-rouge">C:/Program Files/nodejs</code> 폴더가 만들어지게 됩니다.</p>

<p>이제 command 창을 열어서 다음과 같이 명령어를 실행해봅니다.</p>

<blockquote>
  <p><strong>npm</strong></p>
</blockquote>

<p><img src="assets/built/images/nodejs-npm.png" alt="nodejs_npm" /></p>

<p><code class="highlighter-rouge">npm</code>(Node Package Manager)이 정상적으로 동작하면 이제 npm을 이용해 typescript를 설치할 수 있습니다.
설치는 local mode와 global mode로 설치가 가능합니다. 여기서는 편의상 global mode로 설치합니다.
(일반적으로는 local mode를 선호합니다.)</p>

<p>command 창에서 다음과 같이 명령어를 이용해 typescript를 <code class="highlighter-rouge">global</code>로 설치합니다.</p>

<blockquote>
  <p><strong>npm install -g typescript</strong></p>
</blockquote>

<p><img src="assets/built/images/nodejs-npm-typescript.png" alt="nodejs_npm_typescript" /></p>

<p><code class="highlighter-rouge">typescript 2.6.2</code>가 설치되었습니다.</p>

<blockquote>
  <p>global mode로 설치하면 windows 시스템을 기준으로 <code class="highlighter-rouge">$USER_HOME/AppData/Roaming/npm/node_modules</code>에 
설치됩니다.</p>
</blockquote>

<p>이제 사용할 <code class="highlighter-rouge">IDE</code>(Integrated Development Environment)를 설치합니다. 여기서는 <code class="highlighter-rouge">WebStorm</code>(유료)을 이용합니다.
<code class="highlighter-rouge">Visual Studio Code</code>(무료)를 사용하셔도 됩니다. WebStorm은 유료이지만 30일 trial을 사용할 수 있고 Student license로
1년간 무료로 사용할 수 도 있습니다.</p>

<p><a href="https://www.jetbrains.com/" target="_blank">JetBrains</a>사이트로 접속한 후 
<a href="https://www.jetbrains.com/webstorm" target="_blank">WebStorm</a>을 다운로드 받습니다.</p>

<p>다운로드가 완료되면 기본형태로 설치합니다. 설치가 끝나면 프로젝트를 생성할 수 있는 화면이 나오게 되는데 
폴더 하나를 생성해서 프로젝트를 생성합니다. (폴더명이 프로젝트명이됩니다.) 저는 <code class="highlighter-rouge">D:/TypeScriptTestApp</code> 폴더를 
생성하면서 프로젝트를 하나 만들었습니다.</p>

<p><img src="assets/built/images/webstorm-project-create.png" alt="webstorm-project-create" /></p>

<p>이제 WebStorm 설정을 해야 합니다.</p>

<blockquote>
  <p><strong>Files - Settings - Languages &amp; Frameworks - TypeScript</strong> 를 선택하면 아래와 같은 화면을 볼 수 있습니다.</p>
</blockquote>

<p>사실 WebStorm에 TypeScript가 bundle되어 들어있기 때문에 TypeScript를 따로 설치 안해도 됩니다. 
하지만 어떻게 설치하는지는 알아둘 필요는 있으니 한번 설치해 본거죠. 그리고 아래의 그림처럼 Compiler 옵션부분을
check합니다.</p>

<p><img src="assets/built/images/webstorm-project-configure.png" alt="webstorm-project-configure" /></p>

<p>컴파일을 할 때 <code class="highlighter-rouge">tsconfig.json</code>을 참조해 compile option을 설정한다고 해 놓았습니다. 우리는 아직 tsconfig.json
이 없으니 하나 생성해 줍니다. WebStorm의 하단에 있는 Terminal을 클릭해서 Terminal창을 열고 다음을 입력합니다.</p>

<blockquote>
  <p><strong>tsc --init</strong></p>
</blockquote>

<p><img src="assets/built/images/webstorm-project-tsconfig.png" alt="webstorm-project-tsconfig" /></p>

<p>프로젝트를 살펴보면 <code class="highlighter-rouge">tsconfig.json</code>이 생성되어 있는것을 볼 수 있고 안에 무언가가 많이 들어있는것을 확인할 수 있습니다.
compiler option에 대해서는 다른 포스트에서 알아보기로 하고 이제 간단한 ts 파일(typescript file)을 하나 생성합니다.
이름을 <code class="highlighter-rouge">hello.ts</code>라고 하죠.</p>

<p><img src="assets/built/images/webstorm-project-file-create.png" alt="webstorm-project-file-create" /></p>

<p>다음과 같은 코드를 입력합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Greeting</span> <span class="p">{</span>
    <span class="nl">greeting</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Hello "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Greeting</span><span class="p">(</span><span class="s2">"World!!"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tmp</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">());</span>
</code></pre></div></div>

<p>내가 알고있던 javascript가 아니라서 당황스럽지요? 별로 어렵지 않습니다. 객체지향 언어를 알고 이으면
더욱 더 쉽게 접근할 수 있습니다. 여하간 이렇게 코딩을 하고 저장하면 자동적으로 컴파일을 진행하고 그 결과
파일(.js)을 생성해 줍니다.</p>

<p><img src="assets/built/images/webstorm-project-generate-js.png" alt="webstorm-project-generate-js" /></p>

<p>마지막으로 coding convention을 지정할 수 있는 <code class="highlighter-rouge">tslint</code>를 설치하도록 하겠습니다. 반드시 설치해야하는건 아니지만
발생할 수 있는 오류를 미리 감지하고 coding convention을 맞추기 위해서 사용하는 것이 일반적입니다.</p>

<p>WebStorm에서 다시 터미널을 열고 다음과 같이 입력하여 tslint를 설치합니다. 역시 global mode로 설치합니다.</p>

<blockquote>
  <p><strong>npm install -g tslint</strong></p>
</blockquote>

<p><img src="assets/built/images/webstorm-project-tslint.png" alt="webstorm-project-tslint" /></p>

<p>그리고 다시 설정으로 들어갑니다.</p>

<blockquote>
  <p><strong>Files - Settings - Languages &amp; Frameworks - TypeScript - TSLint</strong> 를 선택하면 아래와 같은 화면을 볼 수 있습니다.</p>
</blockquote>

<p>Enable를 check합니다. <code class="highlighter-rouge">tslint.json</code>을 찾아서 Cofiguration file로 이용한다는 군요.</p>

<p><img src="assets/built/images/webstorm-project-tslint-configure.png" alt="webstorm-project-tslint-configure" /></p>

<p><code class="highlighter-rouge">tslint.json</code> 파일이 있어야 하니 Terminal을 열어서 다음과 같이 입력해서 tslint.json도 생성해 줍니다.</p>

<blockquote>
  <p><strong>tslint --init</strong></p>
</blockquote>

<p><img src="assets/built/images/webstorm-project-tslint-json.png" alt="webstorm-project-tslint-json" /></p>

<p>이제 우리가 작성한 <code class="highlighter-rouge">hello.ts</code> 파일을 다시 열어보면 여러가지 알수없는(?) 빨간색들이 산재해 있는것을 보실 수 있습니다.
에러는 아니지만 <code class="highlighter-rouge">tslint</code>에 의해서 coding convention에 위배되는 것들입니다.</p>

<p>적절하게 수정해야 합니다. 설정해야 하는 것이들 많이 있지만 연습삼아 한가지만 설정하겠습니다. 
console에 대한 tslint 오류를 없애보도록 하죠.</p>

<p>수정한 <code class="highlighter-rouge">tslint.json</code>파일은 다음과 같습니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="s2">"defaultSeverity"</span><span class="p">:</span><span class="w"> </span><span class="s2">"error"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"extends"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"tslint:recommended"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="s2">"jsRules"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
    </span><span class="s2">"rules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"no-console"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"rulesDirectory"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>오류를 수정한 최종 <code class="highlighter-rouge">hello.ts</code>파일은 다음과 같습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Greeting</span> <span class="p">{</span>
    <span class="kr">private</span> <span class="nx">greeting</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kr">public</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Hello "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Greeting</span><span class="p">(</span><span class="s2">"World!!"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tmp</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">());</span>
</code></pre></div></div>

<p>여기까지해서 TypeScript를 학습하기 위한 기본적인 환경설정을 잡으시면 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">tslint</code>는 실 개발시에는 필요하지만 처음 TypeScript를 공부할 때는 끄고 하시는게 정신건강에 이로울 수 있습니다.
사실 쓸데없는 <code class="highlighter-rouge">coding convention</code>도 많거든요.</p>
</blockquote>

	  ]]></description>
	</item>

	<item>
	  <title>JavaScript History</title>
	  <link>https://moon9342.github.io/javascript-history</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-14T15:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-history</guid>
	  <description><![CDATA[
	     <p><strong>JavaScript</strong>, <strong>ECMAScript</strong>, <strong>TypeScript</strong></p>

<p>아마도 <code class="highlighter-rouge">JavaScript</code>, <code class="highlighter-rouge">ECMAScript</code>, <code class="highlighter-rouge">TypeScript</code>라는 용어를 많이 들어봤을 텐데 정확하게 어떤 차이가 있는지
간단하게 정리를 해 보겠습니다.</p>

<p>과거부터 Web 작업을 해 오신 분들은 아시겠지만 JavaScript의 과거 인식은 “알면 좋고 몰라도 상관없는 딱 그 수준의 언어” 
였습니다. 하지만 개발 방법론이 진화하면서 JavaScript기반의 Library나 Framework의 필요성이 증대되고 그에 따라
JavaScript라는 언어의 위상도 상당히 올라갔습니다. (사실은 <code class="highlighter-rouge">HTML5</code>와 <code class="highlighter-rouge">Node.js</code>의 역할이 지대했지요.)</p>

<p>JavaScript라는 언어의 전신은 1995년 Netscape사에서 Brendan Eich가 <code class="highlighter-rouge">Mocha</code>라는 이름으로 만들어낸 스크립트 
언어입니다. 개발을 완료하고 후에 <code class="highlighter-rouge">LiveScript</code>라는 이름으로 세상에 공개되었습니다. 그런데 이 시점에 Netscape사가 Java를 
개발한 Sun Microsystems사와 협업하면서 Java applet이 큰 인기를 끌게 되었는데 이를 상업적으로 이용하고자 
이름을 LiveScript에서 <code class="highlighter-rouge">JavaScript</code>로 변경하게 된 것입니다.</p>

<blockquote>
  <p><strong>이름의 변경 순서가 <code class="highlighter-rouge">Mocha</code> -&gt; <code class="highlighter-rouge">LiveScript</code> -&gt; <code class="highlighter-rouge">JavaScript</code> 가 되는군요.</strong></p>
</blockquote>

<p>MS(마이크로소프트)에서는 이에 대응하기 위해 <code class="highlighter-rouge">JScript</code>를 만들고 IE 3부터 JScript를 포함시켜서 제공했지요. 당연한 말이지만
JavaScript와 JScript는 서로 비슷하지만 특징이 다릅니다. 그로인해 우리가 잘 알고있는 JavaScript의 고질적인 문제인 파편화현상이
발생하게 됩니다.</p>

<p>여하간 Netscape사는 이 JavaScript의 표준을 잡기 위해 <code class="highlighter-rouge">ECMA</code>(정보 통신기술 표준화 기구)에 표준화 작업을 요청합니다. 당연히
JavaScript라는 이름을 사용하려고 했지만 Sun과의 license 문제 때문에 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화가 진행되게 됩니다.</p>

<p>이렇게만 놓고 보면 JavaScript와 ECMAScript가 비슷한 의미로 사용되는 것처럼 보이는데 사실 작은 차이가 있습니다.</p>

<p><strong>우리가 흔희 말하는 JavaScript는 1개의 Core와 2개의 Module로 구성되어 있습니다.</strong> <br />
여기서 1개의 Core는 JavaScript를 구성하고 있는 <code class="highlighter-rouge">Script language(ECMAScript)</code>입니다. <br />
2개의 Module은 <code class="highlighter-rouge">BOM(Browser Object Model)</code>, <code class="highlighter-rouge">DOM(Document Object Model)</code>을 지칭합니다.</p>

<p>달리 말하자면 ECMAScript는 JavaScript를 구성하는 Core Script언어로 웹 환경에서만 사용되는 언어가 아닙니다. 웹 환경은 
ECMAScript가 host되는 환경 중 하나일 뿐입니다.</p>

<blockquote>
  <p><strong><code class="highlighter-rouge">JavaScript</code> = <code class="highlighter-rouge">ECMAScript</code> + <code class="highlighter-rouge">BOM</code> + <code class="highlighter-rouge">DOM</code></strong></p>
</blockquote>

<p>현재 ECMAScript version은 7까지 나와있습니다. 정확한 의미의 차이는 분명히 있지만 그냥 저냥 대충 통용해서 사용합니다.<br />
그러면 TypeScript는 또 어떤걸까요? 요즘에 왜 TypeScript가 대세로 떠오른 걸까요?</p>

<p><code class="highlighter-rouge">TypeScript</code>는 Microsoft에서 개발하여 2012년에 발표한 오픈 소스 프로그래밍 언어입니다. 
JavaScript로 대규모 application개발을 하기 위해 개발되었고 컴파일 과정을 거치면 JavaScript가 되는 언어입니다.
CoffeeScript 처럼 compile하면 JavaScript가 생성되는 변환 언어의 한 종류라 볼 수 있습니다. 
그냥 JavaScript로 개발하면 되지 굳이 이런 변환언어를 사용하는 이유는 무엇일까요? ( 이런 프로그래밍을 
<a href="./what-is-metaprogramming.html" target="_blank">메타프로그래밍</a> 이라고 합니다. )</p>

<p><strong>가장 큰 이유는 기능의 추가에 있습니다.</strong><br />
변환언어의 가장 큰 장점은 기능을 쉽게 추가할 수 있다는 것인데 추상 클래스, 인터페이스, 정적 데이터타입 사용, 
엄격한 타입 체크등을 JavaScript에 추가하여 개발을 쉽게 끌고 갈 수 있습니다.<br />
즉, 전통적인 OOP방식으로 개발을 진행할 수 있다는 것이 큰 장점으로 꼽을 수 있습니다.</p>

<blockquote>
  <p><strong>기존 객체지향 언어(Java,C++,C#)를 알고 있고 JavaScript를 알고 있으면 TypeScript를 아주 쉽게
배울 수 있습니다.</strong></p>
</blockquote>

<p>TypeScript는 다른 변환언어와는 다르게 <strong>JavaScript의 superset</strong>입니다. 그렇기 때문에 이미 JavaScript를 알고 있으면
쉽게 TypeScript를 사용할 수 있으며 ES6(ECMAScript 2015)에서 제공되는 기능 중 필요한 것만 골라서 이용할 수 있습니다. 
아래의 그림은 TypeScript와 ECMAScript간의 포함관계를 보여줍니다.</p>

<p><img src="assets/built/images/es5-es6-typescript-circle-diagram.png" alt="Image" /></p>

<p>2017년 3월부로 TypeScript는 Google의 공식언어 중 하나로 채택되었습니다. MS에서 개발한 언어를 Google이
표준언어로 채택하다니 놀랍습니다. 그만큼 TypeScript가 좋다는 의미겠지요.</p>

<p>기존 Google의 사내 표준언어 (Canonical Language)는 C, C++, Java, JavaScript, Python, Go 정도였는데 
Google은 이 중 JavaScript를 이용하여 AngularJS(1.x)를 개발해왔었습니다.</p>

<p>하지만 AngualrJS(1.x)의 차기버전인 Angular(2.x)를 개발하면서 JavaScript의 기능상의 한계를 느끼게 되고
결국 2014년에 Google에서 발표한 <code class="highlighter-rouge">AtScript</code>를 사용하게 됩니다.</p>

<p>하지만 최종적으로는 TypeScript가 Angular의 표준언어 중 하나로 채택이 됩니다. 기존의 AtScript로 작성했던 Angular 2를
몽땅 TypeScript로 전환했습니다. 그러면서 기존 Google에서 JavaScript의 
대체 언어로 밀고있었던 <code class="highlighter-rouge">Dart</code>의 위상 역시 살짝 하락한 상태입니다. (물론 Google은 아니라고 하지만요. )</p>

<blockquote>
  <p><code class="highlighter-rouge">Angular</code>는 공식적으로 3개의 언어를 지원합니다. (TypeScript, JavaScript, Dart)   <br />
그런데 공식문서에서나 커뮤니티활동에서 가장 많이 사용되는것은 <code class="highlighter-rouge">TypeScript</code>입니다. 
결국 Angular는 꼭 해야할 것 중 하나이니 TypeScript도 그냥 해야지요..머..</p>
</blockquote>

	  ]]></description>
	</item>


</channel>
</rss>
