<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>Development & Technical Training</description>
   <language>en-uk</language>
   
   <title>
   <![CDATA[ IT Blog ]]>
   </title>
   <description>
   <![CDATA[ Development & Technical Training ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>IT Blog</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Angular 강좌(5) - 실습(1)</title>
	  <link>https://moon9342.github.io/angular-lecture-exercise-1</link>
		
				
		
				
		
				
		
				
		
				
						<author>Angular</author>
				
		
	  <pubDate>2018-02-01T16:42:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/angular-lecture-exercise-1</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction.html">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment.html">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component.html">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material.html">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1.html">Angular 강좌(5) - 실습(1)</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> AppComponent 수정</strong></p>

<p>이전에 만들어 놓은 bookSearch-angular project를 수정하여 도서검색 application화면을 만들고
그에 따른 Component들을 생성, 등록까지 진행하도록 하겠습니다.</p>

<p><code class="highlighter-rouge">src/app</code> 폴더안에 <code class="highlighter-rouge">app.component.ts</code> 파일을 열면 다음과 같은 내용을 보실 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-root'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./app.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./app.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="p">{</span>
  <span class="nx">title</span> <span class="o">=</span> <span class="s1">'app'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>여기서 <code class="highlighter-rouge">selector: 'app-root'</code> 부분을 보면 이 Component가 <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code>로 되어 있는 부분을 찾아 
rendering 한다는 것을 알 수 있습니다.  또한 <code class="highlighter-rouge">templateUrl</code>에 의해 <code class="highlighter-rouge">app.component.html</code>을 이용해 rendering한다는 것도
파악할 수 있겠네요.</p>

<p><code class="highlighter-rouge">index.html</code>을 보시면 다음과 같이 <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code>로 되어있는 부분이 보이고 이 부분이 우리 Component에 의해서
rendering되게 됩니다.</p>

<p>결국 <code class="highlighter-rouge">index.html</code>안의 <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code> 부분은 <code class="highlighter-rouge">app.component.html</code>의 내용으로 rendering되는 것을 파악할 수 있습니다.</p>

<p>이제 기존의 <code class="highlighter-rouge">app.component.html</code>의 내용을 수정해서 화면을 다시 구성합니다. View를 추가하기 위해 Component를 생성하는
작업을 진행해야 합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Component 추가</strong></p>

<p>화면을 3개의 영역으로 나눌려고 합니다.</p>

<ul>
  <li>첫번째 영역은 검색 키워드를 입력하고 검색 버튼을 눌러 검색을 실행시키는 View 영역입니다.</li>
  <li>두번째 영역은 검색된 책을 선택하면 책의 세부정보가 출력되는 View 영역입니다.</li>
  <li>세번째 영역은 검색된 책들의 리스트를 출력하기 위한 View 영역입니다.</li>
</ul>

<p>이렇게 3개의 View를 이용해서 화면을 구성할 것이고 3개의 Component를 추가하여 화면을 먼저 구성하려 합니다.</p>

<p>Angular CLI를 이용하여 다음과 같이 실행해서 새로운 Component를 추가합니다.</p>

<blockquote>
  <p><strong>ng generate component search-box</strong></p>
</blockquote>

<p><img src="assets/built/images/angular-cli-create-component.png" alt="angular-cli-create-component" /></p>

<p>Angular CLI의 <code class="highlighter-rouge">generate</code>를 이용하여 Component 생성 시 Component를 구성하는 관련 파일들을 자동으로 손쉽게 생성할 수 있습니다. 
generate를 다 쓰지 않고 앞글자인 <code class="highlighter-rouge">g</code> 만 써도 됩니다. generate는 뒤에 어떤 요소를 생성할 것인지 그리고 요소명은
무엇인지를 받아 특정 요소를 생성하게 됩니다. 즉, Component만 생성할 수 있는건 아닙니다.</p>

<p>Angular CLI의 generate로 Component를 생성하면 해당 명령의 실행 위치가 어딘지 상관없이 기본적으로 <code class="highlighter-rouge">src/app</code> 하단에
폴더가 만들어지고 그 안에 Component관련 파일이 들어가게 됩니다. 다음 그림과 같이 폴더와 파일이 생성되게 됩니다.</p>

<p><img src="assets/built/images/angular-cli-create-component-ide.png" alt="angular-cli-create-component-ide" /></p>

<p>생성된 <code class="highlighter-rouge">src/app/search-box</code> 폴더 안에 있는 <code class="highlighter-rouge">search-box.component.ts</code> 파일을 열어서 <code class="highlighter-rouge">selector</code>를 확인해보니 
<code class="highlighter-rouge">app-search-box</code>로 지정되어 있습니다. 이 Component는 해당 <code class="highlighter-rouge">&lt;app-search-box&gt;&lt;/app-search-box&gt;</code>를 찾아 rendering을 
하게 되겠네요.</p>

<p>이와 유사하게 2개의 Component를 더 생성합니다. 다음과 같이 실행해서 새로운 Component를 추가합니다.</p>

<blockquote>
  <p><strong>ng generate component detail-box</strong></p>
</blockquote>

<blockquote>
  <p><strong>ng generate component list-box</strong></p>
</blockquote>

<p>자 이제 생성된 각각의 Component에 대한 selector를 참조해 <code class="highlighter-rouge">src/app</code> 안의 <code class="highlighter-rouge">app.component.html</code>의 내용을 다음과 같이
수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"text-align:center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;app-search-box&gt;&lt;/app-search-box&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"text-align:center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;app-detail-box&gt;&lt;/app-detail-box&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"text-align:center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;app-list-box&gt;&lt;/app-list-box&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 각 Component의 View 작성</strong></p>

<p>이제 각각의 Component의 <code class="highlighter-rouge">templateUrl</code>에 명시된 html을 Angular Material을 이용해 우리가
사용할 화면을 만들어 냅니다.</p>

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(4) - Angular Material</title>
	  <link>https://moon9342.github.io/angular-lecture-material</link>
		
				
		
				
		
				
		
				
		
				
						<author>Angular</author>
				
		
	  <pubDate>2018-02-01T14:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/angular-lecture-material</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction.html">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment.html">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component.html">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material.html">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1.html">Angular 강좌(5) - 실습(1)</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular Material</strong></p>

<p><code class="highlighter-rouge">Material Design</code>은 모바일과 데스크탑 그리고 그 외 다양한 디바이스들의 application을 개발할 때 
하나의 일관된 디자인을 적용하고자 Google이 공개한 <code class="highlighter-rouge">Design guideline</code>입니다.</p>

<blockquote>
  <p>머티리얼 디자인(Material Design, 코드명: Quantum Paper)이란 플랫 디자인의 장점을 살리면서도 
빛에 따른 종이의 그림자 효과를 이용하여 입체감을 살리는 디자인 방식을 말한다. 
2014년 구글이 안드로이드 스마트폰에 적용하면서 널리 퍼지기 시작했다. 플랫 디자인과 마찬가지로 최소한의 요소만을 
사용하여 대상의 본질을 표현하는 디자인 기법인 미니멀리즘(minimalism)을 추구한다.
<br />( 자료출처 : https://ko.wikipedia.org )</p>
</blockquote>

<p>제가 Design에 대한 관심과 지식이 많지 않아서 Material Design에 대한 정의는 위키에서 가져왔습니다.</p>

<p>여하간 이런 Material Design에 대한 concept을 Angular application에 적용하기 위해 만든 Component가 바로 
<code class="highlighter-rouge">Angular Material</code>입니다.</p>

<p>우리의 예제는 이 Angular Material로 작성할 것이기 때문에 Angular Material을 어떻게 설치,설정하고 사용하는지에 대해서 
먼저 알아볼 필요가 있습니다.</p>

<p>그럼 천천히 살펴보도록 하죠.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular Material &amp; Angular CDK 설치</strong></p>

<p>제일 먼저 해야 할 일은 Angular Material과 Angular CDK를 설치하는 것입니다.</p>

<p>우리가 만들어 놓은 bookSearch-angular project에서 command 창을 열고 다음 명령을 수행시켜 package를 설치합니다. 
( 현재 경로는 <code class="highlighter-rouge">D:/bookSearch-angular</code> 입니다. )</p>

<blockquote>
  <p><strong>npm install --save @angular/material @angular/cdk</strong></p>
</blockquote>

<p><img src="assets/built/images/angular-material-install.png" alt="angular-material-install" /></p>

<p>저 위에 <code class="highlighter-rouge">--save</code> option은 npm@5부터 기본 option으로 바뀌었습니다. 즉, --save는 생략하셔도 됩니다. 잘 아시겠지만 
저 명령을 수행하면 <code class="highlighter-rouge">package.json</code>의 <code class="highlighter-rouge">dependencies</code>에 설치된 패키지와 버전 정보가 기록되게 됩니다.
참고로 만약 개발 시에만 사용하는 package를 설치하실려면 --save-dev option을 주시면 됩니다. TypeScript와 같은것은
사실 transpiler이기 때문에 개발시에만 필요하고 실제 배포까지 할 필요는 없으니 TypeScript같은 건 --save-dev로
<code class="highlighter-rouge">devDependencies</code>에 포함시키는게 좋습니다. 그런데 우리는 그냥 전역으로 설치해서 쓰고 있죠 ^^;;</p>

<p>여하간 약간의 시간이 지나면 package가 설치됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular Animation Module 설치</strong></p>

<p>몇몇개의 Material Component는 Angular Animation Module에 의존성을 가지고 있습니다. 
따라서 다음 명령을 수행시켜 Angular Animation Module을 설치해야 합니다.</p>

<blockquote>
  <p><strong>npm install --save @angular/animations</strong></p>
</blockquote>

<p>이 <code class="highlighter-rouge">@angular/animations</code> module은 내부적으로 <code class="highlighter-rouge">WebAnimation API</code>을 이용합니다. 그런데 모든 browser들이 
이 API를 지원하는건 아닙니다. 만약 WebAnimation API를 지원하지 않는 browser를 이용할 경우는 
<a href="https://github.com/web-animations/web-animations-js" target="_blank">여기</a>를
클릭해서 나온 내용에 따라 따로 처리해 주셔야 합니다.</p>

<p>이제 우리 project에서 <code class="highlighter-rouge">src/app</code> 폴더 안에 있는 Root Module인 <code class="highlighter-rouge">app.module.ts</code> 파일을 열어 다음과 같이 수정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="c1">// BrowserAnimationsModule import 구문 추가</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">BrowserAnimationsModule</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser/animations'</span><span class="p">;</span>


<span class="k">import</span> <span class="p">{</span> <span class="nx">AppComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./app.component'</span><span class="p">;</span>


<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">AppComponent</span>
  <span class="p">],</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span><span class="p">,</span>
    <span class="nx">BrowserAnimationsModule</span>  <span class="c1">// BrowserAnimationsModule 추가</span>
  <span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 사용할 Component import</strong></p>

<p>설치가 다 되었으니 이제 사용할 Angular Material Component를 코드에 import해야 합니다.
여기서 사용할 것은 <code class="highlighter-rouge">Expansion Panel</code>과 <code class="highlighter-rouge">Table</code> Component입니다.</p>

<p>우리 project에서 <code class="highlighter-rouge">src/app</code> 폴더 안에 있는 Root Module인 <code class="highlighter-rouge">app.module.ts</code> 파일을 열어 다음과 같이 수정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="c1">// BrowserAnimationsModule import 구문 추가</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">BrowserAnimationsModule</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser/animations'</span><span class="p">;</span>

<span class="c1">// MatTableModule,MatExpansionModule  import 구문 추가</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">MatTableModule</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material/table'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">MatExpansionModule</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material/expansion'</span><span class="p">;</span>


<span class="k">import</span> <span class="p">{</span> <span class="nx">AppComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./app.component'</span><span class="p">;</span>


<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">AppComponent</span>
  <span class="p">],</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span><span class="p">,</span>
    <span class="nx">BrowserAnimationsModule</span><span class="p">,</span>  <span class="c1">// BrowserAnimationsModule 추가</span>
    <span class="nx">MatTableModule</span><span class="p">,</span>           <span class="c1">// MatTableModule</span>
    <span class="nx">MatExpansionModule</span>        <span class="c1">// MatExpansionModule</span>
  <span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 사용할 Theme 설정</strong></p>

<p>application에 적용할 Theme를 설정해 보도록 하죠. 기본적으로 제공되는 
built-in theme는 현재 4가지가 존재하는데 그 중 하나를 설정하시면 됩니다.</p>

<p>우리는 Angular CLI를 이용하고 있기 때문에 <code class="highlighter-rouge">src</code> 폴더 안에 있는 <code class="highlighter-rouge">style.css</code> 파일을
열어서 다음의 코드를 넣어주면 됩니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s2">'~@angular/material/prebuilt-themes/indigo-pink.css'</span><span class="p">;</span>
</code></pre></div></div>

<p>만약 다른 theme를 이용하고 싶으면 <a href="https://material.angular.io/guide/theming" target="_blank">여기</a>
를 참조해 다른 이름의 css를 이용하시면 됩니다.</p>

<p>그리고 Angular CLI를 이용하지 않고 application을 만드는 경우에는 <code class="highlighter-rouge">index.html</code>에 <code class="highlighter-rouge">&lt;link&gt;</code> Element를 이용하여
CSS를 참조시켜야  합니다. 이 부분 역시 <a href="https://material.angular.io/guide/theming" target="_blank">여기</a>를
클릭하시면 내용을 찾으실 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Gestures 지원을 위한 HammerJS 설치</strong></p>

<p>사용자 Gestures를 지원하기 위해 몇몇개의 Material Component들은 HammerJS에 의존하고 있습니다. 그렇게 
때문에 이 HammerJS 역시 설치하고 설정까지 잡아줘야 합니다.</p>

<blockquote>
  <p><strong>npm install --save hammerjs</strong></p>
</blockquote>

<p>설치가 끝나면 우리 application의 시작지점(entry point)인 <code class="highlighter-rouge">main.ts</code> 파일을 열어서 제일 상단에
다음과 같은 코드를 추가해 줘야 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hammerjs import 추가</span>
<span class="k">import</span> <span class="s1">'hammerjs'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">enableProdMode</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">platformBrowserDynamic</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser-dynamic'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">AppModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./app/app.module'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">environment</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./environments/environment'</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">environment</span><span class="p">.</span><span class="nx">production</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">enableProdMode</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">)</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Material Icon 사용을 위한 설정</strong></p>

<p>Material은 쉽게 사용할 수 있는 Icon을 제공해 줍니다. 
마치 <a href="./css-fontawesome-list.html" target="_blank">Font-Awesome</a>처럼 
사용할 수 있습니다. Material Icon을 사용하기 위해서는 <code class="highlighter-rouge">index.html</code>을 다음과 같이 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>BookSearchAngular<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/x-icon"</span> <span class="na">href=</span><span class="s">"favicon.ico"</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- Material Icon 설정 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://fonts.googleapis.com/icon?family=Material+Icons"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;app-root&gt;&lt;/app-root&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Material Icon의 사용방법에 대한 자세한 내용은 <a href="https://google.github.io/material-design-icons/" target="_blank">여기</a>
를 확인해 보시면 됩니다.</p>

<hr />

<p><code class="highlighter-rouge">Angular Material</code>을 사용하기 위한 설정이 끝났습니다. 
이제 <a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a>의 
Components 메뉴를 클릭해 사용할 Component의 종류와 사용방법을 찾아 적절하게 작성만 해 주면 될 듯 싶습니다. 다음 포스트에서
Angular Material을 이용해 화면구성과 Component 설정을 해 보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(3) - Component</title>
	  <link>https://moon9342.github.io/angular-lecture-component</link>
		
				
		
				
		
				
		
				
		
				
						<author>Angular</author>
				
		
	  <pubDate>2018-01-31T17:10:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/angular-lecture-component</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction.html">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment.html">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component.html">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material.html">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1.html">Angular 강좌(5) - 실습(1)</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Component 개요</strong></p>

<p><code class="highlighter-rouge">Angular</code>는 front end web application framework입니다.</p>

<p>우리는 Angular로 Web Browser상에서 동작하는 Client가 사용하는 응용 프로그램을 만들어 낼 수 있고 이런 프로그램은 
사용자가 직접 접근할 수 있는 <code class="highlighter-rouge">View</code>라는 것을 가지고 동작합니다.</p>

<p>전체 웹 어플리케이션 화면이 하나의 View가 될 수도 있고 어플리케이션 화면의 기능이나 목적에 따라 
세부 View들로 분할 되어 웹 어플리케이션의 화면을 구성할 수 도 있습니다.</p>

<p>예를 들면 다음과 같이 View를 분할해서 화면을 구성할 수 있습니다.</p>

<p><img src="assets/built/images/view-layout.png" alt="view layout" /></p>
<div class="img-reference">( 이미지 출처 : https://msdn.microsoft.com/ko-kr/library/jj553856(v=vs.85).aspx )</div>

<p>위의 그림에서 A는 로고영역, B는 사진에 대한 설명영역, C는 주 사진보기 영역, D는 컬렉션에 있는 다른 사진의 미리보기
영역입니다.</p>

<p>이렇듯 우리는 화면을 여러 View들로 분할해서 구성할 수 있다는 것이죠.</p>

<p>분할된 View들은 결국 Angular에서 <code class="highlighter-rouge">Component</code>의 단위가 됩니다. 실제로 Component는 View를 rendering하는 주체가 되기 때문에
어떤 정보로 View를 rendering할 것인가에 대한 정보를 가지고 있어야 합니다. 이 정보를 우리는 <code class="highlighter-rouge">Template</code>이라는 것으로 표현합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Template</strong></p>

<p><code class="highlighter-rouge">Template</code>은 View를 rendering하기 위해 필요한 HTML Element와 Angular의 문법요소 그리고 클라이언트 이벤트 처리 코드를 
담고 있습니다.</p>

<blockquote>
  <p>Application 실행 시 Angular는 Component와 Template의 정보를 이용하여 View를 그리게 됩니다.</p>
</blockquote>

<p><img src="assets/built/images/angular-template.png" alt="angular template" /></p>
<div class="img-reference">( 이미지 출처 : https://angular.io/guide/architecture )</div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Component - class</strong></p>

<p>기존에 만들어 놓았던 bookSearch-angular app을 살펴보면서 코드상으로 Component를 이해해보죠. WebStorm에서 우리가
작성한 프로젝트를 보면 <code class="highlighter-rouge">src</code> 폴더가 보입니다. 이 <code class="highlighter-rouge">src</code>폴더를 보면 <code class="highlighter-rouge">index.html</code> 파일이 존재하는데 이 파일이 우리 app의
시작파일이라고 생각하시면 됩니다. 즉, http://localhost:4200 으로 접속하면 rendering되는 파일이 바로 이 <code class="highlighter-rouge">index.html</code>입니다.</p>

<p>아래의 내용은 <code class="highlighter-rouge">index.html</code> 입니다.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>BookSearchAngular<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/x-icon"</span> <span class="na">href=</span><span class="s">"favicon.ico"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;app-root&gt;&lt;/app-root&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code>라는 태그 대신에 특정 내용이 화면에 보이는 구조이군요. 즉, <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code>이 하나의 
View라는 의미입니다. 당연히 그에 대응되는 Component가 존재하겠네요.</p>

<p><code class="highlighter-rouge">src/app</code> 폴더에 보면 <code class="highlighter-rouge">app.component.ts</code> 파일이 있습니다. Component를 정의한 파일이고 TypeScript로 작성되어 있기 때문에
확장자는 <code class="highlighter-rouge">.ts</code>를 이용합니다. 파일을 열어보면 다음과 같은 내용이 들어있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-root'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./app.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./app.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="p">{</span>
  <span class="nx">title</span> <span class="o">=</span> <span class="s1">'app'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>코드에서 맨 마지막에 나타나듯이 Component는 <code class="highlighter-rouge">class</code>입니다. 하지만 무조건 class를 선언한다고 해서
해당 class가 Component가 되는것은 아닙니다. 이 class가 Component로 사용된다는 것을 Angular에게
알려주어야 Angular가 Component로 동작을 시킬수 있을 겁니다. 그래서 특정 표현을 이용해 
해당 class가 Component임을 Angular에게 알려주어야 합니다.</p>

<p><code class="highlighter-rouge">@Component</code>라고 표현되는 부분이 바로 <code class="highlighter-rouge">Component Decorator</code>입니다. 무언가와 많이 비슷하죠? <code class="highlighter-rouge">Java</code>의
Annotation 생각하시면 됩니다. class상단에 Component Decorator를 이용해 Angular가 해당 class를 Component로
인지할 수 있도록 합니다.</p>

<p><code class="highlighter-rouge">@Component</code>를 이용하려면 당연히 Component Decorator를 사용할 수 있는 상태여야 하고 이 Component Decorator는
<code class="highlighter-rouge">@angular/core</code>라고 표현되는 Angluar Core package에서 제공합니다. 해서 아래와 같은 코드가 필요합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
</code></pre></div></div>
<p>위의 코드는 Component Decorator를 사용하기 위해 import 한 것입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Component - Metadata</strong></p>

<p>위에서 Component Decorator에 대해서 알아봤는데 이 Component Decorator를 이용해 설정 정보를 Angular Framework에게
전달할 수 있습니다. 이를 <code class="highlighter-rouge">Metadata</code>라고 하며 다음과 같은 코드로 표현됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-root'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./app.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./app.component.css'</span><span class="p">]</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Component Decorator안에 표현될 수 있는 metadata는 사실 상당히 종류가 많지만 필수요소는 없습니다. 하지만 <code class="highlighter-rouge">select</code>와 
<code class="highlighter-rouge">template 정보</code>는 존재하지 않으면 화면에 표현이 되지 않기 때문에 거의 필수요소라 볼 수 있습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">select</code> : template 코드안에서 해당 Component를 이용할 때 사용할 HTML Element명을 정의합니다. 위와 같은 경우 
작성된 Component는 <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code> HTML Element로 사용할 수 있습니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">template 정보</code> :  <code class="highlighter-rouge">template</code> 혹은 <code class="highlighter-rouge">templateUrl</code>을 이용할 수 있습니다. <code class="highlighter-rouge">template</code>은 View를 rendering할 때 필요한
HTML을 inline형태로 직접 기술할 수 있습니다. <code class="highlighter-rouge">templateUrl</code>은 template code를 따로 HTML 파일로 분리할 때 사용합니다.</p>
  </li>
</ul>

<p>위의 예제에서는 사용할 css파일에 대한 <code class="highlighter-rouge">styleUrls</code>도 같이 지정해 놓았습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Module &amp; Bootstrapping</strong></p>

<p><code class="highlighter-rouge">Bootstrapping</code>이란 browser에서 application이 최초로 실행될 때 진행되는 과정을 의미합니다. 우리가 작성한 Component는
application이 bootstrapping될 때 Angular에 의해서 제어되게 됩니다.</p>

<p>Angular에는 <code class="highlighter-rouge">Module</code> 개념이 있습니다. Module은 Application을 구성하는 단위로 관련된 요소를 하나로 묶어 놓은 것으로 생각하시면
됩니다. Angular는 Module단위로 application 코드를 인식하기 때문에 모든 Angular application은 반드시 하나 이상의 Module을 
가지게 되며 최상위 모듈을 우리는 <code class="highlighter-rouge">Root Module</code>이라고 부릅니다.</p>

<blockquote>
  <p><strong>이러한 Module안에 Component와 같은 것들을 선언해 놓아야 비로소 사용할 수 있게 됩니다.</strong></p>
</blockquote>

<p><code class="highlighter-rouge">Root Module</code>은 관례상 <code class="highlighter-rouge">AppModule</code>이라 명하고 class로 표현하게 됩니다. <code class="highlighter-rouge">src/app</code> 폴더안에 <code class="highlighter-rouge">app.module.ts</code> 파일이 존재하는데
이 파일안에 Root Module이 정의되어 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NgModule</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>


<span class="k">import</span> <span class="p">{</span> <span class="nx">AppComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./app.component'</span><span class="p">;</span>


<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">AppComponent</span>
  <span class="p">],</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span>
  <span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>Angular CLI로 생성한 우리 project의 <code class="highlighter-rouge">app.module.ts</code> 파일 내용입니다. 보시는 것처럼 <code class="highlighter-rouge">AppModule</code> class가 정의되어 있고
상단에 <code class="highlighter-rouge">@NgModule</code> Decorator를 이용하여 우리의 class가 Module임을 명시했습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AppComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./app.component'</span><span class="p">;</span>
</code></pre></div></div>
<p>위의 코드는 아까 살펴본 Component인 <code class="highlighter-rouge">app.component.ts</code> 파일로부터 AppComponent class를 import하는 부분입니다. 
이렇게 import한 class를 Module안에서 <code class="highlighter-rouge">declarations</code>를 이용해 선언해서 사용하게 됩니다.</p>

<p><code class="highlighter-rouge">@NgModule</code> Decorator의 metadata 중 <code class="highlighter-rouge">bootstrap</code>은 application이 bootstrapping할 때 어떤 Component를 사용할 것인지를
배열로 선언합니다. 즉, <code class="highlighter-rouge">bootstrap</code>은 browser가 최초로 index.html을 읽어들여 application을 시작할 때 사용할 
Component를 명시하게 됩니다.</p>

<p>이렇게 <code class="highlighter-rouge">@NgModule</code> Decorator의 metadata에 Component를 등록하는 이유는 Angular가 application 실행 시 <code class="highlighter-rouge">.ts</code>로 작성한 
우리 코드를 <code class="highlighter-rouge">JavaScript</code> 코드로 compile할 때 필요하기 때문입니다.</p>

<p>마지막으로 <code class="highlighter-rouge">src/main.ts</code> 파일을 열어보면 다음과 같은 코드를 볼 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">platformBrowserDynamic</span><span class="p">().</span><span class="nx">bootstrapModule</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">)</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<p>Angular는 저 위의 코드로 <code class="highlighter-rouge">AppModule</code>을 읽어들이고 Module안에 등록된 여러 Component들을 <code class="highlighter-rouge">JavaScript</code> 코드로 compile하게
되는 것 입니다.</p>

<blockquote>
  <p>지금까지 살펴본 것처럼 만약 Angular CLI를 이용하지 않으면 우리가 직접 <code class="highlighter-rouge">.ts</code> 파일을 만들어서 등록하는 과정을 직접해야
합니다. Angular CLI를 이용하면 기본 Skeleton 코드의 생성과 등록절차까지 자동으로 처리되게 됩니다.</p>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Component Tree</strong></p>

<p>위의 설명을 좀 정리해 보면 Angular application안에는 여러 View들이 존재할 수 있습니다. 따로 설명은 안했지만 하나의 
View안에 여러개의 View들이 child형태로 존재할 수 도 있겠지요. View는 Component와 대응된다고 했으니 결국 Component안에
Component가 child형태로 구성될 수 있다는 의미겠네요.  이것을 우리는 <code class="highlighter-rouge">Component Tree</code>라고 합니다.</p>

<p>그림으로 표현하자면 다음과 같이 표현될 수 있습니다.</p>

<p><img src="assets/built/images/component-tree.png" alt="view layout" /></p>
<div class="img-reference">( 이미지 출처 : https://angular.io/guide/architecture )</div>

<p>좀 어렵게 표현하자면 application의 화면구성을 끝내면 그 내용을 토대로 View를 결정해서 Component단위로 Modeling 해야
합니다.</p>

<hr />

<p>이번 포스트에서는 Component에 대해서 알아보았습니다. 여기까지의 내용을 가지고 간단한 실습을 진행하고 그 다음 내용으로
넘어가야 될 듯 보입니다. 실습을 진행하기에 앞서 <code class="highlighter-rouge">Angular Material</code>에 대해 먼저 알아보고 Material을 이용하여 
도서 검색 application에 맞게 화면을 분할 하고 Component를 생성하는 실습을 진행하도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(2) - 개발환경세팅</title>
	  <link>https://moon9342.github.io/angular-lecture-development-environment</link>
		
				
		
				
		
				
		
				
		
				
						<author>Angular</author>
				
		
	  <pubDate>2018-01-31T14:11:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/angular-lecture-development-environment</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction.html">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment.html">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component.html">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material.html">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1.html">Angular 강좌(5) - 실습(1)</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular 개발환경 - Node.js, WebStorm, TypeScript</strong></p>

<p>이번 포스트에서는 <code class="highlighter-rouge">Angualr</code>의 개발환경을 세팅하고 <code class="highlighter-rouge">Angular CLI</code>를 이용하여 기본적인 Hello World App을 
생성, 실행하는 것까지 진행하도록 하겠습니다.</p>

<p>제일 먼저 해야 할 일은 Node.js를 설치하는 것입니다. Angular CLI와 TypeScript가 node module로 존재하기 때문에
<code class="highlighter-rouge">npm</code>을 이용하여 이 두가지를 설치해야 합니다.</p>

<p>먼저 <a href="https://nodejs.org/" target="_blank">Node.js</a>사이트에 접속해 LTS 버전이나 최신버전 둘 중 하나를 선택해
다운로드 합니다. (어떤것을 설치해도 상관없습니다.)
<img src="assets/built/images/nodejs-download.jpg" alt="nodejs download" /></p>

<p>저는 LTS 버전으로 다운로드 했습니다. 다운로드가 끝나면 기본 형태로 설치를 진행합니다. 설치가 끝나면
<code class="highlighter-rouge">C:/Program Files/nodejs</code> 폴더가 만들어지게 됩니다.</p>

<p>이제 command 창을 열어서 다음과 같이 명령어를 실행해봅니다.</p>

<blockquote>
  <p><strong>npm</strong></p>
</blockquote>

<p><img src="assets/built/images/nodejs-npm.png" alt="nodejs_npm" /></p>

<p><code class="highlighter-rouge">npm</code>(Node Package Manager)이 정상적으로 동작하면 이제 npm을 이용해 typescript를 설치할 수 있습니다.
설치는 local mode와 global mode로 설치가 가능합니다. 여기서는 편의상 global mode로 설치합니다.
(일반적으로는 local mode를 선호합니다.)</p>

<p>command 창에서 다음과 같이 명령어를 이용해 typescript를 <code class="highlighter-rouge">global</code>로 설치합니다.</p>

<blockquote>
  <p><strong>npm install -g typescript</strong></p>
</blockquote>

<p><img src="assets/built/images/nodejs-npm-typescript.png" alt="nodejs_npm_typescript" /></p>

<p><code class="highlighter-rouge">typescript 2.6.2</code>가 설치되었습니다.</p>

<blockquote>
  <p>global mode로 설치하면 windows 시스템을 기준으로 <code class="highlighter-rouge">$USER_HOME/AppData/Roaming/npm/node_modules</code>에 
설치됩니다.</p>
</blockquote>

<p>이제 사용할 <code class="highlighter-rouge">IDE</code>(Integrated Development Environment)를 설치합니다. 여기서는 <code class="highlighter-rouge">WebStorm</code>(유료)을 이용합니다.
<code class="highlighter-rouge">Visual Studio Code</code>(무료)를 사용하셔도 됩니다. WebStorm은 유료이지만 30일 trial을 사용할 수 있고 Student license로
1년간 무료로 사용할 수 도 있습니다.</p>

<p><a href="https://www.jetbrains.com/" target="_blank">JetBrains</a>사이트로 접속한 후 
<a href="https://www.jetbrains.com/webstorm" target="_blank">WebStorm</a>을 다운로드 받습니다.</p>

<p>다운로드가 완료되면 기본형태로 설치합니다. 설치가 끝나면 프로젝트를 생성할 수 있는 화면이 나오게 되는데 
일단 이 화면에서 대기합니다. 프로젝트는 Angular CLI를 이용해서 생성합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular 개발환경 - Angular CLI</strong></p>

<p>일반적으로 <code class="highlighter-rouge">Framework</code>를 도입할 때 가장 힘든점 중 하나는 개발환경 구축입니다. 기본적인
폴더구조를 숙지해서 만들어야 하고 기본적으로 사용되는 설정 파일들도 다수 존재합니다. 대부분 머가먼지 알기 힘들죠.
코드를 작성한 후 Build 설정, Bundler 설정, 테스팅과 배포등 너무 많은 일을 해야하고 설정방법 또한 너무 많고 복잡합니다.</p>

<p>Angular 역시 마찬가지입니다. Mike Brocchi( Angular CLI contributor )의 Twitter 설문을 예로 들어보죠.</p>

<p><img src="assets/built/images/what-is-angular-barrier.png" alt="what is angular barrier" /></p>

<p>Angular는 <code class="highlighter-rouge">Angular CLI</code>를 제공함으로 이런 복잡함을 해결하고 있습니다. Angular CLI를 이용할 경우와 그렇지 않는 경우를 
간단히 그림으로 표현하면 다음과 같습니다.</p>

<p><img src="assets/built/images/using-angular-cli.png" alt="with angular CLI" /></p>
<div class="img-reference">( 이미지 출처 : https://www.quora.com/What-is-Angular-CLI )</div>

<p>Angular Project를 쉽게 생성하고 프로젝트를 시작하기 위한 
<code class="highlighter-rouge">scaffolding</code>을 포함해서 다양한 기능을 제공하는 것이 바로 Angular CLI입니다. 사실 쓰지 않을 이유가 없습니다.</p>

<p>그럼 Angular CLI를 설치해보도록 하죠. command 창을 열어서 다음과 같이 실행합니다.</p>

<blockquote>
  <p><strong>npm install -g @angular/cli</strong></p>
</blockquote>

<p><code class="highlighter-rouge">npm</code>을 이용하여 Angular CLI를 global로 설치합니다. 설치하는데 시간이 좀 걸립니다. 설치가 끝나면 
다음과 같이 입력해서 Angular CLI의 버전을 확인해 보세요.</p>

<blockquote>
  <p><strong>ng --version</strong></p>
</blockquote>

<p><img src="assets/built/images/angular-cli-version.png" alt="Angular CLI version" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular 프로젝트 생성</strong></p>

<p>Angular CLI의 설치가 끝났으니 이제 Angular CLI를 이용하여 프로젝트를 하나 생성합니다. 프로젝트명은 
<code class="highlighter-rouge">bookSearch-angular</code>로 하겠습니니다. 프로젝트 폴더는 <code class="highlighter-rouge">D:/bookSearch-angular</code>로 생성할 것이기 때문에 
저는 현재 command창의 working directory를 <code class="highlighter-rouge">D:/</code>로 잡아놓고 다음과 같이 입력합니다.</p>

<blockquote>
  <p><strong>ng new bookSearch-angular</strong></p>
</blockquote>

<p><img src="assets/built/images/angular-cli-new-project.png" alt="Angular CLI new project" /></p>

<p>시간이 제법 오래 걸립니다. 필요한 모듈들을 <code class="highlighter-rouge">npm</code>을 이용해 다운로드 받기 때문입니다. 프로젝트 생성이 끝나면
자동으로 생성된 설정 파일과 기본 Skeleton 코드가 프로젝트 폴더안에 위치하게 됩니다.</p>

<p>설정파일에 대한 내용은 조금 나중에 다시 보기로 하고 일단 WebStorm으로 해당 프로젝트 폴더를 open합니다.
아래의 그림처럼 WebStorm에서 프로젝트 폴더가 보이게 됩니다.</p>

<p><img src="assets/built/images/webstorm-angular-project-init.png" alt="WebStorm Angular project" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 개발환경 서버를 이용한 Angular 프로젝트 실행</strong></p>

<p>command 창을 열어 프로젝트 root로 working directory를 이동시킨 후 다음의 명령을 실행하면 Webpack을 이용하여 
우리 소스를 bundling하고 로컬 웹서버를 이용하여 우리 프로젝트를 서비스하게 됩니다.</p>

<blockquote>
  <p><strong>ng serve</strong></p>
</blockquote>

<p>명령 수행이 끝나면 <strong>webpack: Compiled successfully.</strong> 메시지가 출력됩니다. 이제 browser를 실행시켜 
다음 URL로 접속해 정상적으로 출력되는지 확인하시면 됩니다.</p>

<blockquote>
  <p><strong>http://localhost:4200</strong></p>
</blockquote>

<p><img src="assets/built/images/angular-project-run.png" alt="Angular project run" /></p>

<p>이번 포스트에서는 Angular를 사용하기 위한 위한 개발환경을 구축했습니다. 
우리 강좌에서는 <strong>Testing과 관련된 사항은 다루지 않을 예정입니다.</strong>
이제 만들어진 App을 조금씩 수정하면서 우리의 첫 Angular 프로그램을 완성해 나가면 될 듯 합니다.</p>

<p>예제이기 때문에 따로 설명은 하지 않았지만 <code class="highlighter-rouge">Git</code>과 <code class="highlighter-rouge">GitHub</code>를 이용해서 코드를 관리하시는게 좋지 않을까
생각됩니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(1) - Introduction</title>
	  <link>https://moon9342.github.io/angular-lecture-introduction</link>
		
				
		
				
		
				
		
				
		
				
						<author>Angular</author>
				
		
	  <pubDate>2018-01-31T10:04:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/angular-lecture-introduction</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction.html">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment.html">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component.html">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material.html">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1.html">Angular 강좌(5) - 실습(1)</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular Version</strong></p>

<p><code class="highlighter-rouge">Angualr</code>의 History와 개요부터 간단하게 살펴보겠습니다.</p>

<p><code class="highlighter-rouge">Angular</code>는 JavaScript based open source front end web application framework 입니다. 길기도 하네요. 
초기 버전인 <code class="highlighter-rouge">AngularJS</code>는 2010년 발표되었습니다. 지금은 <code class="highlighter-rouge">Angular 1</code>이라고 표현하기도 합니다. 
버전 정책이 Angular 1.x로 올라가는 것이죠. 그렇게 발전해오다가
2016년에 <code class="highlighter-rouge">Angular 2</code>가 정식으로 출시되었습니다. 그러면서 Angular 2라고 명시하지 않고 <code class="highlighter-rouge">Angular</code>라는 이름으로 호명하기로
결정합니다. 지금 우리가 Angular라고 부르는 것은 모두 Angular 2 이후 버전입니다. 2017년 3월에 <code class="highlighter-rouge">Angular 4</code>가 release되었고 
현재(2018년 1월)기준으로 <code class="highlighter-rouge">Angular 5</code> 까지 나온 상태입니다.</p>

<blockquote>
  <p>2017년 12월 3일부로 다음의 사항들이 정식으로 release되었습니다.</p>
  <ul>
    <li>Angular 5.1.0</li>
    <li>Angular CLI 1.6.0</li>
    <li>Angualr Material</li>
    <li>Angular Material CDK(component dev kit)</li>
  </ul>
</blockquote>

<p>정리를 하자면 <code class="highlighter-rouge">AngularJS</code>라고 표현되는 Angular 1은 버전정책이 AngularJS 1.0, AngularJS 1.1, AngularJS 1.2, … 이렇게 
올라가고 <code class="highlighter-rouge">Angular</code>라고 표현되는 Angular 2는 버전정책이 Angular 2, Angular 3, Angular 4, … 이렇게 올라갑니다. 
Angular 3는 Router issue때문에 release가 최소되었습니다. 그래서 Angular 2 다음 버전이 Angular 4가 됩니다. 
2017년 11월에 release된 Angular 5는 Angular 2의 3번째 Major 배포판 이라는 말이지요.</p>

<p>기존의 <code class="highlighter-rouge">AngularJS</code>와 지금의 <code class="highlighter-rouge">Angular</code>는 Architecture측면이나 구현측면에서 큰 차이가 있습니다. 그렇기 때문에 Angular 2가 아키텍쳐가
발표되었을 때 사실 많은 AngularJS 개발자들이 황당해 했던것도 사실입니다. 여하간 AngularJS는 역사속으로 사라지고 있습니다. 
사실 Google에서도 AngularJS 시절에는 내부적으로 AngulraJS를 사용하지 않았습니다. 하지만 Angular로 넘어오면서 자사의 개발자체도
Angular로 진행하고 있고 Angular를 단지 web framework에서만 사용하는 기술이 아닌 모든 platform에 대응할 수 있는 형태로 
발전시킬려고 노력하고 있습니다.</p>

<blockquote>
  <p><strong>다음은 기존의 AngularJS와 지금의 Angular의 중요 차이점 중 몇가지 입니다.</strong></p>
  <ul>
    <li>Controller와 $scope 기반 개발방식에서 컴포넌트 기반 개발방식(<code class="highlighter-rouge">CBD</code>, Component Based Development)으로 개발방법 변경.</li>
    <li>주력 개발 언어로 <code class="highlighter-rouge">TypeScript</code> 도입</li>
    <li>개발환경 지원도구인 <code class="highlighter-rouge">Angular CLI</code> 제공</li>
  </ul>
</blockquote>

<p>이외에도 더 많지만 저 위의 3가지만 일단 기억하시면 될 듯 합니다. 저 위의 3가지로 인해 개발 생산성과 성능면에서 큰 향상을
이루었습니다. 하지만 결정적(?)인 단점이 있습니다. Angular는 대부분의 browser를 지원하고 있는데 <strong><code class="highlighter-rouge">IE</code>의 경우 <code class="highlighter-rouge">9</code>버전 이상부터 
지원</strong>합니다. 따라서 Cross Browsing의 issue를 가지고 있습니다.</p>

<p>아참..로고도 바꾸었습니다. 테두리가 있는 방패모양의 로고에서 테두리를 빼고 <code class="highlighter-rouge">A</code>글자를 흰색으로 바꾸었습니다. ^^;;
<img src="assets/built/images/angularjs-angular2-logo-change.jpg" alt="AngularJS to Angular" /></p>
<div class="img-reference">( 이미지출처 : http://nodesimplified.com/angularjs-to-angular/ )</div>

<p>이 <a href="https://github.com/angular/angular/blob/master/CHANGELOG.md" target="_blank">링크</a>를 
클릭해 보시면 Angular의 버전 업데이트에 대한 <code class="highlighter-rouge">ChangeLog</code>를 확인할 수 있습니다. 
일 무지 열심히 하네요. 따라가기 힘들정도입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Angular 학습을 위한 pre-requisite</strong></p>

<p>Angular는 <code class="highlighter-rouge">Steep Learning Curve</code>를 가집니다. 배우기가 힘들다는 거죠. 적어도 기본적인 <code class="highlighter-rouge">JavaScript</code> 개발에 대한 지식과
<code class="highlighter-rouge">TypeScript</code>에 대한 지식, 그리고 객체지향개발(<code class="highlighter-rouge">OOP</code>)에 대한 지식을 필수로 요구합니다. 물론 Angular를 배우면서 같이 하면 
되긴 하지만 힘든건 사실입니다.</p>

<p>해서 Angular 강좌 역시 기본적으로 다음과 같은 선행지식을 필요로 합니다.</p>
<ul>
  <li><code class="highlighter-rouge">JavaScript</code></li>
  <li><code class="highlighter-rouge">TypeScript</code></li>
  <li><code class="highlighter-rouge">OOP</code>(Object Oriented Programming)</li>
  <li>Front End 개발 도구 ( <code class="highlighter-rouge">npm</code>, <code class="highlighter-rouge">babel</code>, <code class="highlighter-rouge">webpack</code>, <code class="highlighter-rouge">gulp</code> 등등)</li>
</ul>

<p>참고로 이 <a href="./front-end-ecosystem.html" target="_blank">링크</a>에 가보시면 현재 Front End 개발환경에 대한 간단한 
포스트를 보실 수 있습니다. 
또한 이 <a href="./typescript-introduction.html" target="_blank">링크</a>에 가보시면 TypeScript에 대한 강좌 역시 보실 수 있습니다.</p>

<p>말은 어렵다고 했지만 하다보면 또 그냥 저냥 하게 됩니다. 일단 기본적인 소개는 이정도로 하고 다음은 개발환경부터
세팅해 보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(7) - Class</title>
	  <link>https://moon9342.github.io/typescript-class</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-30T18:04:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-class</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
    <li><a href="./typescript-class.html">TypeScript 강좌(7) - Class</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> TypeScript Class</strong></p>

<p>기존의 <code class="highlighter-rouge">JavaScript</code>는 재사용 가능한 component를 만들기 위해 함수와 prototype에 기반한 상속을 이용했습니다. 하지만
기존 객체지향에 익숙해 있는 개발자들에게는 상당히 생소한 개념이었죠. 그래서 ECMAScript 2015( <code class="highlighter-rouge">ES6</code> )에서는 
개발자들이 좀 더 쉽게 JavaScript Application을 구현할 수 있도록 전통적인 class 기반의 객체지향 개념을 도입했습니다.</p>

<p><code class="highlighter-rouge">TypeScript</code> 역시 이 class기반의 객체지향 기법을 이용해 Application을 개발할 수 있습니다.</p>

<p>일단 ECMAScript 2015( <code class="highlighter-rouge">ES6</code> )의 class는 다음과 같이 정의하고 사용할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">,</span><span class="nx">bauthor</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span> <span class="o">=</span> <span class="nx">bauthor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">printInfo</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">,</span><span class="s1">'괴테'</span><span class="p">);</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>위의 코드는 data type의 정보를 포함하고 있지 않기 때문에 <code class="highlighter-rouge">TypeScript</code>로 변형하면 오류가 발생합니다.
적절히 타입 정보를 포함해 코드를 수정하면 다음과 같습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span> <span class="o">=</span> <span class="nx">bauthor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">,</span><span class="s1">'괴테'</span><span class="p">);</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>위의 코드는 <code class="highlighter-rouge">Java</code>에서 우리가 익히 보아왔던 class의 형태입니다. 생성자를 표현하는 부분이 좀 생소하지만 쉽게
이해할 수 있을 듯 합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Inheritance</strong></p>

<p>일반적인 객체지향언어의 <code class="highlighter-rouge">Inheritance</code> 개념 역시 TypeScript에도 사용할 수 있습니다. 다음의 코드를 보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="c1">// 상위 클래스의 생성자</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span> <span class="o">=</span> <span class="nx">bauthor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 상위 클래스의 method</span>
    <span class="c1">// 입력 인자가 있으면 사용하고 없으면 default 사용</span>
    <span class="nx">printInfo</span><span class="p">(</span><span class="nx">input</span><span class="p">:</span><span class="nx">string</span> <span class="o">=</span> <span class="s1">'Initial'</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// class의 상속</span>
<span class="kd">class</span> <span class="nx">EBook</span> <span class="kd">extends</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="na">btype</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="na">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">btype</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 상위 class 생성자 호출</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">btitle</span><span class="p">,</span> <span class="nx">bauthor</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btype</span> <span class="o">=</span> <span class="nx">btype</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// method overriding</span>
    <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
        <span class="c1">// 상위 class의 method 호출</span>
        <span class="k">super</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 
                     저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span><span class="p">}</span><span class="s2">,
                     타입: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btype</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// IS-A relationship에 의한 상위 class type 사용</span>
<span class="kd">let</span> <span class="na">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EBook</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">,</span><span class="s1">'괴테'</span><span class="p">,</span>
    <span class="s1">'PDF'</span><span class="p">);</span>

<span class="c1">// dynamic binding에 의한 overriding method 호출.</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>기존 class를 확장하여 새로운 class를 정의하는 방법입니다. <code class="highlighter-rouge">IS-A Relationship</code> 역시 성립합니다. 그로 인한
상위 타입으로 객체를 사용할 수 있습니다. 또한 위의 예에서 처럼 <code class="highlighter-rouge">method overriding</code>의 개념 역시 존재하고 
<code class="highlighter-rouge">dynamic binding</code> 개념 역시 존재합니다. 물론 <code class="highlighter-rouge">TypeScript</code>에서는 공식적으로 저 용어를 사용하지는 않습니다.
다만 우리가 <code class="highlighter-rouge">Java</code>언어에서 알고 있던 객체지향 개념이 그대로 TypeScript에도 일부 적용된다고 보시면 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Access Modifier</strong></p>

<p><code class="highlighter-rouge">TypeScript</code>는 3가지 종류의 접근제어 연산자를 제공합니다. 우리에게 익숙한 <code class="highlighter-rouge">public</code>, <code class="highlighter-rouge">protected</code>, <code class="highlighter-rouge">private</code> 
키워드로 제공되며 <strong>default값은 <code class="highlighter-rouge">public</code></strong>입니다. 즉, Access Modifier를 명시하지 않으면 모두 <code class="highlighter-rouge">public</code>으로 간주됩니다.</p>

<ul>
  <li><code class="highlighter-rouge">public</code> : 접근제한이 없습니다. class외부에서 자유롭게 접근이 가능합니다.</li>
  <li><code class="highlighter-rouge">protected</code> : class 외부에서 접근할 수 없습니다. 단, 상속받은 하위 class에서는 접근이 가능합니다.</li>
  <li><code class="highlighter-rouge">privatre</code> : class 외부에서 접근할 수 없습니다. 상속받은 하위 class에서도 접근이 불가능합니다.</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kr">protected</span> <span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kr">public</span> <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="kr">private</span> <span class="nx">_bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">_bauthor</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// private property인 _bauthor의 getter</span>
    <span class="kd">get</span> <span class="nx">bauthor</span><span class="p">():</span> <span class="nx">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_bauthor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// private property인 _bauthor의 setter</span>
    <span class="kd">set</span> <span class="nx">bauthor</span><span class="p">(</span><span class="na">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_bauthor</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">EBook</span> <span class="kd">extends</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kr">private</span> <span class="na">btype</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kr">public</span> <span class="kd">constructor</span><span class="p">(</span><span class="na">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">btype</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">btitle</span><span class="p">,</span> <span class="nx">bauthor</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btype</span> <span class="o">=</span> <span class="nx">btype</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`제목: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">}</span><span class="s2">, 
                     저자: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">bauthor</span><span class="p">}</span><span class="s2">,
                     타입: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">btype</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EBook</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">,</span><span class="s1">'괴테'</span><span class="p">,</span>
    <span class="s1">'PDF'</span><span class="p">);</span>

<span class="nx">book</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>위의 예제에서는 다음의 코드를 주의해서 보아야 합니다. 
생성자의 인자로 <code class="highlighter-rouge">private _bauthor:string</code>라고 선언된 부분이 보입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">protected</span> <span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kr">public</span> <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="kr">private</span> <span class="nx">_bauthor</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>생성자에 인자를 명시할 때 access modifier를 같이 명시하면 위의 예처럼 명시적으로
해당 property가 선언되어 사용할 수 있게 됩니다.</p>

<p>일반적으로 <code class="highlighter-rouge">private property</code>의 이름은 앞에 <code class="highlighter-rouge">_</code>를 관용적으로 써주게 됩니다. 이렇게 사용하는 이유는
관용적 coding convention 때문에 그렇습니다. ECMAScript에서는 개발자들이 private의 의미로 사용되는
property에 일반적으로 <code class="highlighter-rouge">_</code>를 붙여서 사용했었습니다.</p>

<p>또 다른 이유는 <code class="highlighter-rouge">setter</code>와 <code class="highlighter-rouge">getter</code>의 이름때문에 그렇습니다. 다음의 코드에서 보듯이 <code class="highlighter-rouge">TypeScript</code>에서 
getter와 setter의 표현은 우리가 알고 있는 다른 언어의 getter, setter와 다릅니다. 그리고 이렇게
선언된 getter와 setter가 어떻게 사용되는지도 유의해서 보시기 바랍니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// private property인 _bauthor의 getter</span>
    <span class="kd">get</span> <span class="nx">bauthor</span><span class="p">():</span> <span class="nx">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_bauthor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// private property인 _bauthor의 setter</span>
    <span class="kd">set</span> <span class="nx">bauthor</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_bauthor</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Readonly Property</strong></p>

<p>class의 property를 <code class="highlighter-rouge">readonly</code>로 지정할 수 있습니다. readonly로 지정되면 property가 선언될 때 혹은 생성자안에서
반드시 초기화를 진행해야 합니다. 다음의 예제를 참고하시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">readonly</span> <span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kd">let</span> <span class="nx">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">);</span>

<span class="nx">book</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="s1">'파우스트'</span><span class="p">;</span>   <span class="c1">// 코드 에러</span>
</code></pre></div></div>

<p>다음의 예제처럼 생성자의 parameter를 readonly로 선언하면 따로 class의 property로 선언할 필요가 없습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">readonly</span> <span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kd">let</span> <span class="nx">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">book</span><span class="p">.</span><span class="nx">btitle</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Static Property</strong></p>

<p><code class="highlighter-rouge">static</code> 키워드 역시 사용할 수 있습니다. ECMAScript 2015에서는 static을 method에만 적용할 수 있었지만
TypeScript는 property에도 적용할 수 있습니다. static property는 class의 이름으로 직접 access를 할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
    <span class="kr">static</span> <span class="nx">count</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
        <span class="nx">Book</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="kd">let</span> <span class="nx">book1</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">book2</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s1">'파우스트'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Book</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Abstract Class</strong></p>

<p><code class="highlighter-rouge">abstract class</code>는 하나이상의 <code class="highlighter-rouge">abstract method</code>를 가지고 있는 class를 의미합니다. method의 선언만을 가지고 있기
때문에 직접적인 객체생성을 할 수 없고 상속을 이용해 하위 클래스에서 abstract method를 overriding해서 사용하게 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">abstract</span> <span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">btitle</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">btitle</span> <span class="o">=</span> <span class="nx">btitle</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">abstract</span> <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">EBook</span> <span class="kd">extends</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="nx">printInfo</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">btitle</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">book</span><span class="p">:</span><span class="nx">Book</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EBook</span><span class="p">(</span><span class="s1">'젊은 베르테르의 슬픔'</span><span class="p">);</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> interface의 의미로 class사용</strong></p>

<p>이 부분은 기존의 다른 언어와 다릅니다. <strong>class를 확장해서 interface를 정의</strong>할 수 있습니다. 다음의 코드를 참조하세요</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">EBook</span> <span class="kd">extends</span> <span class="nx">Book</span> <span class="p">{</span>

    <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">book</span><span class="p">:</span><span class="nx">EBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">btitle</span><span class="p">:</span> <span class="s1">'파우스트'</span><span class="p">,</span>
    <span class="na">bauthor</span><span class="p">:</span> <span class="s1">'괴테'</span>
<span class="p">};</span>
</code></pre></div></div>

<hr />

<p>이번 포스트에서는 <code class="highlighter-rouge">TypeScript</code>의 class에 대해서 살펴보았습니다. 객체지향 언어의 class와 상당히 유사하면서도
약간의 차이점이 있었습니다. 차이점 위주로 기억하시면 될 듯 합니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">이 포스트의 내용은 아래의 사이트를 참조했습니다. 조금 더 자세한 사항을 알고 싶으시면
    해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.typescriptlang.org" target="_blank">TypeScript Official HomePage</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Front-End 발전 역사와 개발 생태계</title>
	  <link>https://moon9342.github.io/front-end-ecosystem</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-29T13:31:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/front-end-ecosystem</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>이번 포스트는 과거 JavaScript 탄생부터 시작해서 어떻게 발전해왔는지에 대한 내용과 <br />
현재 Front End 개발에 있어서 무엇을 알아야 하는 지에 대한 전반적인 기술 상황에 대해서 알아보겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript 탄생</strong></p>

<p>JavaScript라는 언어의 역사는 저의 <a href="./javascript-history.html" target="_blank">다른 포스트</a>에서도 볼 수 있지만 
여기서도 간단하게 언급하고 넘어가겠습니다.</p>

<p><code class="highlighter-rouge">JavaScript</code>언어의 역사는 1995년 Netscape사의 Brendan Eich(브랜든 아이크)에 의해 개발된 <code class="highlighter-rouge">Mocha</code>라는 언어부터 시작됩니다.
이 Mocha라는 언어는 <strong>“Prototype의 개념과 Functional Language(함수형 언어)의 특성을 가지고 Web에 동적으로 활용할 수 있는 
언어를 만들어보자”</strong> 라는 취지로 2주일 이라는 굉장히 짧은 기간안에 만들어졌습니다.</p>

<p>추후에 <strong>Mocha -&gt; LiveScript -&gt; JavaScript</strong>로 개명되었고 ECMA에 <code class="highlighter-rouge">ECMA-262</code> 기술규격으로 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화를
진행하게 됩니다. 이에 대응해 1996년 MicroSoft 측에서는 <code class="highlighter-rouge">JScript</code>라는 걸 만들어내서 자사의 IE 3안에 포함시켜 제공하기 시작했습니다.</p>

<p>이런 JavaScript는 여러가지 문제점을 내포하고 있었는데 가장 큰 문제를 꼽자면</p>

<ul>
  <li>구현의 어려움</li>
  <li>언어의 모호성</li>
  <li>Cross Browsing의 한계</li>
</ul>

<p>정도를 들 수 있습니다. 즉, 사용자 입력값을 검사하는 용도, 사용자의 이벤트를 감지해서 처리하는 용도로는 사용할 수 있지만 
언어 자체가 가지고 있는 근본적인 문제때문에 사용이 힘들었습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 구세주의 등장 - jQuery</strong></p>

<p>이 때 구세주가 등장합니다. 우리가 잘 알고 있는 <code class="highlighter-rouge">jQuery</code> library입니다.</p>

<p>jQuery는 open source javascript library로 순수 javascript가 가지고 있었던 DOM처리의 어려움과 Cross Browsing에 대한 issue를
해결하면서 <strong>JavaScript의 대표적 library</strong>로 사용되게 되었습니다. jQuery로 인해 JavaScript가 조금은 쓸만한 언어로 여기지면서
사용되기 시작했습니다.</p>

<p>그러면서 그냥 그냥 아주 소소하게 client web browser안에서 JavaScript 코드와 jQuery 코드가 이용되었던 거지요. 특별히 중요하지도 않은
단위코드 위주로 사용이 되는 그런 수준이었습니다. 그러면서 우리 기억에도 “알면 좋고 몰라도 상관없는 언어”로 인식되었습니다.</p>

<p>그렇게시간은 흘러갑니다.!!</p>

<p>1997년 <code class="highlighter-rouge">ECMAScript</code>의 초판이 나오게 됩니다. <code class="highlighter-rouge">ES1</code>이라고 합니다. 그 후 1999년에 <code class="highlighter-rouge">ES3</code>가 나오게 됩니다. 여기까지 하고 한동안
ECMAScript 표준은 쿨쿨 잠을 자게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 다시 JavaScript에 날개를 달아보자 - HTML5</strong></p>

<p>1999년 12월 <code class="highlighter-rouge">W3C</code>(World Wide Web Consortium)에서 하나의 발표를 합니다. 아시다시피 W3C는 <code class="highlighter-rouge">HTML</code>과 <code class="highlighter-rouge">CSS</code>의 표준을 
관장하는 기구입니다. 이때까지 우리가 사용하는 HTML의 버전은 4.01버전이었습니다. W3C는 이 버전을 마지막으로 더 이상 
HTML의 버전업은 없을 것이라고 공표하게 됩니다. 그때까지 잘 사용해왔던 HTML을 왜 버전업하지 하지 않겠다고 했을까요?</p>

<p>여러가지 이유가 있지만 프로그래밍 언어의 측면에서 바라보면 HTML이란 언어는 다음과 같은 한계점이 있습니다.</p>

<ul>
  <li><strong>정형성 : HTML언어는 정형성이 없기때문에 유지보수에 적합하지 않다.</strong></li>
  <li><strong>확장성 : 정해진 Tag만 이용하기 때문에 언어자체에 대한 기능적 확장이 어렵다.</strong></li>
</ul>

<p>W3C는 저 두가지 이유를 들어 HTML언어를 이대로 끌고 가기 보다는 좀 더 다른 수단을 강구해야 겠다고 판단합니다. W3C의 선택은
바로 <code class="highlighter-rouge">XML</code>의 도입이었습니다. 즉, HTML이 가지는 두가지 문제점을 해결할 수 있는 XML을 도입해서 새로운 Web언어의 표준을
끌고 나갈 생각이었습니다. 그 결과 2000년 들어오면서 HTML과 XML이 결합된 새로운 표준인 <code class="highlighter-rouge">XHTML 1.0</code>이 발표되게 됩니다.</p>

<p>W3C의 이런 의도와는 다르게 몇몇개의 회사들이 모여서 조금 다른 접근을 모색합니다. XML을 도입하지 말고 순수하게 HTML을 기능을
버전업시킬 수 있는 방법을 찾기 시작한 것이죠. 그래서 <code class="highlighter-rouge">WHATWG</code>(Web Hypertext Application Technology Working Group)이라는 
Working Group이 만들어지고 이 안에서 기존의 HTML을 발전시킬 방법을 연구하게 됩니다. 
( 사실 여기서 할 말이 많기 한데 자꾸 산으로 가는 느낌이라 적당히 짜르겠습니다. ) 
이 WG에서 나온것이 바로 현재의 표준인 <code class="highlighter-rouge">HTML5</code>입니다. HTML을 이용해서 Web Application을 만들자는 취지입니다. 
이 HTML5안에 Client Web Application을 작성할 수 있는 API가 포함되어 있는데 이게 <code class="highlighter-rouge">JavaScript</code>로
되어 있습니다. 결국 HTML5가 issue화 되면서 JavaScript의 위상도 조금씩 더 올라가게 됩니다.</p>

<p>그래서인지 쿨쿨 잠을자던 ECMAScript 개정판(<code class="highlighter-rouge">ES5</code>)이 2009년에 등장합니다. 참고로 4판(<code class="highlighter-rouge">ES4</code>)은 버려졌습니다. 이제 슬슬
JavaScript에 대한 발전이 시작됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript의 획기적 전환점 - Node.js</strong></p>

<p>2013년 <code class="highlighter-rouge">Node.js</code>가 출시됩니다. 아무리 HTML5라고 해도 이때까지의 JavaScript는 Browser안에서 동작하는 언어였습니다.
우리가 알고 있는 <code class="highlighter-rouge">Java</code>, <code class="highlighter-rouge">C#</code>과 같은 언어가 될 수 없는 태생적 한계가 있는거죠. 이런 browser에 갇힌 JavaScript를
browser 외부로 탈출하게끔 만들어준 일등공신이 바로 Node.js입니다. 결국 JavaScript로 다른 언어처럼 OS위에서 동작하는
일반 application을 작성할 수 있는 길이 열린것이고 그에 따라 언어의 위상이 완전히 변했습니다.</p>

<p>그에 발맞춰 ECMAScript도 빠르게 변화하기 시작했습니다. 2015년에 ECMAScript 2015(<code class="highlighter-rouge">ES6</code>)가 등장하면서 JavaScript 언어자체에
아주 큰 변화들이 많이 생겼습니다. 현재 ECMAScript 2016(<code class="highlighter-rouge">ES7</code>)까지 나온 상태입니다. 조금 지나면 <code class="highlighter-rouge">ES8</code>이 표준화되어서 나오겠네요.
거의 1년마다 새로운 배포판이 나올정도로 빠르게 변화하면서 언어적 측면에서 가지고 있던 많은 문제점들을 극복하려고 노력하고 있습니다.</p>

<p>현재(2018년 1월) 대부분의 browser들은 <code class="highlighter-rouge">ES6</code>를 지원하고 있습니다. 
<a href="https://kangax.github.io/compat-table/es6/" target="_blank">여기</a>에 접속해 보시면 특정 browser에 대해 
각 ECMAScript의 버전 호환성을 보실 수 있습니다.</p>

<blockquote>
  <p><strong>이제 IE는 고만쓰도록 해요. 제발….</strong></p>
</blockquote>

<p>아직 완벽하게 Cross Browsing이 안되는데 어떻게 하느냐에 대한 문제는 <code class="highlighter-rouge">Babel</code>, <code class="highlighter-rouge">TypeScript</code>와 같은 
transpiler를 이용해서 해결할 수 있습니다. 
Babel, TypeScript는 ES6(ES7) 문법으로 쓰여있는 JavaScript code를 ES5 형태의 JavaScript로 변환시켜주기 때문에 
IE에서 ES6지원이 안됨에도 불구하고 ES5로 변환해서 사용할 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 변화의 속도가 너무 빠름</strong></p>

<p>그런데 문제는 기술의 발전 속도가 너무 빠르다는데 있습니다. 또한 알아야 할게 한두 가지가 아니구요. 
과거 Back End에서 사용했던 프로그래밍 기술과 여러가지 개발 툴의 개념들이 다 Front End로 넘어왔기 때문입니다.
너무 많은기술들이 빠르게 생기고 빠르게 사라지고 있습니다.</p>

<p>사실 2-3년전에 자주 사용했던 JavaScript Library와 Framework들 중 많은 것들이 이미 다른 것으로 대체되었습니다. 
그렇다고 손 놓고 있을 순 없으니 현재 상태에서 우리가 Front End 개발을 하기 위해 필수적으로 알아야 하는 것 몇가지만
살펴보도록 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 이것정도는 알고 가자</strong></p>

<ul>
  <li><strong>Package Manager</strong> : <code class="highlighter-rouge">NPM</code>, Yarn</li>
</ul>

<p><img src="assets/built/images/npm-vs-yarn.png" alt="npm vs yarn" /></p>

<p>외부 라이브러리를 사용할 경우 해당 라이브러리를 설치, 삭제, 의존성 관리등을 해야 하는데 이를 위한 도구가 
몇몇 존재합니다. 그중 하나만 하자면 당연 <code class="highlighter-rouge">npm</code>입니다. Node Package Manager의 약자이고 Node.js를 살짝 맛보시면
npm이 어떻게 동작하는지 아실 수 있습니다. 굳이 Node.js에 대해서 학습할 필요는 없습니다. 당연히 알면 좋지만요.</p>

<ul>
  <li><strong>Transpiler</strong> : Babel, <code class="highlighter-rouge">TypeScript</code></li>
</ul>

<p><img src="assets/built/images/typescript-vs-babel.jpg" alt="babel vs typescript" /></p>
<div class="img-reference">( 이미지 출처 : http://news.softpedia.com/news )</div>

<p>Cross Browsing을 위한 Transpiler입니다. 비교 대상은 아닙니다. 둘 다 알아둘 필요는 있지만 
저는 <code class="highlighter-rouge">TypeScript</code>는 반드시 해야 한다고 생각합니다. 앞으로 TypeScript는 더 발전할 듯 보이거든요. 
하지만 배우기 쉽지 않습니다. 언어적 측면을 파고 들면 내용이 꽤나 많습니다.
다행히 TypeScript는 ECMAScript의 superset이니 ECMAScript 공부한다고 생각하시면 속 편합니다.</p>

<p>또한 제 개인적인 생각과는 반대로 TypeScript언어의 단점도 분명히 존재합니다. 엄격한 type checking덕분에
JavaScript가 가지는 프로그래밍의 유연함이 많이 떨어진다는 것이죠.</p>

<ul>
  <li><strong>자동화 도구</strong> : Grunt, <code class="highlighter-rouge">Gulp</code></li>
</ul>

<p><img src="assets/built/images/grunt-vs-gulp.jpg" alt="Grunt vs Gulp" /></p>

<p>빌드, 테스트, 배포등을 위한 자동화 도구입니다. 과거에는 Grunt를 많이 사용했지만 현재는 Gulp인듯 합니다. 
시간 좀 지나면 Gulp도 Grunt와 마찬가지로 역사속으로 사라지게 되겠지만 지금은 Gulp가 대세입니다.</p>

<ul>
  <li><strong>module bundler</strong> : <code class="highlighter-rouge">webpack</code>, rollup</li>
</ul>

<p><img src="assets/built/images/webpack-vs-rollup.png" alt="webpack vs rollup" /></p>

<p>코드 재사용을 위한 모듈화 도구들과 bundler 역시 여러가지 있는데 요즘 많이 사용하는 건 <code class="highlighter-rouge">webpack</code>입니다.
ES6 들어오면서 언어적 차원에서 Module을 지원하기 시작했고 이런 Module들을 하나로 모아 Packaing하는 작업이
필요하게 되었습니다. 이를 위한 도구 역시 발전을 하고 있구요. 과거에는 Common.js, Require.js를 이용하여
처리했다면 최근에는 webpack, rollup을 이용하여 처리합니다.</p>

<ul>
  <li>Framework &amp; Library : <code class="highlighter-rouge">Angular</code>, <code class="highlighter-rouge">React</code>, <code class="highlighter-rouge">Vue.js</code></li>
</ul>

<p>우리의 목적은 사실 저 위의 3가지를 배우는 것입니다. 각기 나름대로의 장점과 특징들을 가지고 있습니다. 개인적으로는 
블로그내에 저 세가지의 강좌를 개설하는게 2018년 상반기의 블로그 목표입니다. 대세는 Angular이지만 React의 성장세
역시 가히 폭발적입니다. 아직까지(2018년 1월기준) Vue.js는 Angular와 React 만큼의 성장세는 보이지 않고 있지만 이 역시 어떻게 될지는
모를일이죠</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 정리</strong></p>

<p>위에서 <strong>“이것정도는 알고가자”</strong>라고 했지만 그 내용을 전부 다 알고 있으면 상당한 경험과 실력을 가진
Front End 개발자일 것입니다. 또 위에 포함을 안했지만  <code class="highlighter-rouge">Git</code>같은 것은 기본적으로 숙지해야 할 것이구요. 할게 너무 많네요
천천히 하나씩 해보도록 하죠 머…</p>

<p>그리고 <strong>“이것정도는 알고가자”</strong>에서 제가 강조한 것들은 제가 현재 사용하는 것들입니다.
그것들이 더 좋다는 보장은 어디에도 없습니다. 자기 손에 익숙한게 최고입니다. ^^</p>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>TypeScript 강좌(6) - Interface</title>
	  <link>https://moon9342.github.io/typescript-interface</link>
		
				
		
				
		
				
						<author>TypeScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-24T09:51:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/typescript-interface</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">TypeScript 강좌는 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./typescript-introduction.html">TypeScript 강좌(1) - Introduction</a></li>
    <li><a href="./typescript-datatype-1.html">TypeScript 강좌(2) - Data Type(Part 1)</a></li>
    <li><a href="./typescript-datatype-2.html">TypeScript 강좌(3) - Data Type(Part 2)</a></li>
    <li><a href="./typescript-variable.html">TypeScript 강좌(4) - 변수 선언</a></li>
    <li><a href="./typescript-destructuring.html">TypeScript 강좌(5) - Destructuring</a></li>
    <li><a href="./typescript-interface.html">TypeScript 강좌(6) - Interface</a></li>
    <li><a href="./typescript-class.html">TypeScript 강좌(7) - Class</a></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> TypeScript Interface</strong></p>

<p><code class="highlighter-rouge">interface</code>는 우리가 알고 있는 <code class="highlighter-rouge">Java</code>의 interface와 문법적으로 유사합니다. 하지만 객체지향에서 말하는 interface와는
의미적으로 좀 차이가 있습니다. 그 부분은 예제 중간중간에 살펴보기로 하고 지금은 TypeScript의 interface 
에 대해서만 살펴보도록 하겠습니다.</p>

<p>TypeScript에서 interface는 새로운 데이터 타입을 만드는 추상 데이터 타입(<code class="highlighter-rouge">abstract data type</code>)으로 사용이 되며
일반 변수, 함수, 클래스의 type check를 위해 사용됩니다. interface 이용하여 타입을 선언하면 
interface안에 명시된 property의 선언과 method의 구현이 강제되기 때문에 프로그래밍의 일관성을 확보할 수 있습니다.</p>

<p>참고로 ES6는 interface를 지원하지 않습니다. TypeScript만 지원합니다. 
그렇기 때문에 interface를 컴파일 한 결과물을 보면 interface의 내용은 나타나지 않게됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Basic Exam</strong></p>

<p>그럼 간단한 예를 통해 알아보도록 하겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">;</span>

<span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>
<p>해당 <code class="highlighter-rouge">.ts</code> 파일을 컴파일 한 결과 <code class="highlighter-rouge">.js</code> 파일을 살펴보면 다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">myBook</span><span class="p">;</span>
<span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>위에서 언급한 대로 interface에 대한 내용은 포함되어 있지 않습니다. TypeScript의 interface는 type check를 위한
용도로 사용되게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Parameter Type Check</strong></p>

<p>비슷한 용도로 함수의 인자를 넘길 때 인자의 type으로 interface를 이용할 수 있습니다. 
아래의 예를 한번 살펴보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">myBook</span><span class="p">:</span> <span class="nx">IBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>굳이 설명할 것도 없는거 같습니다. <code class="highlighter-rouge">printBookInfo()</code>의 인자로 interface type의 객체가 전달되어
사용된 것이죠.</p>

<p>여기까지는 별 문제 없이 이해할 수 있습니다. 이제 그 다음이 살짝 이상합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Duck Typing</strong></p>

<p>아래의 코드에서 문법 오류가 일어날까요?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span><span class="p">,</span>
    <span class="na">bookPrice</span><span class="p">:</span> <span class="mi">3000</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<p>원래 예상대로라면 이 코드는 문제가 있는 것이 맞습니다. <code class="highlighter-rouge">myBook</code>이라는 객체는 <code class="highlighter-rouge">IBook</code> interface type으로 지정되지 
않고 parameter로 전달이 되었거든요. 하지만 이 코드는 에러없이 컴파일이 진행됩니다.</p>

<p>왜 이런 현상이 발생할까요?</p>

<p><strong>TypeScript의 중요한 원칙 중 하나는 가지고 있는 값들의 형태를 가지고 type-checking을 수행한다는 것입니다.</strong> 말이 좀 
어렵네요. 풀어서 설명하자면 TypeScript에서 type-checking은 선언된 타입만을 비교하는것이 아니라 
실제 이용될 수 있는 형태의 값들을 가지고 있느냐 그렇지 않느냐를 가지고 한다는 의미입니다.</p>

<p>위의 예제에서 <code class="highlighter-rouge">myBook</code> 객체는 비록 IBook interface type은 아니지만 IBook interface type을 <strong>모두 커버할 수 있는 값들의 형태</strong>를
가지고 있습니다. 이런 경우 <strong><code class="highlighter-rouge">myBook</code> 객체는 IBook interface 타입으로 간주</strong>한다는 말이지요.</p>

<p>이런걸 동적 typing의 한 종류인 <code class="highlighter-rouge">duck typing</code>이라고 합니다. TypeScript는 duck typing을 지원하는 언어입니다. 일반적으로
말하자면 class의 상속이나 interface의 구현으로 타입을 구분하는 것이 아니라 객체가 특정 타입에 걸맞는 property와 method를 
가지고 있으면 해당 type으로 간주한다는 의미로 받아들이시면 됩니다.</p>

<p>해서 저 위의 코드는 에러없이 사용할 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Optional Properties</strong></p>

<p>TypeScript interface의 모든 property와 method는 구현하는 클래스 혹은 구현 객체에서 기본적으로 모두 재정의되어야 합니다. 
하지만 <code class="highlighter-rouge">Optional Property</code>( property 중 <code class="highlighter-rouge">?</code> 가 붙어있는 property를 의미합니다. )를 이용하면 해당 property는 
재정의하지 않아도 상관없습니다. 즉, 선택적으로 구현여부를 결정할 수 있는 property가 optional property입니다.</p>

<p>아래의 예를 가지고 살펴보겠습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
    <span class="nl">bookName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">bookAuthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">bookISBN</span><span class="p">?:</span> <span class="nx">string</span><span class="p">;</span>   <span class="c1">// Optional Property</span>

    <span class="nx">getName</span><span class="p">():</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">bookName</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paramBook</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="na">myBook</span><span class="p">:</span> <span class="nx">IBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bookName</span><span class="p">:</span> <span class="s2">"젊은 베르테르의 슬픔"</span><span class="p">,</span>
    <span class="na">bookAuthor</span><span class="p">:</span> <span class="s2">"괴테"</span><span class="p">,</span>

    <span class="na">getName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">bookName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">printBookInfo</span><span class="p">(</span><span class="nx">myBook</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Readonly Properties</strong></p>

<p><code class="highlighter-rouge">readonly</code> keyword를 이용해 객체가 처음 생성되는 시점에만 property들을 수정가능하도록 설정할 수 있습니다.<br />
한번 값이 세팅되면 그 후에는 수정할 수 없게됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Point</span> <span class="p">{</span>
    <span class="nx">readonly</span> <span class="nx">x</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">y</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">p1</span><span class="p">:</span> <span class="nx">Point</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">20</span> <span class="p">};</span>
<span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>    <span class="c1">// 오류 발생</span>
</code></pre></div></div>

<p>TypeScript는 또 <code class="highlighter-rouge">ReadonlyArray&lt;T&gt;</code> 형태의 Array를 지원합니다. 이름에서 의미하는 것처럼 생성된 후에는
Array를 변경할 수 없습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span><span class="p">:</span> <span class="nx">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">roArray</span><span class="p">:</span> <span class="nx">ReadonlyArray</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">;</span>

<span class="nx">roArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>   <span class="c1">// 코드 에러</span>
<span class="nx">roArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>  <span class="c1">// 코드 에러</span>

<span class="nx">arr</span> <span class="o">=</span> <span class="nx">roArray</span><span class="p">;</span>             <span class="c1">// 코드 에러</span>
<span class="nx">arr</span> <span class="o">=</span> <span class="nx">roArray</span> <span class="k">as</span> <span class="nx">number</span><span class="p">[];</span> <span class="c1">// 가능</span>
</code></pre></div></div>

<p>위의 코드도 쉽게 이해할 수 있습니다. 마지막 코드 정도만 주의하면 될 듯 합니다.</p>

<p>이렇게 <code class="highlighter-rouge">readonly</code> property는 <code class="highlighter-rouge">const</code>와 비슷한 역할을 하게됩니다. 단 const는 변수의 선언에
사용되며 readonly는 property 지정에 사용된다는 점만 기억하시면 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Function Types</strong></p>

<p>interface는 function의 type을 지정하는데 사용할 수 있습니다. 이 경우 parameter의 리스트와
리턴타입만을 가지고 있는 함수의 선언과 비슷한 형태를 가지게 됩니다. 아래의 예를 보죠.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">myInterface</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">myAge</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myFunc</span><span class="p">:</span> <span class="nx">myInterface</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">myName</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">myAge</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`이름 : </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">, 나이 : </span><span class="p">${</span><span class="nx">myAge</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">myFunc</span><span class="p">(</span><span class="s2">"홍길동"</span><span class="p">,</span><span class="mi">30</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Indexable Types</strong></p>

<p>JavaScript의 객체를 사용하기 위해서는 일반적으로 <code class="highlighter-rouge">"."</code> operator를 이용합니다. 일반적인 객체지향언어에서
객체를 사용하는 방식이죠. JavaScript는 추가적으로 객체를 사용하는 방법으로 배열방식을 이용할 수 있습니다.
다음과 같이 사용합니다.</p>

<p>아래의 코드는 <code class="highlighter-rouge">JavaScript</code> 코드입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s1">'홍길동'</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s1">'서울'</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">myName</span><span class="p">);</span>           <span class="c1">// "." operator 이용</span>

<span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>       <span class="c1">// 객체의 key값들에 대한 배열 획득</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]]);</span>     <span class="c1">// 배열형식을 이용</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위의 코드는 문법에러가 발생하지 않고 결과도 잘 출력이 됩니다. <code class="highlighter-rouge">obj</code> 객체에 접근할 때
<code class="highlighter-rouge">[ ]</code> 형태를 이용해서 key값에 접근해서 value값을 출력하는 간단한 예제입니다.</p>

<p>하지만 이 코드를 <code class="highlighter-rouge">TypeScript</code>로 작성하면 코드에러가 발생합니다. 해당 파일에 대한 확장자만
<code class="highlighter-rouge">.js</code>에서 <code class="highlighter-rouge">.ts</code>로 변경해보면 <code class="highlighter-rouge">obj[keys[i]</code>에서 다음과 같은 에러가 발생하는 것을 볼 수 있습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Element implicitly has an 'any' type because type 
'{ myName: string; myAddress: string; }' has no index signature.
</code></pre></div></div>

<p>쉽게 말하면 index signature를 이용하지 않았기 때문에 property에 접근할 때 어떤 타입인지를 확인할 수 
없어서 묵시적으로 <code class="highlighter-rouge">any</code> 타입을 이용하게 된다는 의미입니다. 하지만 우리는 TypeScript
compiler 옵션 중 <code class="highlighter-rouge">noImplicitAny</code> 속성을 true로 해 놓았기 때문에 문제가 발생하는 것입니다.
(<code class="highlighter-rouge">noImplicitAny: true</code>가 default로 설정됩니다.)</p>

<p>해결하기 위해서는 컴파일러 옵션을 수정하던지 아니면 interface를 이용하여 index signature를 설정해 type을
명시적으로 알려주면 됩니다.</p>

<p>컴파일러 옵션을 수정하는 방법은 <code class="highlighter-rouge">tsconfig.json</code> 설정에서 <code class="highlighter-rouge">"noImplicitAny": false</code> 옵션을 추가하시면 됩니다. 
하지만 좋지 않습니다. <code class="highlighter-rouge">any</code> 타입은 특별한 이유가 있지 않는 한 가능한 사용하지 않는게 좋고 
명시적으로 타입을 지정해서 사용하셔야 합니다.</p>

<p>좀 더 좋은 해결책은 interface로 index signature를 설정해서 사용하는 것입니다. 이걸 <code class="highlighter-rouge">Indexable Type</code>이라고 합니다.
아래의 코드처럼 interface를 이용해 index signature를 설정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IObj</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">idx</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">IObj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s1">'홍길동'</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s1">'서울'</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">myName</span><span class="p">);</span>           <span class="c1">// "." operator 이용</span>

<span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>       <span class="c1">// 객체의 key값들에 대한 배열 획득</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]]);</span>     <span class="c1">// 배열형식을 이용</span>
<span class="p">}</span>
</code></pre></div></div>

<p>추가적으로 <code class="highlighter-rouge">union type</code>을 이용한 다음의 코드도 살펴보시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IObj</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">idx</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span><span class="p">;</span>
    <span class="p">[</span><span class="nx">index</span><span class="p">:</span> <span class="nx">number</span><span class="p">]:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAddress</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAge</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">IObj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="s1">'홍길동'</span><span class="p">,</span>
    <span class="na">myAddress</span><span class="p">:</span> <span class="s1">'서울'</span><span class="p">,</span>
    <span class="na">myAge</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">myName</span><span class="p">);</span>           <span class="c1">// "." operator 이용</span>

<span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>       <span class="c1">// 객체의 key값들에 대한 배열 획득</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]]);</span>     <span class="c1">// 배열형식을 이용</span>
<span class="p">}</span>
</code></pre></div></div>

<p>마지막으로 앞에서 나온 readonly property를 이용하면 <code class="highlighter-rouge">ReadonlyArray</code>처럼 사용할 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">ReadonlyStringArray</span> <span class="p">{</span>
    <span class="nx">readonly</span> <span class="p">[</span><span class="nx">index</span><span class="p">:</span> <span class="nx">number</span><span class="p">]:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">myArr</span><span class="p">:</span> <span class="nx">ReadonlyStringArray</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"홍길동"</span><span class="p">,</span> <span class="s2">"강감찬"</span><span class="p">];</span>
<span class="nx">myArr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"이순신"</span><span class="p">;</span> <span class="c1">// 코드 오류( readonly )</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Class Types</strong></p>

<p>interface의 가장 일반적인 사용법은 <code class="highlighter-rouge">Java</code>나 <code class="highlighter-rouge">C#</code>언어처럼 class의 구현을 명시적으로 강제하는 것입니다.
아직 class에 대해서는 배우지 않았지만 <code class="highlighter-rouge">Java</code>같은 객체지향 언어를 해 보신 분이라면 쉽게 이해하실거라 생각됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IPerson</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">idx</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nb">Function</span><span class="p">;</span>
    <span class="nl">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAddress</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAge</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="nx">printInfo</span><span class="p">(</span><span class="nx">obj</span><span class="p">:</span><span class="nx">IPerson</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="kr">implements</span> <span class="nx">IPerson</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">index</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nb">Function</span><span class="p">;</span>
    <span class="nl">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAddress</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAge</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">address</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myAddress</span> <span class="o">=</span> <span class="nx">address</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nx">printInfo</span><span class="p">(</span><span class="nx">obj</span><span class="p">:</span> <span class="nx">IPerson</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">t</span><span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">"홍길동"</span><span class="p">,</span> <span class="s2">"서울"</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</code></pre></div></div>

<p>위와 같은 일반적인 경우가 사실은 대부분입니다. ^^; 여기에 추가적인 몇가지만 살펴보겠습니다. 
<a href="./typescript-variable.html" target="_blank">이전 강좌</a>에서 일급함수(<code class="highlighter-rouge">first class function</code>)개념에 대해서 언급했었는데
기억하시나요? 한마디로 요약하자면 <strong>“JavaScript는 함수를 값으로 취급한다”</strong> 입니다. 그래서 함수를
변수에 저장하거나 함수를 다른 함수의 인자로 넘기거나 함수의 리턴값으로 함수를 활용할 수 있는 것이지요.</p>

<p>그래서 다음의 <code class="highlighter-rouge">JavaScript</code>코드는 정상적으로 동작합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PersonFactory</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getInstance</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">construct</span><span class="p">,</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">printInfo</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"이름:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">+</span> <span class="s2">", 나이:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">PersonFactory</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">(</span><span class="nx">Person</span><span class="p">,</span> <span class="s2">"홍길동"</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>위의 코드에서 <code class="highlighter-rouge">Person</code> 생성자를 <code class="highlighter-rouge">PersonFactory.getInstance</code> 함수의 인자로 넘겨서
사용했습니다. <code class="highlighter-rouge">JavaScript</code>에서는 문제없이 잘 동작합니다. 하지만 이 코드를 그대로
<code class="highlighter-rouge">TypeScript</code>에서 작성하면 코드에러가 발생합니다.</p>

<p>일단 타입지정부터 엉망이니 좀 수정해서 보면 <code class="highlighter-rouge">TypeScript</code>코드는 다음과 같게 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PersonFactory</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getInstance</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="na">construct</span><span class="p">:</span><span class="nx">any</span><span class="p">,</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAge</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">printInfo</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"이름:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">+</span> <span class="s2">", 나이:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">PersonFactory</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">(</span><span class="nx">Person</span><span class="p">,</span> <span class="s2">"홍길동"</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>데이터 타입을 적절하게 지정해서 일단 코드 오류는 제거했습니다. 그런데 문제가 하나 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PersonFactory</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getInstance</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="na">construct</span><span class="p">:</span><span class="nx">any</span><span class="p">,</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>위의 코드에서 생성자를 인자로 받아올 때 타입을 어떻게 지정해야 할지 몰라 일단 모든 타입에 대응되는
<code class="highlighter-rouge">any</code>로 설정했습니다. <code class="highlighter-rouge">any</code>로 설정하면 문제없지만 우리는 <code class="highlighter-rouge">any</code>를 사용하지 않습니다. 좀 심하게 표현하자면 <code class="highlighter-rouge">any</code>를
사용할꺼면 굳이 TypeScript를 할 필요가 없습니다. 여하간 이 <code class="highlighter-rouge">any</code>를 없애고 정확한 타입을 명시하려 합니다. 
그런데 어떤 타입을 써야하나요? <code class="highlighter-rouge">any</code>대신 만만한 <code class="highlighter-rouge">Function</code>을 이용해 보면 다음과 같은 오류를 보실 수 있습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cannot use 'new' with an expression whose type lacks a call or construct signature
</code></pre></div></div>

<p>construct signature 없이 <code class="highlighter-rouge">new</code>를 사용할 수 없답니다. 그럼 이 construct signature를 어떻게 만들어야 할까요?
저 위에서는 index signature라는 걸 interface를 이용해서 선언하고 사용했습니다. 기억하시죠? 이와 비슷합니다.
interface를 이용해 생성자의 signature를 지정해 줄 수 있습니다. 다음과 같이 사용합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">IPersonConstructor</span> <span class="p">{</span>
    <span class="k">new</span> <span class="p">(</span><span class="nx">n</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span> <span class="nx">Person</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">PersonFactory</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getInstance</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="na">construct</span><span class="p">:</span><span class="nx">IPersonConstructor</span><span class="p">,</span>
                          <span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span>
                          <span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">construct</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="na">myName</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">myAge</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">printInfo</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"이름:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myName</span> <span class="o">+</span> <span class="s2">", 나이:"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">myAge</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">PersonFactory</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">(</span><span class="nx">Person</span><span class="p">,</span> <span class="s2">"홍길동"</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">printInfo</span><span class="p">();</span>
</code></pre></div></div>

<p>이렇게 사용하는 interface를 <code class="highlighter-rouge">constructor interface</code> 라고 표현하기도 합니다. 중요한 것은
interface로 constructor의 타입을 지정해 줄 수 있다는 것이고 construct signature라는 표현으로
interface내에 정의해서 사용합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> interface의 확장</strong></p>

<p>하나의 interface는 다른 interface로 부터 상속받아서 확장될 수 있습니다. <code class="highlighter-rouge">Java</code>와 유사합니다. 다음의 코드로
이해하시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Shape</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Square</span> <span class="kd">extends</span> <span class="nx">Shape</span> <span class="p">{</span>
    <span class="nl">sideLength</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Square</span><span class="o">&gt;</span><span class="p">{};</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">"blue"</span><span class="p">;</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">sideLength</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">let square = &lt;Square&gt;{};</code> 에서 <code class="highlighter-rouge">&lt;Square&gt;</code> 부분이 어떤것인지 기억하시나요? 그렇습니다. <code class="highlighter-rouge">Type assertions</code>이죠.
위의 코드는 크게 어렵지 않을 듯 보입니다. 하지만 <code class="highlighter-rouge">Java</code>와 다른점이 있습니다. 동시에 여러 interface로 부터 상속을
받을 수 있다는 것이죠. 하지만 여기서 상속이라는 표현은 맞지 않습니다. 상속은 객체지향 언어에서 나오는 특성입니다.
여기서는 단지 interface의 확장일 뿐입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Shape</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">PenStroke</span> <span class="p">{</span>
    <span class="nl">penWidth</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Square</span> <span class="kd">extends</span> <span class="nx">Shape</span><span class="p">,</span> <span class="nx">PenStroke</span> <span class="p">{</span>
    <span class="nl">sideLength</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Square</span><span class="o">&gt;</span><span class="p">{};</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">"blue"</span><span class="p">;</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">sideLength</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">penWidth</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">;</span>
</code></pre></div></div>

<hr />

<p><strong>interface는 type check를 위해 사용되기 때문에 interface로는 객체를 생성할 수 없습니다.</strong></p>

<p>일단 이 정도만 알아두어도 될 듯 보입니다. 
내용이 생각보다 많은데 생각보다 많이 어렵지는 않습니다. 단지 헷갈릴 뿐이죠 ^^
여러번 정독하면서 쓰임새를 알아두고 실제 코드에서 활용하면서 익히셔야 합니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">이 포스트의 내용은 아래의 사이트를 참조했습니다. 조금 더 자세한 사항을 알고 싶으시면
    해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="http://www.typescriptlang.org" target="_blank">TypeScript Official HomePage</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Babel을 사용해보자</title>
	  <link>https://moon9342.github.io/javascript-babel</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-24T02:30:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-babel</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>아무 생각없이 <code class="highlighter-rouge">Babel</code>을 쓰고 있지만 예전부터 궁금했던 Babel이란 이름이 내가 알고 있는 그 바벨탑의 바벨인가? 
라는 의문에 이름의 근원을 찾아보고 이왕 찾아본 김에 Babel의 간단한 사용법 정도만 정리해 보도록 하겠습니다.
( 도데체 이런게 왜 궁금한건대? )</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel이란 이름의 기원</strong></p>

<p>결론적으로 <a href="https://babeljs.io/" target="_blank">Babel Official HomePage</a> 에서는 이름에 대한 근원을 찾을수는 없었습니다. 
어딘가에 숨어있는지는 모르겠지만요. 여하간 Babel은 성경 영어로 구약성서 창세기에 그 근원을 두고 있습니다.
( 왠지 산으로 가는 느낌입니다. )</p>

<p>노아의 홍수 이후로 인간은 다시 번성하기 시작했고 그 당시에는 전 세계의 언어가 하나였다고 합니다. 하나님은 인간들에게
흩어져 살 것을 명하셨지만, 사람들은 하나님의 말씀에 불순종하여 <code class="highlighter-rouge">Shinar</code> 라는 곳에 모여 살았답니다. 그리고 그들은
자신들을 위해 하나의 도시를 건설하고 하늘에까지 닿는 높은 탑도 같이 세워 자신들의 이름을 높이고 흩어지지 않겠다는 의미로
하나의 높은 탑을 건설하게 되었는데 이게 그 <code class="highlighter-rouge">Babel</code>(바벨탑)이랍니다.</p>

<p>하지만 인간들의 그러한 동기를 아시는 하나님께서 그들이 탑을 세우지 못하고 전 세계로 흩어지게끔 그들의 언어를 여러개로
나누셔서 서로간의 의사소통이 되지 않도록 하셨답니다. 서로 말이 통하지 않자 탑 공사는 중단되고 결국 언어가 맞는 사람끼리 뿔뿔히
흩어져 살게되었다라는 이야기지요.</p>

<p>그래서 <code class="highlighter-rouge">Babel</code>의 사전적 의미는 “와글와글”, “바벨탑”, “거대한 탑” 의 의미를 가지게 되었다고 합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel의 목적</strong></p>

<p>Babel은 JavaScript transpiler입니다. 공식 홈에는 compiler라고 표현했지만 사실 compiler보다는 transpiler라는 용어가
더 맞지 않나 싶습니다. 여하간 Babel의 입력은 JavaScript이고 출력 역시 JavaScript입니다.</p>

<p>잘 알다시피 <code class="highlighter-rouge">ES5</code> 표준은 2009년도에 표준화되었습니다. 그리고 한동안 변경이 없다가 2015년에 <code class="highlighter-rouge">ES6</code>가 표준화가 됩니다.
현재 시점은 <code class="highlighter-rouge">ES7</code> 이 최신표준이지만 아직까지 ES6가 대세라고 볼 수 있습니다. 이 ES6에 들어와서는 여러가지 획기적인
변화가 생기게 되었습니다.</p>

<p>변화된 내용 중 대표적인 것들은 다음과 같습니다.</p>

<ul>
  <li><code class="highlighter-rouge">class</code></li>
  <li><code class="highlighter-rouge">arrow function</code></li>
  <li><code class="highlighter-rouge">template string</code></li>
  <li><code class="highlighter-rouge">generator</code></li>
  <li><code class="highlighter-rouge">destructuring</code></li>
  <li><code class="highlighter-rouge">let &amp; const</code></li>
</ul>

<p>문제는 이런 최신의 문법들로 쓰여진 JavaScript 코드를 런타임 환경인 <code class="highlighter-rouge">browser</code>가 인식하고 실행할 수 있는냐는 것입니다. 
browser는 최신 ECMAScript 문법을 다 지원하지 못하거든요. 특히 구형 browser나 <code class="highlighter-rouge">IE</code>같은 경우는 그 정도가 심합니다.</p>

<p>하지만 생산성과 유지보수성등의 이유로 코드자체는 ECMAScript 최신버전으로 구현하는게 당연히 좋습니다. 즉, 구현과 
실행환경과의 버전차이가 생기게 됩니다. Babel은  ECMAScript 6,7 으로 작성된 코드를 browser가 인식할 수 잇는 문법(ES5)으로
변환시켜주는 transpiler입니다.</p>

<p>한가지 주의해야 할 점은 Babel을 사용한다고 해서 모든 최신의 JavaScript함수를 다 사용할 수 있는건 아닙니다. Babel은
문법만 변환시켜 주는 역할만 할 뿐입니다. 따라서 프로그램이 처음에 시작될 때 browser에서 지원하지 않는 함수를 검사해 처리해주는
작업이 이루어져야 하고 이 부분은 <code class="highlighter-rouge">babel-ployfill</code>이 runtime에 담당하게 됩니다. ( 이 기능을 사용하기 위해서는 
추가적인 설정이 필요합니다. )</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel의 사용</strong></p>

<p>자 그럼 실제 사용하는 예를 알아보도록 하겠습니다.</p>

<p><code class="highlighter-rouge">Babel</code>역시 다른 node module과 마찬가지로 npm으로 설치하면 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">preset</span><span class="o">-</span><span class="nx">es2015</span>
</code></pre></div></div>

<p>package.json에 다음과 같이 npm script 작성</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="s2">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel babelTest.js -d lib"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>ES6로 다음과 같은 코드 작성하고 <code class="highlighter-rouge">babelTest.js</code>로 저장합니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">Student</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>다음과 같이 <code class="highlighter-rouge">.babelrc</code> 파일을 작성합니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"es2015"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>다음과 같이 npm script를 실행시켜 lib폴더에 생성된 컴파일된 결과 파일을 확인합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">build</span>
</code></pre></div></div>

<p>결과로 생성된 <code class="highlighter-rouge">ES5</code> 파일의 내용</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">_classCallCheck</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">Constructor</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">instance</span> <span class="k">instanceof</span> <span class="nx">Constructor</span><span class="p">))</span> <span class="p">{</span> 
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">"Cannot call a class as a function"</span><span class="p">);</span> 
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>


<span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello "</span> <span class="o">+</span> <span class="nx">myName</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">Student</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Student</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>여기서는 <code class="highlighter-rouge">Babel</code>이 어떤 역할을 하고 어떻게 사용하는 것인지에 대해서 간단하게 알아보았습니다.</p>

<p>이 포스트의 내용은 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>JavaScript의 strict mode란 무엇인가?</title>
	  <link>https://moon9342.github.io/javascript-use-strict</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-24T01:35:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-use-strict</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p><code class="highlighter-rouge">"use strict"</code>는 ES5에서 새롭게 나온 directive입니다. 실제 수행 문장이 아니라 literal expression이기 
때문에 이전 버전의 JavaScript에서는 무시됩니다.</p>

<p>일반적으로 JavaScript 코드 최 상단에 이 “use strict”가 위치하는데 이 의미에 대해서 간단하게 
정리해 봤습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> “use strict”를 써야하는 이유</strong></p>

<p>“use strict”의 목적은 우리의 코드가 <code class="highlighter-rouge">strict mode</code>로 실행되게끔 지시하는 것입니다. 
여기서 말하는 strict mode란 프로그램 실행 시 예외를 발생시킬 만한 몇가지 특이한 동작을 
수행할 수 없도록 엄격한 제한이 걸려있는 실행 <code class="highlighter-rouge">context</code>를 지칭합니다. 
즉, 일반적으로 동작하는 코드를 “use strict”를 이용하면 에러가 발생할 수 있다는 말이지요.</p>

<p>“use strict”는 함수별로 따로 지정할 수 있습니다. 즉, 함수내부에 “use strict”를 선언하면
해당 함수는 strict mode로 실행되게 됩니다.</p>

<p>몇가지 예를 들어보죠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>        <span class="c1">// x가 선언되지 않았기 때문에 error 발생</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>       <span class="c1">// strict mode가 아니기 때문에 에러 아님.</span>

<span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>   <span class="c1">// y가 선언되지 않았기 때문에 에러 발생</span>
<span class="p">}</span>

<span class="nx">myFunction</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>

<span class="k">delete</span> <span class="nx">x</span><span class="p">;</span>   <span class="c1">// strict mode에서는 delete를 사용할 수 없다.   </span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="kr">public</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">;</span>   <span class="c1">// strict mode에서는 키워드로 변수명을 쓸수 없다.</span>
</code></pre></div></div>

<p>그 외의 예로는 함수의 매개변수의 리스트에서 중복된 부분이 있을 때 오류를 발생시키고 동일한 라이브러리를 중복해서
로딩하는 경우 에러를 발생시킵니다. (예를 들면, <code class="highlighter-rouge">jQuery</code> library 중복로딩 )</p>

<p>결론적으로 잠재적인 오류가 발생할 수 있는 여지를 막아주도록 코드에 대한 문법 사항을 엄걱하게 지키도록 하는
directive정도로 인식하시면 될 듯 합니다.</p>

<blockquote>
  <p>결론은 <strong>고민하지 말고 무조건 써야된다!!</strong> 입니다. ^^</p>
</blockquote>

<p>이 포스트의 내용은 <a href="https://www.w3schools.com/js/js_strict.asp" target="_blank">w3schools.com</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

<p>End.</p>

<hr />


	  ]]></description>
	</item>


</channel>
</rss>
