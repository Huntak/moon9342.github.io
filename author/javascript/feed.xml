<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>Development & Technical Training</description>
   <language>en-uk</language>
   
      
            
      
            
               
               
                  <managingEditor>JavaScript</managingEditor>
            
      
            
      
            
      
            
      
   
   <title>
   <![CDATA[ JavaScript - IT Blog ]]>
   </title>
   <description>
   <![CDATA[ Development & Technical Training ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>JavaScript - IT Blog</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/author/javascript/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Front-End 발전 역사와 개발 생태계</title>
	  <link>https://moon9342.github.io/front-end-ecosystem</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-29T13:31:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/front-end-ecosystem</guid>
	  <description><![CDATA[
	     <p><img src="assets/built/images/tldr-white-logo.png" alt="tldr" class="myTLDRStyle" /></p>

<p>이번 포스트는 과거 JavaScript 탄생부터 시작해서 어떻게 발전해왔는지에 대한 내용과 <br />
현재 Front End 개발에 있어서 무엇을 알아야 하는 지에 대한 전반적인 기술 상황에 대해서 알아보겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript 탄생</strong></p>

<p>JavaScript라는 언어의 역사는 저의 <a href="./javascript-history.html" target="_blank">다른 포스트</a>에서도 볼 수 있지만 
여기서도 간단하게 언급하고 넘어가겠습니다.</p>

<p><code class="highlighter-rouge">JavaScript</code>언어의 역사는 1995년 Netscape사의 Brendan Eich(브랜든 아이크)에 의해 개발된 <code class="highlighter-rouge">Mocha</code>라는 언어부터 시작됩니다.
이 Mocha라는 언어는 <strong>“Prototype의 개념과 Functional Language(함수형 언어)의 특성을 가지고 Web에 동적으로 활용할 수 있는 
언어를 만들어보자”</strong> 라는 취지로 2주일 이라는 굉장히 짧은 기간안에 만들어졌습니다.</p>

<p>추후에 <strong>Mocha -&gt; LiveScript -&gt; JavaScript</strong>로 개명되었고 ECMA에 <code class="highlighter-rouge">ECMA-262</code> 기술규격으로 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화를
진행하게 됩니다. 이에 대응해 1996년 MicroSoft 측에서는 <code class="highlighter-rouge">JScript</code>라는 걸 만들어내서 자사의 IE 3안에 포함시켜 제공하기 시작했습니다.</p>

<p>이런 JavaScript는 여러가지 문제점을 내포하고 있었는데 가장 큰 문제를 꼽자면</p>

<ul>
  <li>구현의 어려움</li>
  <li>언어의 모호성</li>
  <li>Cross Browsing의 한계</li>
</ul>

<p>정도를 들 수 있습니다. 즉, 사용자 입력값을 검사하는 용도, 사용자의 이벤트를 감지해서 처리하는 용도로는 사용할 수 있지만 
언어 자체가 가지고 있는 근본적인 문제때문에 사용이 힘들었습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 구세주의 등장 - jQuery</strong></p>

<p>이 때 구세주가 등장합니다. 우리가 잘 알고 있는 <code class="highlighter-rouge">jQuery</code> library입니다.</p>

<p>jQuery는 open source javascript library로 순수 javascript가 가지고 있었던 DOM처리의 어려움과 Cross Browsing에 대한 issue를
해결하면서 <strong>JavaScript의 대표적 library</strong>로 사용되게 되었습니다. jQuery로 인해 JavaScript가 조금은 쓸만한 언어로 여기지면서
사용되기 시작했습니다.</p>

<p>그러면서 그냥 그냥 아주 소소하게 client web browser안에서 JavaScript 코드와 jQuery 코드가 이용되었던 거지요. 특별히 중요하지도 않은
단위코드 위주로 사용이 되는 그런 수준이었습니다. 그러면서 우리 기억에도 “알면 좋고 몰라도 상관없는 언어”로 인식되었습니다.</p>

<p>그렇게시간은 흘러갑니다.!!</p>

<p>1997년 <code class="highlighter-rouge">ECMAScript</code>의 초판이 나오게 됩니다. <code class="highlighter-rouge">ES1</code>이라고 합니다. 그 후 1999년에 <code class="highlighter-rouge">ES3</code>가 나오게 됩니다. 여기까지 하고 한동안
ECMAScript 표준은 쿨쿨 잠을 자게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 다시 JavaScript에 날개를 달아보자 - HTML5</strong></p>

<p>1999년 12월 <code class="highlighter-rouge">W3C</code>(World Wide Web Consortium)에서 하나의 발표를 합니다. 아시다시피 W3C는 <code class="highlighter-rouge">HTML</code>과 <code class="highlighter-rouge">CSS</code>의 표준을 
관장하는 기구입니다. 이때까지 우리가 사용하는 HTML의 버전은 4.01버전이었습니다. W3C는 이 버전을 마지막으로 더 이상 
HTML의 버전업은 없을 것이라고 공표하게 됩니다. 그때까지 잘 사용해왔던 HTML을 왜 버전업하지 하지 않겠다고 했을까요?</p>

<p>여러가지 이유가 있지만 프로그래밍 언어의 측면에서 바라보면 HTML이란 언어는 다음과 같은 한계점이 있습니다.</p>

<ul>
  <li><strong>정형성 : HTML언어는 정형성이 없기때문에 유지보수에 적합하지 않다.</strong></li>
  <li><strong>확장성 : 정해진 Tag만 이용하기 때문에 언어자체에 대한 기능적 확장이 어렵다.</strong></li>
</ul>

<p>W3C는 저 두가지 이유를 들어 HTML언어를 이대로 끌고 가기 보다는 좀 더 다른 수단을 강구해야 겠다고 판단합니다. W3C의 선택은
바로 <code class="highlighter-rouge">XML</code>의 도입이었습니다. 즉, HTML이 가지는 두가지 문제점을 해결할 수 있는 XML을 도입해서 새로운 Web언어의 표준을
끌고 나갈 생각이었습니다. 그 결과 2000년 들어오면서 HTML과 XML이 결합된 새로운 표준인 <code class="highlighter-rouge">XHTML 1.0</code>이 발표되게 됩니다.</p>

<p>W3C의 이런 의도와는 다르게 몇몇개의 회사들이 모여서 조금 다른 접근을 모색합니다. XML을 도입하지 말고 순수하게 HTML을 기능을
버전업시킬 수 있는 방법을 찾기 시작한 것이죠. 그래서 <code class="highlighter-rouge">WHATWG</code>(Web Hypertext Application Technology Working Group)이라는 
Working Group이 만들어지고 이 안에서 기존의 HTML을 발전시킬 방법을 연구하게 됩니다. 
( 사실 여기서 할 말이 많기 한데 자꾸 산으로 가는 느낌이라 적당히 짜르겠습니다. ) 
이 WG에서 나온것이 바로 현재의 표준인 <code class="highlighter-rouge">HTML5</code>입니다. HTML을 이용해서 Web Application을 만들자는 취지입니다. 
이 HTML5안에 Client Web Application을 작성할 수 있는 API가 포함되어 있는데 이게 <code class="highlighter-rouge">JavaScript</code>로
되어 있습니다. 결국 HTML5가 issue화 되면서 JavaScript의 위상도 조금씩 더 올라가게 됩니다.</p>

<p>그래서인지 쿨쿨 잠을자던 ECMAScript 개정판(<code class="highlighter-rouge">ES5</code>)이 2009년에 등장합니다. 참고로 4판(<code class="highlighter-rouge">ES4</code>)은 버려졌습니다. 이제 슬슬
JavaScript에 대한 발전이 시작됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript의 획기적 전환점 - Node.js</strong></p>

<p>2013년 <code class="highlighter-rouge">Node.js</code>가 출시됩니다. 아무리 HTML5라고 해도 이때까지의 JavaScript는 Browser안에서 동작하는 언어였습니다.
우리가 알고 있는 <code class="highlighter-rouge">Java</code>, <code class="highlighter-rouge">C#</code>과 같은 언어가 될 수 없는 태생적 한계가 있는거죠. 이런 browser에 갇힌 JavaScript를
browser 외부로 탈출하게끔 만들어준 일등공신이 바로 Node.js입니다. 결국 JavaScript로 다른 언어처럼 OS위에서 동작하는
일반 application을 작성할 수 있는 길이 열린것이고 그에 따라 언어의 위상이 완전히 변했습니다.</p>

<p>그에 발맞춰 ECMAScript도 빠르게 변화하기 시작했습니다. 2015년에 ECMAScript 2015(<code class="highlighter-rouge">ES6</code>)가 등장하면서 JavaScript 언어자체에
아주 큰 변화들이 많이 생겼습니다. 현재 ECMAScript 2016(<code class="highlighter-rouge">ES7</code>)까지 나온 상태입니다. 조금 지나면 <code class="highlighter-rouge">ES8</code>이 표준화되어서 나오겠네요.
거의 1년마다 새로운 배포판이 나올정도로 빠르게 변화하면서 언어적 측면에서 가지고 있던 많은 문제점들을 극복하려고 노력하고 있습니다.</p>

<p>현재(2018년 1월) 대부분의 browser들은 <code class="highlighter-rouge">ES6</code>를 지원하고 있습니다. 
<a href="https://kangax.github.io/compat-table/es6/" target="_blank">여기</a>에 접속해 보시면 특정 browser에 대해 
각 ECMAScript의 버전 호환성을 보실 수 있습니다.</p>

<blockquote>
  <p><strong>이제 IE는 고만쓰도록 해요. 제발….</strong></p>
</blockquote>

<p>아직 완벽하게 Cross Browsing이 안되는데 어떻게 하느냐에 대한 문제는 <code class="highlighter-rouge">Babel</code>, <code class="highlighter-rouge">TypeScript</code>와 같은 
transpiler를 이용해서 해결할 수 있습니다. 
Babel, TypeScript는 ES6(ES7) 문법으로 쓰여있는 JavaScript code를 ES5 형태의 JavaScript로 변환시켜주기 때문에 
IE에서 ES6지원이 안됨에도 불구하고 ES5로 변환해서 사용할 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 변화의 속도가 너무 빠름</strong></p>

<p>그런데 문제는 기술의 발전 속도가 너무 빠르다는데 있습니다. 또한 알아야 할게 한두 가지가 아니구요. 
과거 Back End에서 사용했던 프로그래밍 기술과 여러가지 개발 툴의 개념들이 다 Front End로 넘어왔기 때문입니다.
너무 많은기술들이 빠르게 생기고 빠르게 사라지고 있습니다.</p>

<p>사실 2-3년전에 자주 사용했던 JavaScript Library와 Framework들 중 많은 것들이 이미 다른 것으로 대체되었습니다. 
그렇다고 손 놓고 있을 순 없으니 현재 상태에서 우리가 Front End 개발을 하기 위해 필수적으로 알아야 하는 것 몇가지만
살펴보도록 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 이것정도는 알고 가자</strong></p>

<ul>
  <li><strong>Package Manager</strong> : <code class="highlighter-rouge">NPM</code>, Yarn</li>
</ul>

<p><img src="assets/built/images/npm-vs-yarn.png" alt="npm vs yarn" /></p>

<p>외부 라이브러리를 사용할 경우 해당 라이브러리를 설치, 삭제, 의존성 관리등을 해야 하는데 이를 위한 도구가 
몇몇 존재합니다. 그중 하나만 하자면 당연 <code class="highlighter-rouge">npm</code>입니다. Node Package Manager의 약자이고 Node.js를 살짝 맛보시면
npm이 어떻게 동작하는지 아실 수 있습니다. 굳이 Node.js에 대해서 학습할 필요는 없습니다. 당연히 알면 좋지만요.</p>

<ul>
  <li><strong>Transpiler</strong> : Babel, <code class="highlighter-rouge">TypeScript</code></li>
</ul>

<p><img src="assets/built/images/typescript-vs-babel.jpg" alt="babel vs typescript" />
<strong>이미지 출처 : (http://news.softpedia.com/news/angular-2-survey-shows-typescript-s-popularity-among-developers-490695.shtml)</strong></p>

<p>Cross Browsing을 위한 Transpiler입니다. 비교 대상은 아닙니다. 둘 다 알아둘 필요는 있지만 
저는 <code class="highlighter-rouge">TypeScript</code>는 반드시 해야 한다고 생각합니다. 앞으로 TypeScript는 더 발전할 듯 보이거든요. 
하지만 배우기 쉽지 않습니다. 언어적 측면을 파고 들면 내용이 꽤나 많습니다.
다행히 TypeScript는 ECMAScript의 superset이니 ECMAScript 공부한다고 생각하시면 속 편합니다.</p>

<p>또한 제 개인적인 생각과는 반대로 TypeScript언어의 단점도 분명히 존재합니다. 엄격한 type checking덕분에
JavaScript가 가지는 프로그래밍의 유연함이 많이 떨어진다는 것이죠.</p>

<ul>
  <li><strong>자동화 도구</strong> : Grunt, <code class="highlighter-rouge">Gulp</code></li>
</ul>

<p><img src="assets/built/images/grunt-vs-gulp.jpg" alt="Grunt vs Gulp" /></p>

<p>빌드, 테스트, 배포등을 위한 자동화 도구입니다. 과거에는 Grunt를 많이 사용했지만 현재는 Gulp인듯 합니다. 
시간 좀 지나면 Gulp도 Grunt와 마찬가지로 역사속으로 사라지게 되겠지만 지금은 Gulp가 대세입니다.</p>

<ul>
  <li><strong>module bundler</strong> : <code class="highlighter-rouge">webpack</code>, rollup</li>
</ul>

<p><img src="assets/built/images/webpack-vs-rollup.png" alt="webpack vs rollup" /></p>

<p>코드 재사용을 위한 모듈화 도구들과 bundler 역시 여러가지 있는데 요즘 많이 사용하는 건 <code class="highlighter-rouge">webpack</code>입니다.
ES6 들어오면서 언어적 차원에서 Module을 지원하기 시작했고 이런 Module들을 하나로 모아 Packaing하는 작업이
필요하게 되었습니다. 이를 위한 도구 역시 발전을 하고 있구요. 과거에는 Common.js, Require.js를 이용하여
처리했다면 최근에는 webpack, rollup을 이용하여 처리합니다.</p>

<ul>
  <li>Framework &amp; Library : <code class="highlighter-rouge">Angular</code>, <code class="highlighter-rouge">React</code>, <code class="highlighter-rouge">Vue.js</code></li>
</ul>

<p>우리의 목적은 사실 저 위의 3가지를 배우는 것입니다. 각기 나름대로의 장점과 특징들을 가지고 있습니다. 개인적으로는 
블로그내에 저 세가지의 강좌를 개설하는게 2018년 상반기의 블로그 목표입니다. 대세는 Angular이지만 React의 성장세
역시 가히 폭발적입니다. 아직까지(2018년 1월기준) Vue.js는 Angular와 React 만큼의 성장세는 보이지 않고 있지만 이 역시 어떻게 될지는
모를일이죠</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 정리</strong></p>

<p>위에서 <strong>“이것정도는 알고가자”</strong>라고 했지만 그 내용을 전부 다 알고 있으면 상당한 경험과 실력을 가진
Front End 개발자일 것입니다. 또 위에 포함을 안했지만  <code class="highlighter-rouge">Git</code>같은 것은 기본적으로 숙지해야 할 것이구요. 할게 너무 많네요
천천히 하나씩 해보도록 하죠 머…</p>

<p>그리고 <strong>“이것정도는 알고가자”</strong>에서 제가 강조한 것들은 제가 현재 사용하는 것들입니다.
그것들이 더 좋다는 보장은 어디에도 없습니다. 자기 손에 익숙한게 최고입니다. ^^</p>

	  ]]></description>
	</item>

	<item>
	  <title>Babel을 사용해보자</title>
	  <link>https://moon9342.github.io/javascript-babel</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-24T02:30:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-babel</guid>
	  <description><![CDATA[
	     <p><img src="assets/built/images/tldr-white-logo.png" alt="tldr" class="myTLDRStyle" /></p>

<p>아무 생각없이 <code class="highlighter-rouge">Babel</code>을 쓰고 있지만 예전부터 궁금했던 Babel이란 이름이 내가 알고 있는 그 바벨탑의 바벨인가? 
라는 의문에 이름의 근원을 찾아보고 이왕 찾아본 김에 Babel의 간단한 사용법 정도만 정리해 보도록 하겠습니다.
( 도데체 이런게 왜 궁금한건대? )</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel이란 이름의 기원</strong></p>

<p>결론적으로 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a> 에서는 이름에 대한 근원을 찾을수는 없었습니다. 
어딘가에 숨어있는지는 모르겠지만요. 여하간 Babel은 성경 영어로 구약성서 창세기에 그 근원을 두고 있습니다.
( 왠지 산으로 가는 느낌입니다. )</p>

<p>노아의 홍수 이후로 인간은 다시 번성하기 시작했고 그 당시에는 전 세계의 언어가 하나였다고 합니다. 하나님은 인간들에게
흩어져 살 것을 명하셨지만, 사람들은 하나님의 말씀에 불순종하여 <code class="highlighter-rouge">Shinar</code> 라는 곳에 모여 살았답니다. 그리고 그들은
자신들을 위해 하나의 도시를 건설하고 하늘에까지 닿는 높은 탑도 같이 세워 자신들의 이름을 높이고 흩어지지 않겠다는 의미로
하나의 높은 탑을 건설하게 되었는데 이게 그 <code class="highlighter-rouge">Babel</code>(바벨탑)이랍니다.</p>

<p>하지만 인간들의 그러한 동기를 아시는 하나님께서 그들이 탑을 세우지 못하고 전 세계로 흩어지게끔 그들의 언어를 여러개로
나누셔서 서로간의 의사소통이 되지 않도록 하셨답니다. 말이 안통하자 탑 공사는 중단되고 결국 언어가 맞는 사람끼리 뿔뿔히
흩어져 살게되었다라는 이야기지요.</p>

<p>그래서 <code class="highlighter-rouge">Babel</code>의 사전적 의미는 “와글와글”, “바벨탑”, “거대한 탑” 의 의미를 가지게 되었다고 합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel의 목적</strong></p>

<p>Babel은 JavaScript transpiler입니다. 공식 홈에는 compiler라고 표현했지만 사실 compiler보다는 transpiler라는 용어가
더 맞지 않나 싶습니다. 여하간 Babel의 입력은 JavaScript이고 출력 역시 JavaScript입니다.</p>

<p>잘 알다시피 <code class="highlighter-rouge">ES5</code> 표준은 2009년도에 표준화되었습니다. 그리고 한동안 변경이 없다가 2015년에 <code class="highlighter-rouge">ES6</code>가 표준화가 됩니다.
현재 시점은 <code class="highlighter-rouge">ES7</code> 이 최신표준이지만 아직까지 ES6가 대세라고 볼 수 있습니다. 이 ES6에 들어와서는 여러가지 획기적인
변화가 생기게 되었습니다.</p>

<p>변화된 내용 중 대표적인 것들은 다음과 같습니다.</p>

<ul>
  <li><code class="highlighter-rouge">class</code></li>
  <li><code class="highlighter-rouge">arrow function</code></li>
  <li><code class="highlighter-rouge">template string</code></li>
  <li><code class="highlighter-rouge">generator</code></li>
  <li><code class="highlighter-rouge">destructuring</code></li>
  <li><code class="highlighter-rouge">let &amp; const</code></li>
</ul>

<p>문제는 이런 최신의 문법들로 쓰여진 JavaScript 코드를 런타임 환경인 <code class="highlighter-rouge">browser</code>가 인식하고 실행할 수 있는냐는 것입니다. 
browser는 최신 ECMAScript 문법을 다 지원하지 못하거든요. 특히 구형 browser나 <code class="highlighter-rouge">IE</code>같은 경우는 그 정도가 심합니다.</p>

<p>하지만 생산성과 유지보수성등의 이유로 코드자체는 ECMAScript 최신버전으로 구현하는게 당연히 좋습니다. 즉, 구현과 
실행환경과의 버전차이가 생기게 됩니다. Babel은  ECMAScript 6,7 으로 작성된 코드를 browser가 인식할 수 잇는 문법(ES5)으로
변환시켜주는 transpiler입니다.</p>

<p>한가지 주의해야 할 점은 Babel을 사용한다고 해서 모든 최신의 JavaScript함수를 다 사용할 수 있는건 아닙니다. Babel은
문법만 변환시켜 주는 역할만 할 뿐입니다. 따라서 프로그램이 처음에 시작될 때 browser에서 지원하지 않는 함수를 검사해 처리해주는
작업이 이루어져야 하고 이 부분은 <code class="highlighter-rouge">babel-ployfill</code>이 runtime에 담당하게 됩니다. ( 이 기능을 사용하기 위해서는 
추가적인 설정이 필요합니다. )</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Babel의 사용</strong></p>

<p>자 그럼 실제 사용하는 예를 알아보도록 하겠습니다.</p>

<p><code class="highlighter-rouge">Babel</code>역시 다른 node module과 마찬가지로 npm으로 설치하면 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">preset</span><span class="o">-</span><span class="nx">es2015</span>
</code></pre></div></div>

<p>package.json에 다음과 같이 npm script 작성</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="s2">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel babelTest.js -d lib"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>ES6로 다음과 같은 코드 작성하고 <code class="highlighter-rouge">babelTest.js</code>로 저장합니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">Student</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>다음과 같이 <code class="highlighter-rouge">.babelrc</code> 파일을 작성합니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"es2015"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>다음과 같이 npm script를 실행시켜 lib폴더에 생성된 컴파일된 결과 파일을 확인합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">build</span>
</code></pre></div></div>

<p>결과로 생성된 <code class="highlighter-rouge">ES5</code> 파일의 내용</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">_classCallCheck</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">Constructor</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">instance</span> <span class="k">instanceof</span> <span class="nx">Constructor</span><span class="p">))</span> <span class="p">{</span> 
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">"Cannot call a class as a function"</span><span class="p">);</span> 
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>


<span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello "</span> <span class="o">+</span> <span class="nx">myName</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">Student</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Student</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>여기서는 <code class="highlighter-rouge">Babel</code>이 어떤 역할을 하고 어떻게 사용하는 것인지에 대해서 간단하게 알아보았습니다.</p>

<p>이 포스트의 내용은 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>JavaScript의 strict mode란 무엇인가?</title>
	  <link>https://moon9342.github.io/javascript-use-strict</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-24T01:35:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-use-strict</guid>
	  <description><![CDATA[
	     <p><img src="assets/built/images/tldr-white-logo.png" alt="tldr" class="myTLDRStyle" /></p>

<p><code class="highlighter-rouge">"use strict"</code>는 ES5에서 새롭게 나온 directive입니다. 실제 수행 문장이 아니라 literal expression이기 
때문에 이전 버전의 JavaScript에서는 무시됩니다.</p>

<p>일반적으로 JavaScript 코드 최 상단에 이 “use strict”가 위치하는데 이 의미에 대해서 간단하게 
정리해 봤습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> “use strict”를 써야하는 이유</strong></p>

<p>“use strict”의 목적은 우리의 코드가 <code class="highlighter-rouge">strict mode</code>로 실행되게끔 지시하는 것입니다. 
여기서 말하는 strict mode란 프로그램 실행 시 예외를 발생시킬 만한 몇가지 특이한 동작을 
수행할 수 없도록 엄격한 제한이 걸려있는 실행 <code class="highlighter-rouge">context</code>를 지칭합니다. 
즉, 일반적으로 동작하는 코드를 “use strict”를 이용하면 에러가 발생할 수 있다는 말이지요.</p>

<p>“use strict”는 함수별로 따로 지정할 수 있습니다. 즉, 함수내부에 “use strict”를 선언하면
해당 함수는 strict mode로 실행되게 됩니다.</p>

<p>몇가지 예를 들어보죠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>        <span class="c1">// x가 선언되지 않았기 때문에 error 발생</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>       <span class="c1">// strict mode가 아니기 때문에 에러 아님.</span>

<span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>   <span class="c1">// y가 선언되지 않았기 때문에 에러 발생</span>
<span class="p">}</span>

<span class="nx">myFunction</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>

<span class="k">delete</span> <span class="nx">x</span><span class="p">;</span>   <span class="c1">// strict mode에서는 delete를 사용할 수 없다.   </span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="kr">public</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">;</span>   <span class="c1">// strict mode에서는 키워드로 변수명을 쓸수 없다.</span>
</code></pre></div></div>

<p>그 외의 예로는 함수의 매개변수의 리스트에서 중복된 부분이 있을 때 오류를 발생시키고 동일한 라이브러리를 중복해서
로딩하는 경우 에러를 발생시킵니다. (예를 들면, <code class="highlighter-rouge">jQuery</code> library 중복로딩 )</p>

<p>결론적으로 잠재적인 오류가 발생할 수 있는 여지를 막아주도록 코드에 대한 문법 사항을 엄걱하게 지키도록 하는
directive정도로 인식하시면 될 듯 합니다.</p>

<blockquote>
  <p>결론은 <strong>고민하지 말고 무조건 써야된다!!</strong> 입니다. ^^</p>
</blockquote>

<p>이 포스트의 내용은 <a href="https://www.w3schools.com/js/js_strict.asp" target="_blank">w3schools.com</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>JavaScript History</title>
	  <link>https://moon9342.github.io/javascript-history</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-14T15:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-history</guid>
	  <description><![CDATA[
	     <p><img src="assets/built/images/tldr-white-logo.png" alt="tldr" class="myTLDRStyle" /></p>

<p>아마도 <code class="highlighter-rouge">JavaScript</code>, <code class="highlighter-rouge">ECMAScript</code>, <code class="highlighter-rouge">TypeScript</code>라는 용어를 많이 들어봤을 텐데 정확하게 어떤 차이가 있는지
이번 포스트에서 간단하게 정리를 해 보겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript</strong></p>

<p>과거부터 Web 작업을 해 오신 분들은 아시겠지만 JavaScript의 과거 인식은 “알면 좋고 몰라도 상관없는 딱 그 수준의 언어” 
였습니다. 하지만 개발 방법론이 진화하면서 JavaScript기반의 Library나 Framework의 필요성이 증대되고 그에 따라
JavaScript라는 언어의 위상도 상당히 올라갔습니다. ( <code class="highlighter-rouge">HTML5</code>와 <code class="highlighter-rouge">Node.js</code>의 역할이 지대했지요. )</p>

<p>JavaScript라는 언어의 전신은 1995년 Netscape사에서 Brendan Eich가 <code class="highlighter-rouge">Mocha</code>라는 이름으로 만들어낸 스크립트 
언어입니다. 개발을 완료하고 후에 <code class="highlighter-rouge">LiveScript</code>라는 이름으로 세상에 공개되었습니다. 그런데 이 시점에 Netscape사가 Java를 
개발한 Sun Microsystems사와 협업하면서 Java applet이 큰 인기를 끌게 되었는데 이를 상업적으로 이용하고자 
이름을 LiveScript에서 <code class="highlighter-rouge">JavaScript</code>로 변경하게 된 것입니다.</p>

<blockquote>
  <p><strong>이름의 변경 순서가 <code class="highlighter-rouge">Mocha</code> -&gt; <code class="highlighter-rouge">LiveScript</code> -&gt; <code class="highlighter-rouge">JavaScript</code> 가 되는군요.</strong></p>
</blockquote>

<p>MS(마이크로소프트)에서는 이에 대응하기 위해 <code class="highlighter-rouge">JScript</code>를 만들고 IE 3부터 JScript를 포함시켜서 제공했지요. 당연한 말이지만
JavaScript와 JScript는 서로 비슷하지만 특징이 다릅니다. 그로인해 우리가 잘 알고있는 JavaScript의 고질적인 문제인 파편화현상이
발생하게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> ECMAScript</strong></p>

<p>여하간 Netscape사는 이 JavaScript의 표준을 잡기 위해 <code class="highlighter-rouge">ECMA</code>(정보 통신기술 표준화 기구)에 표준화 작업을 요청합니다. 당연히
JavaScript라는 이름을 사용하려고 했지만 Sun과의 license 문제 때문에 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화가 진행되게 됩니다.</p>

<p>이렇게만 놓고 보면 JavaScript와 ECMAScript가 비슷한 의미로 사용되는 것처럼 보이는데 사실 작은 차이가 있습니다.</p>

<p><strong>우리가 흔희 말하는 JavaScript는 1개의 Core와 2개의 Module로 구성되어 있습니다.</strong> <br />
여기서 1개의 Core는 JavaScript를 구성하고 있는 <code class="highlighter-rouge">Script language(ECMAScript)</code>입니다. <br />
2개의 Module은 <code class="highlighter-rouge">BOM(Browser Object Model)</code>, <code class="highlighter-rouge">DOM(Document Object Model)</code>을 지칭합니다.</p>

<p>달리 말하자면 ECMAScript는 JavaScript를 구성하는 Core Script언어로 웹 환경에서만 사용되는 언어가 아닙니다. 웹 환경은 
ECMAScript가 host되는 환경 중 하나일 뿐입니다.</p>

<blockquote>
  <p><strong><code class="highlighter-rouge">JavaScript</code> = <code class="highlighter-rouge">ECMAScript</code> + <code class="highlighter-rouge">BOM</code> + <code class="highlighter-rouge">DOM</code></strong></p>
</blockquote>

<p>현재 ECMAScript version은 7까지 나와있습니다. 정확한 의미의 차이는 분명히 있지만 그냥 저냥 대충 통용해서 사용합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> TypeScript</strong></p>

<p>그러면 TypeScript는 또 어떤걸까요? 요즘에 왜 TypeScript가 대세로 떠오른 걸까요?</p>

<p><code class="highlighter-rouge">TypeScript</code>는 Microsoft에서 개발하여 2012년에 발표한 오픈 소스 프로그래밍 언어입니다. 
JavaScript로 대규모 application개발을 하기 위해 개발되었고 컴파일 과정을 거치면 JavaScript가 되는 언어입니다.
CoffeeScript 처럼 compile하면 JavaScript가 생성되는 변환 언어의 한 종류라 볼 수 있습니다. 
그냥 JavaScript로 개발하면 되지 굳이 이런 변환언어를 사용하는 이유는 무엇일까요? ( 이런 프로그래밍을 
<a href="./what-is-metaprogramming.html" target="_blank">메타프로그래밍</a> 이라고 합니다. )</p>

<p><strong>가장 큰 이유는 기능의 추가에 있습니다.</strong><br />
변환언어의 가장 큰 장점은 기능을 쉽게 추가할 수 있다는 것인데 추상 클래스, 인터페이스, 정적 데이터타입 사용, 
엄격한 타입 체크등을 JavaScript에 추가하여 개발을 쉽게 끌고 갈 수 있습니다.<br />
즉, 전통적인 OOP방식으로 개발을 진행할 수 있다는 것이 큰 장점으로 꼽을 수 있습니다.</p>

<blockquote>
  <p><strong>기존 객체지향 언어(Java,C++,C#)를 알고 있고 JavaScript를 알고 있으면 TypeScript를 아주 쉽게
배울 수 있습니다.</strong></p>
</blockquote>

<p>TypeScript는 다른 변환언어와는 다르게 <strong>JavaScript의 superset</strong>입니다. 그렇기 때문에 이미 JavaScript를 알고 있으면
쉽게 TypeScript를 사용할 수 있으며 ES6(ECMAScript 2015)에서 제공되는 기능 중 필요한 것만 골라서 이용할 수 있습니다. 
아래의 그림은 TypeScript와 ECMAScript간의 포함관계를 보여줍니다.</p>

<p><img src="assets/built/images/es5-es6-typescript-circle-diagram.png" alt="Image" /></p>

<p>2017년 3월부로 TypeScript는 Google의 공식언어 중 하나로 채택되었습니다. MS에서 개발한 언어를 Google이
표준언어로 채택하다니 놀랍습니다. 그만큼 TypeScript가 좋다는 의미겠지요.</p>

<p>기존 Google의 사내 표준언어 (Canonical Language)는 C, C++, Java, JavaScript, Python, Go 정도였는데 
Google은 이 중 JavaScript를 이용하여 AngularJS(1.x)를 개발해왔었습니다.</p>

<p>하지만 AngualrJS(1.x)의 차기버전인 Angular(2.x)를 개발하면서 JavaScript의 기능상의 한계를 느끼게 되고
결국 2014년에 Google에서 발표한 <code class="highlighter-rouge">AtScript</code>를 사용하게 됩니다.</p>

<p>하지만 최종적으로는 TypeScript가 Angular의 표준언어 중 하나로 채택이 됩니다. 기존의 AtScript로 작성했던 Angular 2를
몽땅 TypeScript로 전환했습니다. 그러면서 기존 Google에서 JavaScript의 
대체 언어로 밀고있었던 <code class="highlighter-rouge">Dart</code>의 위상 역시 살짝 하락한 상태입니다. (물론 Google은 아니라고 하지만요. )</p>

<blockquote>
  <p><code class="highlighter-rouge">Angular</code>는 공식적으로 3개의 언어를 지원합니다. (TypeScript, JavaScript, Dart)   <br />
그런데 공식문서에서나 커뮤니티활동에서 가장 많이 사용되는것은 <code class="highlighter-rouge">TypeScript</code>입니다. 
결국 Angular는 꼭 해야할 것 중 하나이니 TypeScript도 그냥 해야지요..머..</p>
</blockquote>

	  ]]></description>
	</item>


</channel>
</rss>
