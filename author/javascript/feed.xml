<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>Development & Technical Training</description>
   <language>en-uk</language>
   
      
            
      
            
               
               
                  <managingEditor>JavaScript</managingEditor>
            
      
            
      
            
      
   
   <title>
   <![CDATA[ JavaScript - IT Blog ]]>
   </title>
   <description>
   <![CDATA[ Development & Technical Training ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>JavaScript - IT Blog</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/author/javascript/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Babel을 사용해보자</title>
	  <link>https://moon9342.github.io/javascript-babel</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-24T02:30:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-babel</guid>
	  <description><![CDATA[
	     <p><strong>Babel이란 무엇인가?</strong></p>

<p>아무 생각없이 <code class="highlighter-rouge">Babel</code>을 쓰고 있지만 예전부터 궁금했던 Babel이란 이름이 내가 알고 있는 그 바벨탑의 바벨인가? 
라는 의문에 이름의 근원을 찾아보고 이왕 블로그를 한 김에 Babel의 간단한 사용법 정도만 정리해 보도록 하겠습니다.
( 도데체 이런게 왜 궁금한건대? )</p>

<p>결론적으로 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a> 에서는 이름에 대한 근원을 찾을수는 없었습니다. 
어딘가에 숨어있는지는 모르겠지만요. 여하간 Babel은 성경 영어로 구약성서 창세기에 그 근원을 두고 있습니다.
( 왠지 산으로 가는 느낌입니다. )</p>

<p>노아의 홍수 이후로 인간은 다시 번성하기 시작했고 그 당시에는 전 세계의 언어가 하나였다고 합니다. 하나님은 인간들에게
흩어져 살 것을 명하셨지만, 사람들은 하나님의 말씀에 불순종하여 <code class="highlighter-rouge">Shinar</code> 라는 곳에 모여 살았답니다. 그리고 그들은
자신들을 위해 하나의 도시를 건설하고 하늘에까지 닿는 높은 탑도 같이 세워 자신들의 이름을 높이고 흩어지지 않겠다는 의미로
하나의 높은 탑을 건설하게 되었는데 이게 그 <code class="highlighter-rouge">Babel</code>(바벨탑)이랍니다.</p>

<p>하지만 인간들의 그러한 동기를 아시는 하나님께서 그들이 탑을 세우지 못하고 전 세계로 흩어지게끔 그들의 언어를 여러개로
나누셔서 서로간의 의사소통이 되지 않도록 하셨답니다. 말이 안통하자 탑 공사는 중단되고 결국 언어가 맞는 사람끼리 뿔뿔히
흩어져 살게되었다라는 이야기지요.</p>

<p>그래서 <code class="highlighter-rouge">Babel</code>의 사전적 의미는 “와글와글”, “바벨탑”, “거대한 탑” 의 의미를 가지게 되었다고 합니다.</p>

<hr />

<p>Babel은 JavaScript transpiler입니다. 공식 홈에는 compiler라고 표현했지만 사실 compiler보다는 transpiler라는 용어가
더 맞지 않나 싶습니다. 여하간 Babel의 입력은 JavaScript이고 출력 역시 JavaScript입니다.</p>

<p>잘 알다시피 <code class="highlighter-rouge">ES5</code> 표준은 2009년도에 표준화되었습니다. 그리고 한동안 변경이 없다가 2015년에 <code class="highlighter-rouge">ES6</code>가 표준화가 됩니다.
현재 시점은 <code class="highlighter-rouge">ES7</code> 이 최신표준이지만 아직까지 ES6가 대세라고 볼 수 있습니다. 이 ES6에 들어와서는 여러가지 획기적인
변화가 생기게 되었습니다.</p>

<p>변화된 내용 중 대표적인 것들은 다음과 같습니다.</p>

<ul>
  <li><code class="highlighter-rouge">class</code></li>
  <li><code class="highlighter-rouge">arrow function</code></li>
  <li><code class="highlighter-rouge">template string</code></li>
  <li><code class="highlighter-rouge">generator</code></li>
  <li><code class="highlighter-rouge">destructuring</code></li>
  <li><code class="highlighter-rouge">let &amp; const</code></li>
</ul>

<p>문제는 이런 최신의 문법들로 쓰여진 JavaScript 코드를 런타임 환경인 <code class="highlighter-rouge">browser</code>가 인식하고 실행할 수 있는냐는 것입니다. 
browser는 최신 ECMAScript 문법을 다 지원하지 못하거든요. 특히 구형 browser나 <code class="highlighter-rouge">IE</code>같은 경우는 그 정도가 심합니다.</p>

<p>하지만 생산성과 유지보수성등의 이유로 코드자체는 ECMAScript 최신버전으로 구현하는게 당연히 좋습니다. 즉, 구현과 
실행환경과의 버전차이가 생기게 됩니다. Babel은  ECMAScript 6,7 으로 작성된 코드를 browser가 인식할 수 잇는 문법(ES5)으로
변환시켜주는 transpiler입니다.</p>

<p>한가지 주의해야 할 점은 Babel을 사용한다고 해서 모든 최신의 JavaScript함수를 다 사용할 수 있는건 아닙니다. Babel은
문법만 변환시켜 주는 역할만 할 뿐입니다. 따라서 프로그램이 처음에 시작될 때 browser에서 지원하지 않는 함수를 검사해 처리해주는
작업이 이루어져야 하고 이 부분은 <code class="highlighter-rouge">babel-ployfill</code>이 runtime에 담당하게 됩니다. ( 이 기능을 사용하기 위해서는 
추가적인 설정이 필요합니다. )</p>

<hr />

<p>자 그럼 실제 사용하는 예를 알아보도록 하겠습니다.</p>

<p><code class="highlighter-rouge">Babel</code>역시 다른 node module과 마찬가지로 npm으로 설치하면 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">cli</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">preset</span><span class="o">-</span><span class="nx">es2015</span>
</code></pre></div></div>

<p>package.json에 다음과 같이 npm script 작성</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="s2">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel babelTest.js -d lib"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>ES6로 다음과 같은 코드 작성하고 <code class="highlighter-rouge">babelTest.js</code>로 저장합니다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">myName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">Student</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>다음과 같이 <code class="highlighter-rouge">.babelrc</code> 파일을 작성합니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"es2015"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>다음과 같이 npm script를 실행시켜 lib폴더에 생성된 컴파일된 결과 파일을 확인합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">build</span>
</code></pre></div></div>

<p>결과로 생성된 <code class="highlighter-rouge">ES5</code> 파일의 내용</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">_classCallCheck</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">Constructor</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">instance</span> <span class="k">instanceof</span> <span class="nx">Constructor</span><span class="p">))</span> <span class="p">{</span> 
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">"Cannot call a class as a function"</span><span class="p">);</span> 
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>


<span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="s2">"홍길동"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Hello "</span> <span class="o">+</span> <span class="nx">myName</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">Student</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">Student</span><span class="p">(</span><span class="nx">sName</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Student</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">sName</span> <span class="o">=</span> <span class="nx">sName</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">"Moon"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stu</span><span class="p">.</span><span class="nx">sName</span><span class="p">);</span>
</code></pre></div></div>

<p>여기서는 <code class="highlighter-rouge">Babel</code>이 어떤 역할을 하고 어떻게 사용하는 것인지에 대해서 간단하게 알아보았습니다.</p>

<p>이 포스트의 내용은 <a href="https://babeljs.io/" target="_blank">Babel Official Home Page</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>JavaScript의 strict mode란 무엇인가?</title>
	  <link>https://moon9342.github.io/javascript-use-strict</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-24T01:35:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-use-strict</guid>
	  <description><![CDATA[
	     <p><strong>“use strict”를 써야하는 이유</strong></p>

<p><code class="highlighter-rouge">"use strict"</code>는 ES5에서 새롭게 나온 directive입니다. 실제 수행 문장이 아니라 literal expression이기 
때문에 이전 버전의 JavaScript에서는 무시됩니다.</p>

<p>일반적으로 JavaScript 코드 최 상단에 이 “use strict”가 위치하는데 이 의미에 대해서 간단하게 
정리해 봤습니다.</p>

<p>“use strict”의 목적은 우리의 코드가 <code class="highlighter-rouge">strict mode</code>로 실행되게끔 지시하는 것입니다. 
여기서 말하는 strict mode란 프로그램 실행 시 예외를 발생시킬 만한 몇가지 특이한 동작을 
수행할 수 없도록 엄격한 제한이 걸려있는 실행 <code class="highlighter-rouge">context</code>를 지칭합니다. 
즉, 일반적으로 동작하는 코드를 “use strict”를 이용하면 에러가 발생할 수 있다는 말이지요.</p>

<p>“use strict”는 함수별로 따로 지정할 수 있습니다. 즉, 함수내부에 “use strict”를 선언하면
해당 함수는 strict mode로 실행되게 됩니다.</p>

<p>몇가지 예를 들어보죠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>        <span class="c1">// x가 선언되지 않았기 때문에 error 발생</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>       <span class="c1">// strict mode가 아니기 때문에 에러 아님.</span>

<span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
    <span class="s2">"use strict"</span><span class="p">;</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>   <span class="c1">// y가 선언되지 않았기 때문에 에러 발생</span>
<span class="p">}</span>

<span class="nx">myFunction</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>

<span class="k">delete</span> <span class="nx">x</span><span class="p">;</span>   <span class="c1">// strict mode에서는 delete를 사용할 수 없다.   </span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"use strict"</span><span class="p">;</span>

<span class="kd">var</span> <span class="kr">public</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">;</span>   <span class="c1">// strict mode에서는 키워드로 변수명을 쓸수 없다.</span>
</code></pre></div></div>

<p>그 외의 예로는 함수의 매개변수의 리스트에서 중복된 부분이 있을 때 오류를 발생시키고 동일한 라이브러리를 중복해서
로딩하는 경우 에러를 발생시킵니다. (예를 들면, <code class="highlighter-rouge">jQuery</code> library 중복로딩 )</p>

<p>결론적으로 잠재적인 오류가 발생할 수 있는 여지를 막아주도록 코드에 대한 문법 사항을 엄걱하게 지키도록 하는
directive정도로 인식하시면 될 듯 합니다.</p>

<blockquote>
  <p>결론은 <strong>고민하지 말고 무조건 써야된다!!</strong> 입니다. ^^</p>
</blockquote>

<p>이 포스트의 내용은 <a href="https://www.w3schools.com/js/js_strict.asp" target="_blank">w3schools.com</a>을 참조했습니다.
조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>JavaScript History</title>
	  <link>https://moon9342.github.io/javascript-history</link>
		
				
		
				
						<author>JavaScript</author>
				
		
				
		
				
		
	  <pubDate>2018-01-14T15:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/javascript-history</guid>
	  <description><![CDATA[
	     <p><strong>JavaScript</strong>, <strong>ECMAScript</strong>, <strong>TypeScript</strong></p>

<p>아마도 <code class="highlighter-rouge">JavaScript</code>, <code class="highlighter-rouge">ECMAScript</code>, <code class="highlighter-rouge">TypeScript</code>라는 용어를 많이 들어봤을 텐데 정확하게 어떤 차이가 있는지
간단하게 정리를 해 보겠습니다.</p>

<p>과거부터 Web 작업을 해 오신 분들은 아시겠지만 JavaScript의 과거 인식은 “알면 좋고 몰라도 상관없는 딱 그 수준의 언어” 
였습니다. 하지만 개발 방법론이 진화하면서 JavaScript기반의 Library나 Framework의 필요성이 증대되고 그에 따라
JavaScript라는 언어의 위상도 상당히 올라갔습니다. (사실은 <code class="highlighter-rouge">HTML5</code>와 <code class="highlighter-rouge">Node.js</code>의 역할이 지대했지요.)</p>

<p>JavaScript라는 언어의 전신은 1995년 Netscape사에서 Brendan Eich가 <code class="highlighter-rouge">Mocha</code>라는 이름으로 만들어낸 스크립트 
언어입니다. 개발을 완료하고 후에 <code class="highlighter-rouge">LiveScript</code>라는 이름으로 세상에 공개되었습니다. 그런데 이 시점에 Netscape사가 Java를 
개발한 Sun Microsystems사와 협업하면서 Java applet이 큰 인기를 끌게 되었는데 이를 상업적으로 이용하고자 
이름을 LiveScript에서 <code class="highlighter-rouge">JavaScript</code>로 변경하게 된 것입니다.</p>

<blockquote>
  <p><strong>이름의 변경 순서가 <code class="highlighter-rouge">Mocha</code> -&gt; <code class="highlighter-rouge">LiveScript</code> -&gt; <code class="highlighter-rouge">JavaScript</code> 가 되는군요.</strong></p>
</blockquote>

<p>MS(마이크로소프트)에서는 이에 대응하기 위해 <code class="highlighter-rouge">JScript</code>를 만들고 IE 3부터 JScript를 포함시켜서 제공했지요. 당연한 말이지만
JavaScript와 JScript는 서로 비슷하지만 특징이 다릅니다. 그로인해 우리가 잘 알고있는 JavaScript의 고질적인 문제인 파편화현상이
발생하게 됩니다.</p>

<p>여하간 Netscape사는 이 JavaScript의 표준을 잡기 위해 <code class="highlighter-rouge">ECMA</code>(정보 통신기술 표준화 기구)에 표준화 작업을 요청합니다. 당연히
JavaScript라는 이름을 사용하려고 했지만 Sun과의 license 문제 때문에 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화가 진행되게 됩니다.</p>

<p>이렇게만 놓고 보면 JavaScript와 ECMAScript가 비슷한 의미로 사용되는 것처럼 보이는데 사실 작은 차이가 있습니다.</p>

<p><strong>우리가 흔희 말하는 JavaScript는 1개의 Core와 2개의 Module로 구성되어 있습니다.</strong> <br />
여기서 1개의 Core는 JavaScript를 구성하고 있는 <code class="highlighter-rouge">Script language(ECMAScript)</code>입니다. <br />
2개의 Module은 <code class="highlighter-rouge">BOM(Browser Object Model)</code>, <code class="highlighter-rouge">DOM(Document Object Model)</code>을 지칭합니다.</p>

<p>달리 말하자면 ECMAScript는 JavaScript를 구성하는 Core Script언어로 웹 환경에서만 사용되는 언어가 아닙니다. 웹 환경은 
ECMAScript가 host되는 환경 중 하나일 뿐입니다.</p>

<blockquote>
  <p><strong><code class="highlighter-rouge">JavaScript</code> = <code class="highlighter-rouge">ECMAScript</code> + <code class="highlighter-rouge">BOM</code> + <code class="highlighter-rouge">DOM</code></strong></p>
</blockquote>

<p>현재 ECMAScript version은 7까지 나와있습니다. 정확한 의미의 차이는 분명히 있지만 그냥 저냥 대충 통용해서 사용합니다.<br />
그러면 TypeScript는 또 어떤걸까요? 요즘에 왜 TypeScript가 대세로 떠오른 걸까요?</p>

<p><code class="highlighter-rouge">TypeScript</code>는 Microsoft에서 개발하여 2012년에 발표한 오픈 소스 프로그래밍 언어입니다. 
JavaScript로 대규모 application개발을 하기 위해 개발되었고 컴파일 과정을 거치면 JavaScript가 되는 언어입니다.
CoffeeScript 처럼 compile하면 JavaScript가 생성되는 변환 언어의 한 종류라 볼 수 있습니다. 
그냥 JavaScript로 개발하면 되지 굳이 이런 변환언어를 사용하는 이유는 무엇일까요? ( 이런 프로그래밍을 
<a href="./what-is-metaprogramming.html" target="_blank">메타프로그래밍</a> 이라고 합니다. )</p>

<p><strong>가장 큰 이유는 기능의 추가에 있습니다.</strong><br />
변환언어의 가장 큰 장점은 기능을 쉽게 추가할 수 있다는 것인데 추상 클래스, 인터페이스, 정적 데이터타입 사용, 
엄격한 타입 체크등을 JavaScript에 추가하여 개발을 쉽게 끌고 갈 수 있습니다.<br />
즉, 전통적인 OOP방식으로 개발을 진행할 수 있다는 것이 큰 장점으로 꼽을 수 있습니다.</p>

<blockquote>
  <p><strong>기존 객체지향 언어(Java,C++,C#)를 알고 있고 JavaScript를 알고 있으면 TypeScript를 아주 쉽게
배울 수 있습니다.</strong></p>
</blockquote>

<p>TypeScript는 다른 변환언어와는 다르게 <strong>JavaScript의 superset</strong>입니다. 그렇기 때문에 이미 JavaScript를 알고 있으면
쉽게 TypeScript를 사용할 수 있으며 ES6(ECMAScript 2015)에서 제공되는 기능 중 필요한 것만 골라서 이용할 수 있습니다. 
아래의 그림은 TypeScript와 ECMAScript간의 포함관계를 보여줍니다.</p>

<p><img src="assets/built/images/es5-es6-typescript-circle-diagram.png" alt="Image" /></p>

<p>2017년 3월부로 TypeScript는 Google의 공식언어 중 하나로 채택되었습니다. MS에서 개발한 언어를 Google이
표준언어로 채택하다니 놀랍습니다. 그만큼 TypeScript가 좋다는 의미겠지요.</p>

<p>기존 Google의 사내 표준언어 (Canonical Language)는 C, C++, Java, JavaScript, Python, Go 정도였는데 
Google은 이 중 JavaScript를 이용하여 AngularJS(1.x)를 개발해왔었습니다.</p>

<p>하지만 AngualrJS(1.x)의 차기버전인 Angular(2.x)를 개발하면서 JavaScript의 기능상의 한계를 느끼게 되고
결국 2014년에 Google에서 발표한 <code class="highlighter-rouge">AtScript</code>를 사용하게 됩니다.</p>

<p>하지만 최종적으로는 TypeScript가 Angular의 표준언어 중 하나로 채택이 됩니다. 기존의 AtScript로 작성했던 Angular 2를
몽땅 TypeScript로 전환했습니다. 그러면서 기존 Google에서 JavaScript의 
대체 언어로 밀고있었던 <code class="highlighter-rouge">Dart</code>의 위상 역시 살짝 하락한 상태입니다. (물론 Google은 아니라고 하지만요. )</p>

<blockquote>
  <p><code class="highlighter-rouge">Angular</code>는 공식적으로 3개의 언어를 지원합니다. (TypeScript, JavaScript, Dart)   <br />
그런데 공식문서에서나 커뮤니티활동에서 가장 많이 사용되는것은 <code class="highlighter-rouge">TypeScript</code>입니다. 
결국 Angular는 꼭 해야할 것 중 하나이니 TypeScript도 그냥 해야지요..머..</p>
</blockquote>

	  ]]></description>
	</item>


</channel>
</rss>
