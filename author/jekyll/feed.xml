<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://moon9342.github.io/</title>
   
   <link>https://moon9342.github.io/</link>
   <description>Development & Technical Training</description>
   <language>en-uk</language>
   
      
            
               
               
                  <managingEditor>jekyll</managingEditor>
            
      
            
      
            
      
            
      
   
   <title>
   <![CDATA[ jekyll - IT Blog ]]>
   </title>
   <description>
   <![CDATA[ Development & Technical Training ]]>
   </description>
   <link>https://moon9342.github.io/</link>
   <image>
   <url>https://moon9342.github.io/assets/built/images/favicon.jpg</url>
   <title>jekyll - IT Blog</title>
   <link>https://moon9342.github.io/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="https://moon9342.github.io/author/jekyll/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8)</title>
	  <link>https://moon9342.github.io/jekyll-travis-ci-public</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-28T14:47:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-travis-ci-public</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>Travis CI 활용(public Repository)</strong></p>

<p><code class="highlighter-rouge">CI</code> ( Continuous Integration )의 개념에 대해서 잘 알지 못하시는 분은 <a href="./continuous-integration.html" target="_blank">여기</a>를 클릭하셔서 
간단하게 이해를 하고 오시면 됩니다.</p>

<p>이 포스트에서는 <code class="highlighter-rouge">Travis CI</code>를 이용하여 Jekyll Source Folder안의 내용을 GitHub Repository에 commit했을 때 자동으로 GitHub Page에 
블로그가 deploy되도록 하는 방법에 대해서 알아보겠습니다.</p>

<p>일단은 사용하는 <code class="highlighter-rouge">GitHub Repository</code>는 모두 <code class="highlighter-rouge">Public</code>으로 되어 있다고 가정하고 진행합니다. 
만약 Private Repository를 이용하실려면 좀 더 복잡한 처리와 돈이 들어갑니다. 
(Travis CI는 GitHub Public Repository에 대해서는 무료이지만 Private Repository에 대해서는 일정량의 금액을 지불해야 합니다.)</p>

<p>그럼 천천히 한번 진행해 보도록 하죠</p>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> GitHub에 2개의 Repository 준비</strong></p>

<p>먼저 Jekyll Source Folder ( <code class="highlighter-rouge">D:/blogmaker</code> )에 대한 GitHub Repository를 준비합니다. Public으로 생성하셔야 합니다.
저는 <code class="highlighter-rouge">GitHubPageMaker</code>라는 이름으로 Repository를 생성했습니다. <strong>생성할 때 README.md 파일을 추가해서 생성하지 않습니다.</strong></p>

<blockquote>
  <p><code class="highlighter-rouge">https://github.com/moon9342/GitHubPageMaker</code> 형태로 생성되겠군요.</p>
</blockquote>

<p>그 다음은 GitHub Page에서 운영할 블로그에 대한 GitHub Repository를 준비합니다. 역시 마찬가지로 Public으로 생성하셔야 합니다.
Repository의 이름은 형식이 정해져 있습니다. <code class="highlighter-rouge">{GitHub ID}.github.io</code> 로 Repository를 생성하셔야 합니다. 
<strong>생성할 때 README.md 파일 하나 추가해서 생성합니다.</strong></p>

<blockquote>
  <p><code class="highlighter-rouge">https://github.com/moon9342/moon9342.github.io</code> 형태로 생성되겠네요.</p>
</blockquote>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> Local Git Repository 생성 및 Remote 연결</strong></p>

<p>GitHub에 원격 Repository가 생성되었으니 이번에는 로컬에 Repository를 생성합니다. <code class="highlighter-rouge">D:/blogmaker</code> 폴더에서 command 창을 열고
다음을 입력합니다.</p>

<blockquote>
  <p><strong>git init</strong></p>
</blockquote>

<p><code class="highlighter-rouge">D:/blogmaker</code>에 git Repository를 생성합니다. 이제 다음의 명령어를 이용해서 로컬 Repository에 파일을 추가하고 commit까지 진행
합니다.</p>

<blockquote>
  <p><strong>git add *</strong></p>
</blockquote>

<blockquote>
  <p><strong>git commit -m “initial commit”</strong></p>
</blockquote>

<p>자 이제 원격 Repository와 연결하는 작업을 수행합니다. 다음의 명령을 이용합니다.</p>

<blockquote>
  <p><strong>git remote add origin https://github.com/moon9342/GitHubPageMaker.git</strong></p>
</blockquote>

<p>현재의 로컬 Repository가 원격 Repository와 연결되었습니다. 연결상태를 확인하려면 다음과 같이
입력하면 됩니다.</p>

<blockquote>
  <p><strong>git remote -v</strong></p>
</blockquote>

<p><img src="assets/built/images/git-remote-v.png" alt="git remote -v" /></p>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> Git Submodule 생성</strong></p>

<p>Jekyll Source Folder( <code class="highlighter-rouge">D:/blogmaker</code> )에 대한 Repository와 실제 블로그를 운영할 Repository를
git submodule로 묶습니다. Submodule의 개념은 <a href="https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88" target="_blank">여기</a>
나 혹은 다른 블로그를 참조하세요.</p>

<p>command 창에서 다음과 같이 입력합니다. ( command 창의 현재 경로는 <code class="highlighter-rouge">D:/blogmaker</code> 입니다.)</p>

<blockquote>
  <p><strong>git submodule add https://github.com/moon9342/moon9342.github.io.git output</strong></p>
</blockquote>

<p>현재 Repository의 하위에 <code class="highlighter-rouge">output</code>이라는 이름의 폴더가 만들어지고 해당 폴더는 <code class="highlighter-rouge">moon9342.github.io</code> Repository에 
대한 로컬 git Repository가 됩니다. ( 내부적으로 git clone이 실행됩니다. )</p>

<p><code class="highlighter-rouge">output</code>이라는 이름은 다른 이름으로 변경하셔도 됩니다. 단 <code class="highlighter-rouge">_config.yml</code>에 있는 destination 속성의 값과 이 이름이 같아야 합니다.</p>

<p>정상적으로 clone이 진행되어서 submodule이 생성되면 다음과 같이 입력합니다.</p>

<blockquote>
  <p><strong>git submodule update</strong></p>
</blockquote>

<p>git은 submodule에 대한 삭제명령을 제공하지 않기 때문에 만약 기존의 submodule을 삭제하려면 다음과 같이 해야 합니다.</p>
<ul>
  <li>Repository 루트에 있는 <code class="highlighter-rouge">.gitmodules</code> 파일 수정</li>
  <li>Repository 루트의 <code class="highlighter-rouge">.git</code> 폴더안의 <code class="highlighter-rouge">config</code> 파일 수정 ( [submodule “xxx”] 부분 수정)</li>
  <li>git의 cache에서 submodule 삭제 ( <code class="highlighter-rouge">git rm --cached module_path</code> )</li>
</ul>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> _config.yml 1차 수정</strong></p>

<p>Jekyll Source Folder( <code class="highlighter-rouge">D:/blogmaker</code> )에 있는 내용을 컴파일 하면 그 결과가 output 폴더에 들어가도록
<code class="highlighter-rouge">_config.yml</code>을 수정합니다.</p>

<p><code class="highlighter-rouge">_config.yml</code>의 destination 부분을 찾아 <code class="highlighter-rouge">./output/</code>으로 수정합니다.</p>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> Travis 사이트에 접속</strong></p>

<p>Travis 사이트에 접속해서 GitHub Repository에 대한 연결을 활성화 시킵니다.</p>

<p>기본적으로 Public Repository만 사용할 수 있습니다. 만약 Private Repository를 사용하고 싶으면 
별도의 비용을 지불해야 합니다. ( 비용이 좀 비싼편입니다. )</p>

<ul>
  <li><code class="highlighter-rouge">https://travis-ci.org</code> =&gt; Public Repository를 위한 site입니다. GitHub 계정으로 로그인 합니다.</li>
  <li><code class="highlighter-rouge">https://travis-ci.com</code> =&gt; Private Repository를 위한 site입니다. GitHub 계정으로 로그인 합니다.</li>
</ul>

<p><img src="assets/built/images/travis-ci-login.png" alt="travis-ci login" /></p>

<p>그림에서와 같이 연동할 GitHub Repository를 선택해서 Enabled 시켜줍니다.</p>

<p>잠깐 정리하자면, 연동된 GitHub Repository인 GitHubPageMaker에 push가 이루어지면 Travis CI가 <code class="highlighter-rouge">.travis.yml</code> 설정파일을
찾아서 이를 이용해 특정 작업을 수행하게 됩니다. 당연히 <code class="highlighter-rouge">GitHubPageMaker</code> Repository에 <code class="highlighter-rouge">.travis.yml</code> 파일을 작성해서 넣어 놓아야
합니다.</p>

<p>우리는 이 <code class="highlighter-rouge">.travis.yml</code>과 <code class="highlighter-rouge">Rakefile</code>을 이용하여 <code class="highlighter-rouge">output</code>안에 있는 내용을 commit하고 push하게 될 것입니다. <code class="highlighter-rouge">output</code>은 
GitHub Page와 연동되는 Repository이기 때문에 결국 Jekyll로 컴파일한 내용이 GitHub Page Repository로 들어가게 되는 겁니다.</p>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> Token 생성</strong></p>

<p>Travis CI에서 다른 Repository로 push를 하기 위해서는 <code class="highlighter-rouge">token</code>이 필요합니다.</p>

<p>GitHub에 접속해 Setting &gt; Developer settings &gt; Personal access tokens에 들어가서 <code class="highlighter-rouge">Generate New Token</code>을 클릭합니다.
적당히 description을 작성하고 Select scopes 중 <code class="highlighter-rouge">repo</code> 선택하고 generate token을 클릭하면 새로운 token이 생성
됩니다. 이 token을 바로 이용할 건 아니기 때문에 어딘가에 잘 저장해 둡니다.</p>

<p><img src="assets/built/images/github-personal-access-token.png" alt="github personal access token" /></p>

<p>이 token값을 직접 Travis CI 설정파일( <code class="highlighter-rouge">.travis.yml</code> )에 직접 노출시키면 안되고 이 값을 암호화해서 사용해야 합니다.<br />
일단 command 창을 열어서 travis gem을 설치합니다.</p>

<blockquote>
  <p><strong>gem install travis</strong></p>
</blockquote>

<p>설치가 끝나면 다음의 명령을 이용해서 암호화를 진행합니다. 만약 로그인을 안했다는 메시지가 나오면 
다음과 같이 로그인 후 진행하시면 됩니다. (ID/PW는 GitHub의 ID/PW를 이용합니다.)</p>

<blockquote>
  <p><strong>travis login --pro</strong></p>
</blockquote>

<blockquote>
  <p><strong>travis encrypt GITHUB_TOKEN=&lt;token&gt; -r &lt;repo-name&gt;</strong></p>
</blockquote>

<p>여기서 <code class="highlighter-rouge">&lt;token&gt;</code>에는 아까 우리가 획득한 GitHub token을 넣어주시면 됩니다. <code class="highlighter-rouge">&lt;repo-name&gt;</code>부분에는 우리의
Jekyll Source Folder에 대한 Repository이름을 주면 됩니다. 주의하실점은 <code class="highlighter-rouge">{ID/RepoName}</code> 형태로 사용하셔야 
합니다. 저의 경우를 예로 들자면 다음과 같습니다.</p>

<blockquote>
  <p><strong>travis encrypt GITHUB_TOKEN=123abc456xxx -r moon9342/GitHubPageMaker</strong></p>
</blockquote>

<p>위의 과정을 거치면 암호화된 값을 얻을 수 있는데 이 값을 아래와 같이 <code class="highlighter-rouge">.travis.yml</code>안에 설정하시면 됩니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">env</span><span class="pi">:</span>
  <span class="na">global</span><span class="pi">:</span>
    <span class="na">secure</span><span class="pi">:</span> <span class="s2">"</span><span class="s">여기에</span><span class="nv"> </span><span class="s">암호화된</span><span class="nv"> </span><span class="s">값을</span><span class="nv"> </span><span class="s">넣습니다."</span>
<span class="na">branches</span><span class="pi">:</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">master</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> 사용되는 파일 수정</strong></p>

<p>이제 <code class="highlighter-rouge">_config.yml</code>, <code class="highlighter-rouge">.travis.yml</code>, <code class="highlighter-rouge">Rakefile</code> 파일을 아래와 같이 적절하게 수정해야 합니다. 
<code class="highlighter-rouge">Ruby</code>언어로 작성된 script를 보는게 영 껄끄럽지만 어렵지 않는 내용이니 천천히 보시면 됩니다.</p>

<p><code class="highlighter-rouge">_config.yml</code> 파일입니다.</p>
<noscript><pre># Jekyll configuration
markdown: kramdown
# kramdown : markdown의 개조판.
# markdown에서 불편한 사항을 개선한 형태.

highlighter: rouge
# text highlighter로 rouge이용
# 2016.02월 이후로 syntax highlighter는 rouge만 지원.
# Pygments 사용불가.

paginate: 10
# 작성한 모든 post를 하나의 페이지에 열거할 수 없으니
# pagination이 필요하고 몇개의 post를 하나의 page에서
# 보여줄 건지를 설정.

language: &#39;en-uk&#39;
# 언어 설정

url: https://moon9342.github.io
# Google Search Console에서 사용하는 sitemap.xml 생성시
# 이 url key값이 존재하지 않으면 sitemap.xml이
# 정상적으로 생성되지 않는다.
# 또한 disqus(댓글시스템)를 이용하기 위해서도 필요.
# 자신의 github page url을 입력
# ( https://your_github_id.github.io 형식 )

baseurl: /

# Website info
title: IT Blog
# 자신의 blog title.

description: Development &amp; Technical Training
# blog home에 표시될 blog에 대한 전반적인 설명.

cover: assets/built/images/blog-cover.png
# blog home에 표시될 blog cover image.

logo:
logo_dark:

favicon: assets/built/images/favicon.jpg
# favicon으로 사용할 image

production_url: https://moon9342.github.io/
# 최종적으로 blog가 운영될 url

source_url: https://github.com/moon9342/GitHubPageMaker/
# blogmaker(jekyll source folder)에 대한 github repository

# Social info
navigation: True
# Navigation bar link를 보여줄건지 여부

subscribers: True
# subscriber 기능을 사용할건지의 여부
# 저는 약간의 수정을 통해 subscriber 기능대신
# lunr.js를 이용한 검색 기능으로 대체 사용했습니다.
# 검색기능으로 대체하기 위해서
# `_includes/subscribe-form.html` 파일의 수정이 필요합니다.

twitter:
facebook:
# 만약 twitter와 facebook을 이용하면 username을 입력

# Disqus
disqus: True
disqus_shortname: sunghoons-blog
# disqus는 온라인 댓글 시스템. 댓글 기능을 사용하기 위해
# disqus를 이용할 것인지 여부와 만약 사용하면
# disqus shortname을 입력 ( disqus username이 아님 )


# Google Analytics
google_analytics:  # replace with your GA tracking identifier
# Google Analytics을 사용할 경우 GA tracking identifier를 입력

# Permalinks
permalink: /:title
# permalink: /author/:author
# permalink: /tag/:title
# 각각의 post에 고정주소를 어떤 방식으로 할당할 것인지를 결정
# 이 값을 바꾸면 작성한 포스트의 저장위치나 파일이름이 변경된다.

# gems and other configs
plugins: [jekyll-paginate, jekyll-feed, jekyll-gist]
exclude: [vendor]

feed:
  path: feed.xml

# Travis-CI 설정입니다.
safe: False
lsi: False

username: moon9342
repo: GitHubPageMaker
# username : travis-ci와 연동하는 github의 username
# repo: travis-ci와 연동하는 github의 repository이름
# https://github.com/&lt;username&gt;/&lt;repository&gt;

branch: master
# 사용할 branch명

relative_source: 

destination: ./output/
# compile된 결과가 생성되는 폴더
# 이 폴더안의 내용이 우리가 운영하는 블로그 내용이 컴파일되서 들어간다.
# 이 폴더안의 내용을 github repository(https://username.github.io)에 push
# 만약 Travis-CI를 이용할 예정이면 이 부분을 git submodule로
# github repository(https://username.github.io)에 연결해야 한다.

production_url:  https://moon9342.github.io/
source_url:  https://github.com/moon9342/GitHubPageMaker/

# exclude는 Jekyll컴파일 시 destination에 포함될 필요가
# 없는것들을 명시한다. (node_modules는 포함시키자)
exclude:
  - README.md
  - Rakefile
  - Gemfile
  - Gemfile.lock
  - changelog.md
  - &quot;*.Rmd&quot;
  - vendor
  - .travis.yml
  - node_modules</pre></noscript>
<script src="https://gist.github.com/moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e.js"> </script>

<p><code class="highlighter-rouge">.travis.yml</code> 파일입니다.</p>
<noscript><pre>sudo: false
language: ruby
cache: bundler
rvm:
- 2.4.2

install:
  # Install Jekyll and dependencies
  - bundle install

before_script:
  - git config --global user.email &quot;moon9342@gmail.com&quot;
  - git config --global user.name &quot;Moon Sung Hoon&quot;

script: bundle exec rake site:deploy --quiet #--trace

# Generate your secure token with the travis gem:
# get Github token from your Travis CI profile page
# gem install travis
# GH_TOKEN from https://github.com/settings/tokens
# travis encrypt &#39;GIT_NAME=&quot;YOUR_USERNAME&quot; GIT_EMAIL=&quot;YOUR_EMAIL&quot; GH_TOKEN=YOUR_TOKEN&#39;
env:
  global:
    secure: &quot;xxxxxxxxxxxxxxxxxxxx&quot;
branches:
  only:
    - master
</pre></noscript>
<script src="https://gist.github.com/moon9342/b413a66b009fa6d2a0018bea7cc00f2f.js"> </script>

<p><code class="highlighter-rouge">Rakefile</code> 파일입니다.</p>
<noscript><pre>#############################################################################
#
# Modified version of jekyllrb Rakefile
# https://github.com/jekyll/jekyll/blob/master/Rakefile
#
#############################################################################

require &#39;rake&#39;
require &#39;date&#39;
require &#39;yaml&#39;

CONFIG = YAML.load(File.read(&#39;_config.yml&#39;))
USERNAME = CONFIG[&quot;username&quot;]
REPO = CONFIG[&quot;repo&quot;]
SOURCE_BRANCH = CONFIG[&quot;branch&quot;]
DESTINATION_BRANCH = &quot;master&quot;

def check_destination
  unless Dir.exist? CONFIG[&quot;destination&quot;]
    sh &quot;git clone https://$GIT_NAME:$GITHUB_TOKEN@github.com/#{USERNAME}/#{REPO}.git #{CONFIG[&quot;destination&quot;]}&quot;
  end
end

namespace :site do
  desc &quot;Generate the site&quot;
  task :build do
    check_destination
    sh &quot;bundle exec jekyll build&quot;
  end

  desc &quot;Generate the site and serve locally&quot;
  task :serve do
    check_destination
    sh &quot;bundle exec jekyll serve&quot;
  end

  desc &quot;Generate the site, serve locally and watch for changes&quot;
  task :watch do
    sh &quot;bundle exec jekyll serve --watch&quot;
  end

  desc &quot;Generate the site and push changes to remote origin&quot;
  task :deploy do
    # Detect pull request
    if ENV[&#39;TRAVIS_PULL_REQUEST&#39;].to_s.to_i &gt; 0
      puts &#39;Pull request detected. Not proceeding with deploy.&#39;
      exit
    end

    # Configure git if this is run in Travis CI
    if ENV[&quot;TRAVIS&quot;]
      sh &quot;git config --global user.name $GIT_NAME&quot;
      sh &quot;git config --global user.email $GIT_EMAIL&quot;
      sh &quot;git config --global push.default simple&quot;
    end

    # Make sure destination folder exists as git repo
    check_destination

    sh &quot;git checkout #{SOURCE_BRANCH}&quot;
    Dir.chdir(CONFIG[&quot;destination&quot;]) { sh &quot;git checkout #{DESTINATION_BRANCH}&quot; }

    # Generate the site
    sh &quot;bundle exec jekyll build&quot;

    # Commit and push to github
    sha = `git log`.match(/[a-z0-9]{40}/)[0]
    Dir.chdir(CONFIG[&quot;destination&quot;]) do
      # check if there is anything to add and commit, and pushes it
      sh &quot;if [ -n &#39;$(git status)&#39; ]; then
            git add --all .;
            git commit -m &#39;Updating to #{USERNAME}/#{REPO}@#{sha}.&#39;;
            git push https://$GITHUB_TOKEN@github.com/#{USERNAME}/#{USERNAME}.github.io.git #{DESTINATION_BRANCH} --quiet ;
         fi&quot;
      puts &quot;Pushed updated branch #{DESTINATION_BRANCH} to GitHub Pages&quot;
    end
  end
end</pre></noscript>
<script src="https://gist.github.com/moon9342/7e5e5f21be31f2195f6d99bcac627bfe.js"> </script>

<hr />

<p>모든 설정이 끝났습니다. 이제 GitHub에 push작업을 해 보시면 Travis CI가 동작하면서 내부적으로 처리해서 결과를
알려줍니다. 해보시면 아시겠지만 거의 스팸메일처럼 날라옵니다.</p>

<p><code class="highlighter-rouge">Travis CI</code> 사이트에 들어가면 CI Server가 어떻게 처리하는지를 실시간적으로 log를 출력해 보여주는데 그걸 보시면서 
혹 문제가 있는 부분이 있으면 해결하시면 됩니다.</p>

<p><img src="assets/built/images/travis-ci-result.png" alt="travis-ci result" /></p>

<hr />

<p><strong><i class="fa fa-flag" style="color:#01077c"></i> Private Repository 사용</strong></p>

<p>우리는 두개의 Repository를 사용하고 있고 둘 다 Public으로 사용하고 있습니다. 당연한 말이지만
이 중 중요한 것은 여러 설정과 실제 원본내용이 들어있는 Jekyll Source Folder에 대한 Repository인
GitHubPageMaker Repository입니다. {GitHub ID}.github.io Repository는 Public으로 설정하고 
<code class="highlighter-rouge">Jekyll Source Folder</code>는 <code class="highlighter-rouge">Private</code>으로 관리하고 싶은 경우는 위의 과정에서 약간만 손보시면 됩니다.</p>

<ul>
  <li>GitHub에서 해당 Repository를 Private으로 설정합니다.</li>
  <li><code class="highlighter-rouge">travis-ci.com</code>으로 접속하셔서 Private Repository에 대한 연결을 활성화 시킵니다.</li>
  <li>획득한 token을 암호화 시키는 부분에서 다음과 같이 <code class="highlighter-rouge">--pro</code> 옵션을 추가합니다.</li>
</ul>

<blockquote>
  <p><strong>travis encrypt GITHUB_TOKEN=123abc456xxx -r moon9342/GitHubPageMaker --pro</strong></p>
</blockquote>

<p>나머지 부분은 동일합니다.</p>

<hr />

<p>성공하시길 바랍니다.!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7)</title>
	  <link>https://moon9342.github.io/jekyll-gist</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-25T15:30:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-gist</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>GitHub Gist 활용</strong></p>

<p><code class="highlighter-rouge">GitHub</code>의 <code class="highlighter-rouge">Gist</code>에 대해서 잘 알지 못하시는 분은 <a href="./github-gist.html" target="_blank">여기</a>를 클릭하셔서 
간단하게 Gist에 대한 이해를 하고 오시면 됩니다.</p>

<p>그럼 설치부터 천천히 알아보도록 하죠.</p>

<hr />

<p>먼저 <code class="highlighter-rouge">gist</code>를 사용할 수 있도록 gem을 설치해야 합니다. 아래와 같이 command 창에서 명령어를 입력합니다.</p>

<blockquote>
  <p><strong>gem install jekyll-gist</strong></p>
</blockquote>

<p>gem 설치가 끝나면 <code class="highlighter-rouge">_config.yml</code>을 수정해야 합니다.</p>

<p>아래의 코드는 저의 <code class="highlighter-rouge">_config.yml</code>입니다.</p>

<noscript><pre># Jekyll configuration
markdown: kramdown
# kramdown : markdown의 개조판.
# markdown에서 불편한 사항을 개선한 형태.

highlighter: rouge
# text highlighter로 rouge이용
# 2016.02월 이후로 syntax highlighter는 rouge만 지원.
# Pygments 사용불가.

paginate: 10
# 작성한 모든 post를 하나의 페이지에 열거할 수 없으니
# pagination이 필요하고 몇개의 post를 하나의 page에서
# 보여줄 건지를 설정.

language: &#39;en-uk&#39;
# 언어 설정

url: https://moon9342.github.io
# Google Search Console에서 사용하는 sitemap.xml 생성시
# 이 url key값이 존재하지 않으면 sitemap.xml이
# 정상적으로 생성되지 않는다.
# 또한 disqus(댓글시스템)를 이용하기 위해서도 필요.
# 자신의 github page url을 입력
# ( https://your_github_id.github.io 형식 )

baseurl: /

# Website info
title: IT Blog
# 자신의 blog title.

description: Development &amp; Technical Training
# blog home에 표시될 blog에 대한 전반적인 설명.

cover: assets/built/images/blog-cover.png
# blog home에 표시될 blog cover image.

logo:
logo_dark:

favicon: assets/built/images/favicon.jpg
# favicon으로 사용할 image

production_url: https://moon9342.github.io/
# 최종적으로 blog가 운영될 url

source_url: https://github.com/moon9342/GitHubPageMaker/
# blogmaker(jekyll source folder)에 대한 github repository

# Social info
navigation: True
# Navigation bar link를 보여줄건지 여부

subscribers: True
# subscriber 기능을 사용할건지의 여부
# 저는 약간의 수정을 통해 subscriber 기능대신
# lunr.js를 이용한 검색 기능으로 대체 사용했습니다.
# 검색기능으로 대체하기 위해서
# `_includes/subscribe-form.html` 파일의 수정이 필요합니다.

twitter:
facebook:
# 만약 twitter와 facebook을 이용하면 username을 입력

# Disqus
disqus: True
disqus_shortname: sunghoons-blog
# disqus는 온라인 댓글 시스템. 댓글 기능을 사용하기 위해
# disqus를 이용할 것인지 여부와 만약 사용하면
# disqus shortname을 입력 ( disqus username이 아님 )


# Google Analytics
google_analytics:  # replace with your GA tracking identifier
# Google Analytics을 사용할 경우 GA tracking identifier를 입력

# Permalinks
permalink: /:title
# permalink: /author/:author
# permalink: /tag/:title
# 각각의 post에 고정주소를 어떤 방식으로 할당할 것인지를 결정
# 이 값을 바꾸면 작성한 포스트의 저장위치나 파일이름이 변경된다.

# gems and other configs
plugins: [jekyll-paginate, jekyll-feed, jekyll-gist]
exclude: [vendor]

feed:
  path: feed.xml

# Travis-CI 설정입니다.
safe: False
lsi: False

username: moon9342
repo: GitHubPageMaker
# username : travis-ci와 연동하는 github의 username
# repo: travis-ci와 연동하는 github의 repository이름
# https://github.com/&lt;username&gt;/&lt;repository&gt;

branch: master
# 사용할 branch명

relative_source: 

destination: ./output/
# compile된 결과가 생성되는 폴더
# 이 폴더안의 내용이 우리가 운영하는 블로그 내용이 컴파일되서 들어간다.
# 이 폴더안의 내용을 github repository(https://username.github.io)에 push
# 만약 Travis-CI를 이용할 예정이면 이 부분을 git submodule로
# github repository(https://username.github.io)에 연결해야 한다.

production_url:  https://moon9342.github.io/
source_url:  https://github.com/moon9342/GitHubPageMaker/

# exclude는 Jekyll컴파일 시 destination에 포함될 필요가
# 없는것들을 명시한다. (node_modules는 포함시키자)
exclude:
  - README.md
  - Rakefile
  - Gemfile
  - Gemfile.lock
  - changelog.md
  - &quot;*.Rmd&quot;
  - vendor
  - .travis.yml
  - node_modules</pre></noscript>
<script src="https://gist.github.com/moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e.js"> </script>

<p>위의 코드는 <code class="highlighter-rouge">gist</code>를 이용하여 불러온 코드입니다.</p>

<p>중간쯤에</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">jekyll-paginate</span><span class="pi">,</span> <span class="nv">jekyll-feed</span><span class="pi">,</span> <span class="nv">jekyll-gist</span><span class="pi">]</span>
</code></pre></div></div>
<p>부분처럼 설치한 <code class="highlighter-rouge">jekyll-gist</code>를
추가시킵니다.</p>

<p>그리고 포스트를 하나 생성해서 다음과 같은 구문을 이용하여 gist를 불러오면 됩니다.
gist를 불러올 때 JavaScript 링크를 붙였넣는것이 아닙니다. 만약 불러올 링크가 아래와 같으면</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://gist.github.com/moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>여기에서</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e
</code></pre></div></div>
<p>부분만 이용합니다. <br />
즉, 아래와 같이 불러오시면 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% gist moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e %}

</code></pre></div></div>

<hr />

<p>한방에 된다면 좋겠지만 잘 안될 수 있습니다.</p>

<p>가장 많이 나는 오류는 <code class="highlighter-rouge">SSL_connect</code> 오류입니다. <code class="highlighter-rouge">Windows 10</code> 사용자들은 다음과 
같은 오류가 높은 확률로 발생합니다.</p>

<blockquote>
  <p><strong>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed</strong></p>
</blockquote>

<p>에러 메시지를 보니 그냥 해결할 수 있는 종류가 아닌 듯 보입니다. <code class="highlighter-rouge">Stack Overflow</code> 사이트에서 찾아보면 몇가지 해결 방안을 
발견할 수 있습니다.</p>

<p>command 창을 열고 다음과 같이 하나하나 실행 하시면 됩니다.</p>

<blockquote>
  <p><strong>gem update --system</strong></p>
</blockquote>

<blockquote>
  <p><strong>gem install rubygems-update</strong></p>
</blockquote>

<blockquote>
  <p><strong>update_rubygems</strong></p>
</blockquote>

<p>위의 과정은 <code class="highlighter-rouge">RubyGem</code>을 최신으로 upgrade 시키는 작업입니다.</p>

<p>그런 다음 <a href="./cacert.pem" target="_blank">링크</a>를 클릭해서 파일 하나를 다운로드 받습니다. 
이 파일은 <code class="highlighter-rouge">.pem</code> 파일로 certificate 역할을 하는 파일입니다.
파일을 다운로드해서 적절한 위치에 복사합니다. (원하는 폴더에 저장해놓으면 됩니다.)</p>

<p>저는 <code class="highlighter-rouge">D:/myRuby</code> 폴더를 생성하고 이 안에 해당 파일을 복사해 넣었습니다. 파일이름은 <code class="highlighter-rouge">cacert.pem</code>이라고 했습니다.</p>

<p><strong>이제 시스템 환경변수를 하나 생성합니다.</strong> 환경변수 이름은 <code class="highlighter-rouge">SSL_CERT_FILE</code>로 하셔야 하며 환경변수의 값으로
파일에 대한 절대경로를 넣어줍니다. 저같은 경우는 <code class="highlighter-rouge">D:/myRuby/cacert.pem</code>로 설정해야 겠네요.</p>

<p>여기까지 진행했으면 command 창을 다시 열어서(환경변수가 변경되었으니 다시 열어야죠!) 블로그를 다시 build 하시면 됩니다.</p>

<p>SSL_connect 문제에 대한 보다 자세한 설명은 <a href="https://github.com/jekyll/jekyll/issues/3985" target="_blank">링크</a>에서 
확인하실 수 있습니다.</p>

<hr />

<p>위와 같이 해서 Code Snippet을 원하는 곳에 붙여 사용할 수 있습니다. gist에서 제공하는
default theme가 맘에 안드시면 다음의 <a href="http://codersblock.com/blog/customizing-github-gists/" target="_blank">CUSTOMIZING GITHUB GISTS</a>를 
방문해 보세요. 조금만 살펴보시면 원하는 style로 gist를 사용하실 수 있습니다.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6)</title>
	  <link>https://moon9342.github.io/jekyll-sitemap</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-18T01:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-sitemap</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>Google Search Console 활용</strong></p>

<p>이번에는 우리의 GitHub Page를 Google 검색엔진에 노출시켜 작성한 글이 다른 사람에게 쉽게 노출되도록 
처리해 보겠습니다. 이 작업을 하지 않으면 작성된 글이 웹에 노출될 확률이 현저하게 떨어집니다.</p>

<p>Google이 제공하는 <code class="highlighter-rouge">Google Search Console</code>을 이용하여 내 GitHub Page의 domain을 등록시키고 <code class="highlighter-rouge">sitemap.xml</code>을
생성해 Search Console에 제출하면 됩니다. sitemap.xml을 등록해 두면 Google 검색 크롤러가 주기적으로
페이지를 크롤링하여 indexing하게 됩니다.</p>

<p>그럼 간단히 시작해 보겠습니다.</p>

<hr />

<blockquote>
  <p>먼저 <code class="highlighter-rouge">D:/blogmaker</code> 폴더 아래에 <code class="highlighter-rouge">robots.txt</code> 파일을 생성합니다.</p>
</blockquote>

<p>정확히 말하면 GitHub Page의 root밑에 <code class="highlighter-rouge">robots.txt</code>가 존재하면 됩니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">User-agent</span><span class="pi">:</span> <span class="err">*</span>
<span class="na">Allow</span><span class="pi">:</span> <span class="s">/</span>

<span class="na">Sitemap</span><span class="pi">:</span> <span class="s">https://moon9342.github.io/sitemap.xml</span>
</code></pre></div></div>

<p>GitHub Page를 이용하기 때문에 모든 검색엔진을 다 설정했습니다. 만약 특정 위치가 크롤링이 되지 않게끔
설정하려면 다음과 같이 처리하면 됩니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">User-agent</span><span class="pi">:</span> <span class="err">*</span>
<span class="na">Allow</span><span class="pi">:</span> <span class="s">/</span>
<span class="na">User-agent</span><span class="pi">:</span> <span class="err">*</span>
<span class="na">Disallow</span><span class="pi">:</span> <span class="s">/privateData/</span>

<span class="na">Sitemap</span><span class="pi">:</span> <span class="s">https://moon9342.github.io/sitemap.xml</span>
</code></pre></div></div>

<p>robots.txt에 대한 조금 더 자세한 설명을 보실려면 <a href="https://support.google.com/webmasters/answer/6062596?hl=ko&amp;ref_topic=6061961" target="_blank">여기</a>를 클릭하세요.</p>

<p>그런다음 <code class="highlighter-rouge">sitemap.xml</code>을 작성해야 합니다. sitemap.xml 역시 GitHub Page의 root밑에 존재해야 하며
추후에 Search Console에 제출해야 합니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">D:/blogmaker</code> 폴더 아래에 <code class="highlighter-rouge">sitemap.xml</code> 파일을 생성합니다.</p>
</blockquote>

<p>다음과 같은 형태로 작성합니다.</p>

<noscript><pre>---
layout: null
---

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;urlset xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;
        xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;
    {% for post in site.posts %}
    &lt;url&gt;
        &lt;loc&gt;{{ site.url }}{{ post.url }}.html&lt;/loc&gt;
        {% if post.lastmod == null %}
        &lt;lastmod&gt;{{ post.date | date_to_xmlschema }}&lt;/lastmod&gt;
        {% else %}
        &lt;lastmod&gt;{{ post.lastmod | date_to_xmlschema }}&lt;/lastmod&gt;
        {% endif %}

        {% if post.sitemap.changefreq == null %}
        &lt;changefreq&gt;weekly&lt;/changefreq&gt;
        {% else %}
        &lt;changefreq&gt;{{ post.sitemap.changefreq }}&lt;/changefreq&gt;
        {% endif %}

        {% if post.sitemap.priority == null %}
        &lt;priority&gt;0.5&lt;/priority&gt;
        {% else %}
        &lt;priority&gt;{{ post.sitemap.priority }}&lt;/priority&gt;
        {% endif %}

    &lt;/url&gt;
    {% endfor %}
&lt;/urlset&gt;
</pre></noscript>
<script src="https://gist.github.com/moon9342/08259614368774c030e9c518134ca98a.js"> </script>

<hr />

<p>작성이 끝났으면 이제 <a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank">Google Search Console</a>에 
접속합니다. 아래 처럼 자신의 Github page url을 입력합니다.</p>

<p><img src="assets/built/images/search_console_register.png" alt="Google Search Console Register" /></p>

<p>정상적으로 등록되면 아래와 같은 화면을 보실 수 있습니다.</p>

<p><img src="assets/built/images/search_console_menu.png" alt="Google Search Console Menu" /></p>

<p>왼쪽 메뉴의 크롤링 - Sitemaps를 선택해 <code class="highlighter-rouge">sitemap.xml</code>을 추가합니다. 먼저 테스트를 진행한 다음 이상이 없으면 
sitemap.xml 파일을 추가합니다. 정상적으로 처리되면 다음과 같은 화면을 보실 수 있습니다.</p>

<p><img src="assets/built/images/search_console_status.png" alt="Google Search Console status" /></p>

<blockquote>
  <p>추후에 <code class="highlighter-rouge">site:moon9342.github.io</code>을 브라우져 주소창에 넣고 접속하면 현재 indexing이 
어떻게 되어 있나를 확인할 수 있습니다.</p>
</blockquote>


	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5)</title>
	  <link>https://moon9342.github.io/jekyll-search</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-17T20:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-search</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>lunr.js를 이용한 Search 기능 추가</strong></p>

<p>Jekyll은 정적 사이트 generator이기 때문에 검색 기능이 따로 없습니다. 여러가지 방법을 동원해서 만들 수 
있긴 하지만 최종적으로 2가지 방법이 적당할 듯 보입니다.</p>

<p>하나는 <code class="highlighter-rouge">Google Custom Search</code>를 이용하여 블로그내 검색 기능을 추가하는 것입니다. 
쉽고 편하게 검색 기능을 붙이수는 있으나 다음과 같은 단점이 있습니다.</p>

<ul>
  <li><strong>광고가 뜬다</strong> ( 참을 수 있습니다. )</li>
  <li><strong>style을 조절하기가 쉽지 않다.</strong> ( 참기 힘듭니다. 안 예뻐요! )</li>
</ul>

<p>Google Custom Search는 일단 제외하고 조금 찾아보니 
<code class="highlighter-rouge">lunr.js</code>를 이용하면 검색 기능을 어렵지 않게 붙일 수 있을 듯 보였습니다. 
lunr.js는 client side full-text search engine입니다. 검색 기능을 붙이는 방식은 아래의
두 사이트를 참고 하였습니다.</p>
<ul>
  <li><a href="https://learn.cloudcannon.com/jekyll/jekyll-search-using-lunr-js/#introduction" target="_blank">Jekyll search using lunr.js</a></li>
  <li><a href="https://github.com/vuejs-kr/vuejs-kr.github.io/issues/29" target="_blank">한글 검색 패치</a></li>
</ul>

<p>Jasper2 theme가 가지고 있는 subscribe 화면을 수정해서 search 기능을 구현해 보겠습니다.</p>

<hr />

<p><a href="http://jekyllthemes.org/themes/jasper2/" target="_blank">Jasper2</a> theme는 subscribe 기능을 위한 링크를 가지고 있습니다.</p>

<p><img src="assets/built/images/subscriber_jasper.jpg" alt="subscriber 그림" /></p>

<p>해당 링크를 누르면 다음과 같은 그림을 볼 수 있습니다.</p>

<p><img src="assets/built/images/ghost-subscriber.png" alt="subscriber 그림" /></p>

<p>흠.. 새로운 포스트가 등록될 때마다 메일로 전송해주는 것이군요. 당연히 외부 기능을 제공받아야 사용할 수 있습니다.
Jasper2 theme는 말 그대로 theme입니다. 모양만 제공해 주는것이지요.</p>

<p>저는 이 화면을 검색 화면으로 대체해서 사용했습니다.</p>

<p>먼저 <code class="highlighter-rouge">_includes/site-nav.html</code>파일을 열어 블로그 안에서 표현되는 <strong>Subscribe</strong>라는 글자를 <strong>Search</strong>로 변경합니다.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"site-nav-right"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"social-links"</span><span class="nt">&gt;</span>
            {% if site.facebook %}
                <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"social-link social-link-fb"</span> 
                   <span class="na">href=</span><span class="s">"https://facebook.com/{{ site.facebook }}"</span> 
                   <span class="na">target=</span><span class="s">"_blank"</span> 
                   <span class="na">rel=</span><span class="s">"noopener"</span><span class="nt">&gt;</span>{% include facebook.html %}<span class="nt">&lt;/a&gt;</span>
            {% endif %}
            {% if site.twitter %}
                <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"social-link social-link-tw"</span> 
                   <span class="na">href=</span><span class="s">"https://twitter.com/{{ site.twitter }}"</span> 
                   <span class="na">target=</span><span class="s">"_blank"</span> 
                   <span class="na">rel=</span><span class="s">"noopener"</span><span class="nt">&gt;</span>{% include twitter.html %}<span class="nt">&lt;/a&gt;</span>
            {% endif %}
        <span class="nt">&lt;/div&gt;</span>
        {% if site.subscribers %}
            <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"subscribe-button"</span> <span class="na">href=</span><span class="s">"#subscribe"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/a&gt;</span>
        {% endif %}
    <span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<p>맨 아래쪽</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"subscribe-button"</span> <span class="na">href=</span><span class="s">"#subscribe"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>
<p>라고 보이는 부분을 수정했습니다.
(단순히 <strong>Subscribe</strong>라는 글자를 <strong>Search</strong>로 변경했습니다.)</p>

<p>그 다음은 화면을 검색 페이지에 맞게 수정하는 것입니다.
<code class="highlighter-rouge">_layouts/default.html</code>을 열어서 검색 화면으로 수정합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% if site.subscribers %}
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"subscribe"</span> <span class="na">class=</span><span class="s">"subscribe-overlay"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"subscribe-overlay-close"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;&lt;/a&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"subscribe-overlay-content"</span><span class="nt">&gt;</span>
                {% if site.logo %}
                    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"subscribe-overlay-logo"</span> 
                         <span class="na">src=</span><span class="s">"{{ site.baseurl }}{{ site.logo }}"</span> 
                         <span class="na">alt=</span><span class="s">"{{ site.title }}"</span> <span class="nt">/&gt;</span>
                {% endif %}
                <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"subscribe-overlay-title"</span><span class="nt">&gt;</span>Search {{ site.title }}<span class="nt">&lt;/h1&gt;</span>
                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"subscribe-overlay-description"</span><span class="nt">&gt;</span>
                lunr.js를 이용한 posts 검색 <span class="nt">&lt;/p&gt;</span>
                {% include subscribe-form.html placeholder="keyword" %}
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
{% endif %}

</code></pre></div></div>

<p>그 다음으로 <code class="highlighter-rouge">_includes/subscribe-form.html</code>을 열어서 수정했습니다.</p>

<p>코드는 아래와 같습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"searchform"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">action=</span><span class="s">"/subscribe/"</span> <span class="na">class=</span><span class="s">""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"confirm"</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"confirm"</span>  <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"location"</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"location"</span>  <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"referrer"</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"referrer"</span>  <span class="nt">/&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"subscribe-email"</span> <span class="na">onkeyup=</span><span class="s">"myFunc()"</span> 
               <span class="na">id=</span><span class="s">"searchtext"</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"searchtext"</span>  
               <span class="na">placeholder=</span><span class="s">"Search..."</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
        <span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">"#searchtext"</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
                <span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s2">"/search.html?query="</span> <span class="o">+</span> <span class="nx">url</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<p>기존 코드를 수정한것이기 때문에 불필요한 코드도 좀 들어가 있습니다. 중요한 내용은
입력상자에서 검색어를 입력하고 enter를 누르면 <code class="highlighter-rouge">search.html</code>페이지로 이동하면서
검색 결과가 search.html에 출력된다는 정도입니다.</p>

<p>이제 검색 결과가 표현될 <code class="highlighter-rouge">D:/blogmaker/search.html</code>을 생성해서 다음과 같은 코드를 삽입합니다.</p>

<noscript><pre>---
layout: page
current: search
title: Search Result
navigation: true
logo:
class: page-template
subclass: &#39;post page&#39;
---

&lt;form action=&quot;/search&quot; method=&quot;get&quot; hidden=&quot;hidden&quot;&gt;
    &lt;label for=&quot;search-box&quot;&gt;&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;search-box&quot; name=&quot;query&quot;&gt;
&lt;/form&gt;

&lt;ul class=&quot;mylist&quot; id=&quot;search-results&quot;&gt;&lt;/ul&gt;

&lt;script&gt;
    window.store = {
    {% for post in site.posts %}
    &quot;{{ post.url | slugify }}&quot;: {
        &quot;title&quot;: &quot;{{ post.title | xml_escape }}&quot;,
            &quot;author&quot;: &quot;{{ post.author | xml_escape }}&quot;,
            &quot;category&quot;: &quot;{{ post.category | xml_escape }}&quot;,
            &quot;content&quot;: {{ post.content | strip_html | strip_newlines | jsonify }},
        &quot;url&quot;: &quot;{{ post.url | xml_escape }}&quot;
    }
    {% unless forloop.last %},{% endunless %}
    {% endfor %}
    };
&lt;/script&gt;
&lt;script src=&quot;assets/js/lunr.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/search.js&quot;&gt;&lt;/script&gt;</pre></noscript>
<script src="https://gist.github.com/moon9342/1f153f7b05e262e4e9849e1017bd1608.js"> </script>

<hr />

<p>이제 마지막 단계만 남았습니다. 사용되는 <code class="highlighter-rouge">lunr.js</code>와 <code class="highlighter-rouge">search.js</code>를 <code class="highlighter-rouge">assets/js</code> 폴더 안에 복사해 주어야 합니다.</p>

<p><code class="highlighter-rouge">lunr.js</code>는 <a href="https://lunrjs.com/" target="_blank">https://lunrjs.com/</a>에서 받으실 수 있습니다. CDN을 이용하셔도 됩니다.</p>

<p><code class="highlighter-rouge">search.js</code>는 다음과 같은 코드로 작성합니다.</p>

<noscript><pre>(function() {
    function displaySearchResults(results, store) {
        var searchResults = document.getElementById(&#39;search-results&#39;);

        if (results.length) { // Are there any results?
            var appendString = &#39;&#39;;

            for (var i = 0; i &lt; results.length; i++) {  // Iterate over the results
                var item = store[results[i].ref];
                appendString += &#39;&lt;li&gt;&lt;a href=&quot;&#39; + item.url + &#39;&quot;&gt;&lt;h6&gt;&#39; + item.title + &#39;&lt;/h6&gt;&lt;/a&gt;&#39;;
                appendString += &#39;&lt;p&gt;&#39; + item.content.substring(0, 150) + &#39;...&lt;/p&gt;&lt;/li&gt;&#39;;
            }

            searchResults.innerHTML = appendString;
        } else {
            searchResults.innerHTML = &#39;&lt;li&gt;검색 결과가 없습니다.&lt;/li&gt;&#39;;
        }
    }

    function getQueryVariable(variable) {
        var query = window.location.search.substring(1);
        var vars = query.split(&#39;&amp;&#39;);

        for (var i = 0; i &lt; vars.length; i++) {
            var pair = vars[i].split(&#39;=&#39;);

            if (pair[0] === variable) {
                return decodeURIComponent(pair[1].replace(/\+/g, &#39;%20&#39;));
            }
        }
    }

    function trimmerEnKo(token) {
        return token
            .replace(/^[^\w가-힣]+/, &#39;&#39;)
            .replace(/[^\w가-힣]+$/, &#39;&#39;);
    };

    var searchTerm = getQueryVariable(&#39;query&#39;);

    if (searchTerm) {
        document.getElementById(&#39;search-box&#39;).setAttribute(&quot;value&quot;, searchTerm);

        // Initalize lunr with the fields it will be searching on. I&#39;ve given title
        // a boost of 10 to indicate matches on this field are more important.
        var idx = lunr(function () {
            this.pipeline.reset();
            this.pipeline.add(
                trimmerEnKo,
                lunr.stopWordFilter,
                lunr.stemmer
            );
            this.field(&#39;id&#39;);
            this.field(&#39;title&#39;, { boost: 10 });
            this.field(&#39;author&#39;);
            this.field(&#39;category&#39;);
            this.field(&#39;content&#39;);
        });

        for (var key in window.store) { // Add the data to lunr
            idx.add({
                &#39;id&#39;: key,
                &#39;title&#39;: window.store[key].title,
                &#39;author&#39;: window.store[key].author,
                &#39;category&#39;: window.store[key].category,
                &#39;content&#39;: window.store[key].content
            });

            var results = idx.search(searchTerm); // Get lunr to perform a search
            displaySearchResults(results, window.store); // We&#39;ll write this in the next section
        }
    }
})();</pre></noscript>
<script src="https://gist.github.com/moon9342/63318d1b20611f28e43ccd9c938adf25.js"> </script>

<hr />

<p>잘 동작하는지 한번 실행시켜보겠습니다.</p>

<p><img src="assets/built/images/lunr-search-page.png" alt="lunr search page" /></p>

<p><img src="assets/built/images/lunr-search-result.png" alt="lunr search page" /></p>

<p>검색 결과 화면에 대한 css는 취향에 맞게 설정해 사용하면 됩니다.!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4)</title>
	  <link>https://moon9342.github.io/jekyll-rouge</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-17T19:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-rouge</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>rouge를 이용한 syntax highlighting</strong></p>

<p><code class="highlighter-rouge">rouge</code>는 pure-ruby syntax highlighter입니다. 이를 이용하면 블로그에 코드를 붙여넣을 때 
간단하게 syntax highlighting 기능을 이용할 수 있습니다.
Jekyll은 syntax highlighting을 위해 <code class="highlighter-rouge">Pygments</code>도 지원했었는데 <code class="highlighter-rouge">Jekyll 3</code>(2016년 02월)부터 Pygments를
<strong>지원하지 않습니다.</strong></p>

<p><code class="highlighter-rouge">_config.yml</code> 설정 파일에 다음과 같이 설정한 부분이 있습니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Jekyll configuration</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">kramdown</span>
<span class="c1"># kramdown : markdown의 개조판.</span>
<span class="c1"># markdown에서 불편한 사항을 개선한 형태.</span>

<span class="na">highlighter</span><span class="pi">:</span> <span class="s">rouge</span>
<span class="c1"># text highlighter로 rouge이용</span>
<span class="c1"># 2016.02월 이후로 syntax highlighter는 rouge만 지원.</span>
<span class="c1"># Pygments 사용불가.</span>
<span class="nn">...</span>
<span class="nn">...</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">_config.yml</code>에 설정은 잡아놨는데 실제 설치는 아직 안했습니다. gem을 이용하여 rouge를 설치합니다.</p>

<p>command 창을 열어서 다음과 같이 입력합니다.</p>

<blockquote>
  <p><strong>gem install rouge</strong></p>
</blockquote>

<p><img src="assets/built/images/gem_install_rouge.png" alt="rouge 설치" /></p>

<p>rouge는 특정 style을 가진 css파일을 생성하기 위한 <strong>command-line tool</strong>을 가지고 있습니다. 
<code class="highlighter-rouge">rougify</code>명령을 이용하면 우리가 원하는 스타일의 css 파일을 생성할 수 있습니다.</p>

<p>일단 다음의 명령어로 어떤 스타일을 사용할 수 있는지 확인합니다.</p>

<blockquote>
  <p><strong>rougify help style</strong></p>
</blockquote>

<p><img src="assets/built/images/rouge_theme.png" alt="rouge 설치" /></p>

<p>아래 부분에 available themes가 보이는 군요. 여기에서 맘에 드는거 하나를 선택해서 <code class="highlighter-rouge">style.css</code>를 생성할 수 있습니다.
제가 사용하고 있는 theme는 <code class="highlighter-rouge">monokai.sublime</code> 입니다.</p>

<p>이제 다음과 같은 명령어로 원하는 theme로 css 파일을 생성합니다.</p>

<blockquote>
  <p><strong>rougify style monokai.sublime &gt; assets/css/syntax.css</strong></p>
</blockquote>

<p>자 이제 <code class="highlighter-rouge">D:/blogmaker/assets/css/syntax.css</code> 파일이 생성되었습니다. 이 css파일에 대한 링크를 
post에서 사용할 수 있도록 <code class="highlighter-rouge">_layouts/default.html</code>에 추가해야 합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="c">&lt;!-- Document Settings --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span> <span class="nt">/&gt;</span>

    <span class="c">&lt;!-- Base Meta --&gt;</span>
    ...
    ...   

    <span class="c">&lt;!-- 웹 폰트 설정 --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> 
          <span class="na">href=</span><span class="s">"https://fonts.googleapis.com/earlyaccess/nanumgothic.css"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- syntax.css --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/built/syntax.css"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p><strong>새로운 css 파일이 생성되었으니 gulp를 이용해 css task를 실행시켜야 합니다. 그래야 minified된 css파일이
생성이 되서 블로그에서 이용할 수 있을 테니까요.</strong></p>

<p>이제 준비가 끝났습니다. 포스트에서 글 작성할 때 다음과 같은 <code class="highlighter-rouge">code block</code>을 이용하게 됩니다.
code block에 대해 사용하는 언어를 명시해 주면 그에 맞춰 문법 강조를 하게 됩니다.</p>
<pre> 
~~~javascript
function syntaxHighlight(code) {
   var foo = 'Hello World';
   var bar = 100;
}
~~~
</pre>

<p>위의 코드에 대한 결과입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">syntaxHighlight</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">'Hello World'</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3)</title>
	  <link>https://moon9342.github.io/jekyll-font</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-16T18:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-font</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>웹 폰트 설정</strong></p>

<p>블로그를 운영할 때 가장 신경써야 하는 부분 중 하나는 <code class="highlighter-rouge">readability</code>입니다. Jasper2는 영문일 경우 상당히 가독성이 좋은데
한글을 사용하니 폰트때문에 가독성이 확 떨어지더군요. 그래서 폰트를 좀 바꾸어봤습니다.</p>

<p><strong>당연한 말이지만 이 부분은 “이게 정답이다” 라는게 아닙니다.</strong>  전 이렇게 바꾸었어요~ 하는 부분이지요.
하지만 대부분의 Jekyll theme가 비슷한 구조를 가지고 있기 때문에 다른 theme를 사용하실 때 비슷하게 적용하실 수 있을
듯 합니다.</p>

<hr />

<p>먼저 사용할 웹 폰트를 물색해야 합니다. 구글에서 찾아보면 원하시는 웹 폰트를 쉽게 찾을 수 있습니다.
만만한 나눔고딕 폰트를 이용해 보겠습니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">link</span> <span class="nt">rel</span><span class="o">=</span><span class="s1">"stylesheet"</span> <span class="nt">href</span><span class="o">=</span><span class="s1">"https://fonts.googleapis.com/earlyaccess/nanumgothic.css"</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>나눔고딕 폰트에 대한 링크입니다.</p>

<p>이제 <code class="highlighter-rouge">_layout/default.html</code> 파일을 열어서 해당 폰트 링크를 넣어줍니다. 다음과 비슷하게 되겠네요.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>

    <span class="c">&lt;!-- Document Settings --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span> <span class="nt">/&gt;</span>

    <span class="c">&lt;!-- Base Meta --&gt;</span>
    ...
    ...

    <span class="c">&lt;!-- 웹 폰트 설정 --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://fonts.googleapis.com/earlyaccess/nanumgothic.css"</span><span class="nt">&gt;</span>

</code></pre></div></div>

<p>이제 css파일을 수정해서 특정 class에 대한 font-family에 나눔고딕 폰트를 추가해 주면 되겠네요.
Jasper2에서 일반적인 포스트는 모두 <code class="highlighter-rouge">.post-full-content</code> css class의 영향을 받습니다.
다른 theme를 이용하시는 분은 포스트들이 어떤 css class에 영향을 받는지를 확인하셔서 
그 class를 찾아 수정하시면 됩니다.</p>

<p><code class="highlighter-rouge">assets/css/screen.css</code> 파일을 열어서 <code class="highlighter-rouge">.post-full-content</code> 부분을 찾아 다음과 같이 수정합니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.post-full-content</span> <span class="p">{</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">70px</span> <span class="m">100px</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">min-height</span><span class="p">:</span> <span class="m">230px</span><span class="p">;</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Nanum Gothic'</span><span class="p">,</span> <span class="n">Georgia</span><span class="p">,</span> <span class="nb">serif</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">2.2rem</span><span class="p">;</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1.6em</span><span class="p">;</span>
    <span class="nl">background</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>css가 변경되었으니 <code class="highlighter-rouge">gulp</code>를 이용하여 css task를 수행합니다. Jasper2 theme는 
gulp에 대한 설정을 포함하고 있습니다. <code class="highlighter-rouge">NPM</code>(Node Package Manager)를 이용해
gulp를 설치하고 <code class="highlighter-rouge">gulpfile.js</code> 파일을 이용해 css task를 수행하면 
결과적으로 <code class="highlighter-rouge">assets/built</code> 폴더에 수정된 내용으로 minified된 css파일이 생성되게 됩니다.</p>

<p>이제 다시 <code class="highlighter-rouge">bundle exec jekyll serve</code>을 수행하면 새로 만들어진 css를 이용하여 
블로그가 생성될 것이고 한글로 쓴 내용이 나눔고딕으로 변경되는 것을 볼 수 있습니다.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2)</title>
	  <link>https://moon9342.github.io/jekyll-struct</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-16T12:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-struct</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>Github Page Publishing</strong></p>

<p>이전 포스트에서 로컬 서버를 실행시켜 <a href="http://jekyllthemes.org/themes/jasper2/" target="_blank">Jasper2</a> theme를 이용한 블로그가 
실행되는 것 까지 확인을 했습니다.</p>

<p><code class="highlighter-rouge">Jasper2</code>나 혹은 다른 theme를 사용하실 때도 이제부터가 문제입니다. 자신의 입맛에 맞도록 theme를 수정해야 하는데
이게 쉬운일이 아닙니다. 개발쪽에 있으신 분들은 쉽게 접근하실 수 있지만 그렇지 않은 경우 상당히 난해합니다.
<strong>“그냥 <code class="highlighter-rouge">Tistory</code> 쓰고말지”</strong> 라는 말이 나올정도로요.</p>

<p>사실 GitHub Page에서 블로그를 운영하는 사람들 중 많은 사람이 Front-End 개발이 가능한 사람들 입니다.</p>

<hr />

<p><a href="https://jekyllrb-ko.github.io/" target="_blank">Jekyll</a>은 정적 사이트 생성기 입니다. Liquid template을 기반으로 
<code class="highlighter-rouge">markdown</code>형식의 텍스트파일을 HTML로 변환해주는 변환 도구라고 보시면 됩니다.</p>

<p>이전 포스트에서 Jasper2 theme를 압축해제한 폴더를 기억하시나요? <code class="highlighter-rouge">D:/blogmaker</code> 였습니다. 
<strong>이 폴더가 <code class="highlighter-rouge">Jekyll Source Folder</code>가 됩니다.</strong></p>

<p>이 Jekyll Source Folder 안의 <code class="highlighter-rouge">_post</code>라는 폴더에 우리가 작성하려는 글을 markdown 형식으로 작성합니다. 
그런 후 <code class="highlighter-rouge">bundle exec jekyll serve</code> 명령을 이용하면 build시키면 저장된 글에 대해 컴파일이 진행되고 
결과물이 destination 폴더에 생성됩니다.</p>

<p>Github page에 올려 사용하는 실제적인 블로그가 바로 이 destination 폴더 안에 있는 내용입니다. 따라서 
Git을 이용하여 변환된 결과물(destination 폴더안의 내용)을 GitHub Repository에 push해 주어야 합니다.</p>

<p>그럼 천천히 진행해 보겠습니다.</p>

<hr />

<p>위에서 언급했듯이 <code class="highlighter-rouge">D:/blogmaker</code>가 우리의 Jekyll Source Folder입니다.
설정을 이용해 컴파일 과정을 거치면 destination 폴더에 결과물을 저장하게 됩니다. 
Jekyll은 YAML 파일로 설정을 지정합니다.
(<code class="highlighter-rouge">YAML</code>에 대한 간단한 설명은 <a href="./what_is_yaml.html" target="_blank">YAML이란</a> 링크를 클릭해 보세요.)</p>

<p>이 설정에 대한 파일이 바로 <code class="highlighter-rouge">_config.yml</code>입니다. 블로그 생성에 대한 전체 환경 세팅을 담당하는 파일이라고 생각하시면 됩니다.</p>

<blockquote>
  <p><code class="highlighter-rouge">D:/blogmaker</code>폴더안에서 <code class="highlighter-rouge">_config.yml</code>을 찾아 해당내용을 자신에 맞게 수정해서 사용해야 합니다.</p>
</blockquote>

<p>아래는 <code class="highlighter-rouge">_config.yml</code>에 대한 내용과 그 설명입니다. 주석이 달린 부분을 중심으로 보시면 됩니다.</p>

<noscript><pre># Jekyll configuration
markdown: kramdown
# kramdown : markdown의 개조판.
# markdown에서 불편한 사항을 개선한 형태.

highlighter: rouge
# text highlighter로 rouge이용
# 2016.02월 이후로 syntax highlighter는 rouge만 지원.
# Pygments 사용불가.

paginate: 10
# 작성한 모든 post를 하나의 페이지에 열거할 수 없으니
# pagination이 필요하고 몇개의 post를 하나의 page에서
# 보여줄 건지를 설정.

language: &#39;en-uk&#39;
# 언어 설정

url: https://moon9342.github.io
# Google Search Console에서 사용하는 sitemap.xml 생성시
# 이 url key값이 존재하지 않으면 sitemap.xml이
# 정상적으로 생성되지 않는다.
# 또한 disqus(댓글시스템)를 이용하기 위해서도 필요.
# 자신의 github page url을 입력
# ( https://your_github_id.github.io 형식 )

baseurl: /

# Website info
title: IT Blog
# 자신의 blog title.

description: Development &amp; Technical Training
# blog home에 표시될 blog에 대한 전반적인 설명.

cover: assets/built/images/blog-cover.png
# blog home에 표시될 blog cover image.

logo:
logo_dark:

favicon: assets/built/images/favicon.jpg
# favicon으로 사용할 image

production_url: https://moon9342.github.io/
# 최종적으로 blog가 운영될 url

source_url: https://github.com/moon9342/GitHubPageMaker/
# blogmaker(jekyll source folder)에 대한 github repository

# Social info
navigation: True
# Navigation bar link를 보여줄건지 여부

subscribers: True
# subscriber 기능을 사용할건지의 여부
# 저는 약간의 수정을 통해 subscriber 기능대신
# lunr.js를 이용한 검색 기능으로 대체 사용했습니다.
# 검색기능으로 대체하기 위해서
# `_includes/subscribe-form.html` 파일의 수정이 필요합니다.

twitter:
facebook:
# 만약 twitter와 facebook을 이용하면 username을 입력

# Disqus
disqus: True
disqus_shortname: sunghoons-blog
# disqus는 온라인 댓글 시스템. 댓글 기능을 사용하기 위해
# disqus를 이용할 것인지 여부와 만약 사용하면
# disqus shortname을 입력 ( disqus username이 아님 )


# Google Analytics
google_analytics:  # replace with your GA tracking identifier
# Google Analytics을 사용할 경우 GA tracking identifier를 입력

# Permalinks
permalink: /:title
# permalink: /author/:author
# permalink: /tag/:title
# 각각의 post에 고정주소를 어떤 방식으로 할당할 것인지를 결정
# 이 값을 바꾸면 작성한 포스트의 저장위치나 파일이름이 변경된다.

# gems and other configs
plugins: [jekyll-paginate, jekyll-feed, jekyll-gist]
exclude: [vendor]

feed:
  path: feed.xml

# Travis-CI 설정입니다.
safe: False
lsi: False

username: moon9342
repo: GitHubPageMaker
# username : travis-ci와 연동하는 github의 username
# repo: travis-ci와 연동하는 github의 repository이름
# https://github.com/&lt;username&gt;/&lt;repository&gt;

branch: master
# 사용할 branch명

relative_source: 

destination: ./output/
# compile된 결과가 생성되는 폴더
# 이 폴더안의 내용이 우리가 운영하는 블로그 내용이 컴파일되서 들어간다.
# 이 폴더안의 내용을 github repository(https://username.github.io)에 push
# 만약 Travis-CI를 이용할 예정이면 이 부분을 git submodule로
# github repository(https://username.github.io)에 연결해야 한다.

production_url:  https://moon9342.github.io/
source_url:  https://github.com/moon9342/GitHubPageMaker/

# exclude는 Jekyll컴파일 시 destination에 포함될 필요가
# 없는것들을 명시한다. (node_modules는 포함시키자)
exclude:
  - README.md
  - Rakefile
  - Gemfile
  - Gemfile.lock
  - changelog.md
  - &quot;*.Rmd&quot;
  - vendor
  - .travis.yml
  - node_modules</pre></noscript>
<script src="https://gist.github.com/moon9342/d37bb68b8a51c21d4fe6d1b03dfdfa3e.js"> </script>

<hr />

<p>위의 설정파일에 <br />
<code class="highlighter-rouge">destination: ./output/</code>으로 설정되어 있기 때문에 
<strong>“bundle exec jekyll serve”</strong> 명령을 수행하면
<code class="highlighter-rouge">D:/blogmaker/output/</code> 폴더가 생성되고 여기에 컴파일된 결과파일들이 저장되게 됩니다.</p>

<p>결과파일을 <code class="highlighter-rouge">D:/blogmaker</code> ( Jekyll Source Folder )밑의 output folder로 지정한 이유는 나중에 <code class="highlighter-rouge">Travis-CI</code>와
연동하기 위해서 입니다. ( git submodule로 처리하기 위함입니다. )</p>

<p>Travis-CI를 이용하지 않고 그냥 수동으로 결과파일을 자신의 GitHub Page에 올리려면 
설정파일에 <code class="highlighter-rouge">destination: ../[GitHubPage]/</code>과 같은 형식으로 설정하시면 됩니다.
설정 후 <strong>“bundle exec jekyll serve”</strong> 명령을 수행하면
<code class="highlighter-rouge">D:/[GitHubPage]/</code>라는 폴더가 생성되고 여기에 컴파일된 결과파일들이 저장되게 됩니다.</p>

<p><strong>Jekyll build 작업을 할 때 한가지 주의해야 할 점이 있습니다.</strong></p>

<p>기본적으로 Jekyll build는 development 세팅으로 진행됩니다. 만약 실제 GitHub Page에 Publishing할
목적으로 build하는 것이라면 <code class="highlighter-rouge">JEKYLL_ENV</code> 환경변수의 값을 <code class="highlighter-rouge">production</code>으로 설정한 후 build를 진행해야 
합니다. (<a href="https://jekyllrb.com/docs/usage/#override-default-development-settings" target="_blank">참고링크</a>)</p>

<blockquote>
  <p>위의 작업을 하지 않으면 정상적으로 URL이 생성되지 않습니다. 
(http://localhost:4000 으로 세팅됩니다.)</p>
</blockquote>

<hr />

<p><code class="highlighter-rouge">Travis-CI</code>에 대한 설정은 다른 포스트에서 살펴보기로 하고 여기서는 수동으로 결과 파일을 Git Repository
(GitHub Page에 대한 Repository)에 올리는 것으로 설명합니다.</p>

<p>이제 <code class="highlighter-rouge">D:/[GitHubPage]/</code>파일안의 내용을 GitHub Page에 publishing하시면 됩니다.</p>

<blockquote>
  <p>먼저 <a href="http://github.com/" target="_blank">GitHub</a>에 접속해서 새로운 repository를 생성합니다. 주의할 점은
repository의 이름을 (자신의 github id).github.io로 지정해야 합니다.</p>
</blockquote>

<blockquote>
  <p>Git을 이용하여 방금 만든 <code class="highlighter-rouge">D:/[GitHubPage]/</code> 안의 내용을 repository에 push합니다.</p>
</blockquote>

<p>정상적으로 push가 진행되었다면 이제 https://(자신의 github id).github.io로 접속해서 블로그가 잘 
개설이 되었는지 확인합니다.</p>

<p>이 포스트에서는 <code class="highlighter-rouge">Git</code>과 <code class="highlighter-rouge">GitHub</code>에 대한 기본적인 사용법에 대해서는 다루지 않습니다. 해당 부분은 다른 포스트나
혹은 <a href="https://rogerdudler.github.io/git-guide/index.ko.html" target="_blank">여기</a>를 이용하여 살펴보시면
될 듯 합니다.</p>

<hr />

<p>GitHub Page에 블로그가 잘 개설되었나요? 블로그가 잘 개설되었다면 이제 메뉴를 원하는 형식으로 바꾸고 
새로운 내용의 post도 작성해서 블로그에 올리시면 됩니다. <code class="highlighter-rouge">_posts</code> 폴더에 기존에 있는 <code class="highlighter-rouge">.md</code> file을 복사해서
새로운 내용을 만들고 포스팅 작업을 해 보세요.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1)</title>
	  <link>https://moon9342.github.io/jekyll-start</link>
		
				
						<author>jekyll</author>
				
		
				
		
				
		
				
		
	  <pubDate>2018-01-15T15:00:00+00:00</pubDate>
	  <guid>https://moon9342.github.io/jekyll-start</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성은 여러 절로 구성되어 있습니다.</span></p>
<ul class="table-of-contents-list">
    <li><a href="./jekyll-start.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(1) - 환경설정</a></li>
    <li><a href="./jekyll-struct.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(2) - Github Page Publishing</a></li>
    <li><a href="./jekyll-font.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(3) - 웹 폰트 설정</a></li>
    <li><a href="./jekyll-rouge.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(4) - rouge를 이용한 syntax highlighting</a></li>
    <li><a href="./jekyll-search.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(5) - lunr.js를 이용한 Search 기능 추가</a></li>
    <li><a href="./jekyll-sitemap.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(6) - Google Search Console 활용</a></li>
    <li><a href="./jekyll-gist.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(7) - GitHub Gist 활용</a></li>
    <li><a href="./jekyll-travis-ci-public.html">Jasper2 Theme를 이용한 Jekyll 기반의 GitHub Page 생성(8) - Travis CI 활용(public Repository)</a></li>
</ul>

<hr />

<p><strong>환경설정</strong></p>

<p><code class="highlighter-rouge">Jekyll</code>을 이용한 기본적인 Github page를 생성하는 방법은 여러 블로그에 자세하게 나와 있으니 저는 제가 사용하는 
<a href="http://jekyllthemes.org/themes/jasper2/" target="_blank">Jasper2</a> theme를 이용하여 Github page를 생성하고 사용하는 방법에 대해서 알아보겠습니다.
(<code class="highlighter-rouge">Windows 10</code>환경으로 진행합니다.)</p>

<blockquote>
  <p>Windows 환경은 조금 까다롭습니다. <code class="highlighter-rouge">Ruby</code> 때문에 그렇습니다. 
<strong>먼저 컴퓨터의 계정 ID가 한글로 되어 있으면 여러 문제가 발생합니다.
한글계정이라면 먼저 계정부터 영문으로 바꾸고 시작해야 합니다.</strong>
아래의 그림처럼 컴퓨터의 계정이 영문으로 되어있는지 확인합니다.</p>
</blockquote>

<p><img src="assets/built/images/windows_account.jpg" alt="영문이름의 계정" /></p>

<p>제일 먼저 해야하는 작업은 <code class="highlighter-rouge">Ruby</code>를 설치하는 것입니다.</p>

<p><code class="highlighter-rouge">Ruby</code>는 <a href="https://rubyinstaller.org/downloads/" target="_blank">RubyInstaller for Windows</a> 에서 받으시면 됩니다.
사용할 버전은 <code class="highlighter-rouge">2.2.6</code>입니다. 다른 버전 사용할 경우 문제가 발생할 여지가 있습니다. 파란색 박스로 되어 있는 링크를 눌러
파일을 받으시면 됩니다.</p>

<p><img src="assets/built/images/ruby_download.jpg" alt="루비 버전" /></p>

<p>다운로드 받은 <code class="highlighter-rouge">Ruby</code>를 설치합니다.  아래 그림과 같이 기본 경로(<code class="highlighter-rouge">C:/Ruby22-x64</code>)에 PATH 환경변수 설정만 추가해서 설치합니다.</p>

<p><img src="assets/built/images/ruby_install.png" alt="루비 설치" /></p>

<p>Ruby 설치가 끝나면 <code class="highlighter-rouge">DevKit</code>을 설치해야 합니다. 
DevKit을 설치하지 않으면 Jekyll 설치할 때 Error가 발생합니다.</p>

<p><code class="highlighter-rouge">Ruby</code>의 <code class="highlighter-rouge">DevKit</code>은 마찬가지로 <a href="https://rubyinstaller.org/downloads/" target="_blank">RubyInstaller for Windows</a> 
에서 받으시면 됩니다. 파란색 박스로 되어 있는 링크를 눌러 파일을 다운로드 합니다. ( 64bit기준 )</p>

<p><img src="assets/built/images/ruby_devkit_download.jpg" alt="루비 DevKit" /></p>

<p>다운로드받은 파일을 실행하고 압축이 풀릴 폴더를 지정합니다. <code class="highlighter-rouge">C:/RubyDevKit</code>으로 지정합니다. 
(다른 경로를 사용해도 무방합니다.)</p>

<p>따로 설치파일이 존재하는게 아니기 때문에 command 창을 열어서 초기화 및 설치작업을 진행합니다.</p>

<blockquote>
  <p><strong>ruby dk.rb init</strong></p>
</blockquote>

<blockquote>
  <p><strong>ruby dk.rb install</strong></p>
</blockquote>

<p><img src="assets/built/images/ruby_devkit_init.png" alt="루비 DevKitInit" /></p>

<p>이제 <code class="highlighter-rouge">bundler</code>를 설치합니다. bundler는 Ruby application 개발을 위한 일관된 환경을 제공합니다. 단편적 기능 중 하나는
Ruby application이 사용하는 gem의 dependency를 관리하는 것입니다. 우리는 나중에 이 bundler를 이용하여 Jekyll을
사용할 것이기 때문에 설치해야 합니다.</p>

<blockquote>
  <p><strong>gem install bundler</strong></p>
</blockquote>

<hr />

<p>기본적인 준비과정은 끝났습니다.<br />
그 다음 과정은 우리가 사용할 Theme인 <a href="http://jekyllthemes.org/themes/jasper2/" target="_blank">Jasper2</a>를 다운받아서 원하는 폴더에 
압축을 풀어줍니다. <code class="highlighter-rouge">D:/blogmaker</code>에 다음과 같은 형태로 압축을 풀어 저장했습니다.</p>

<blockquote>
  <p>여기서 주의해야 할 점은 <strong>폴더 이름에 공백이 포함되어 있으면 나중에 
css빌드할 때 문제가 발생</strong>합니다. 즉, <code class="highlighter-rouge">D:/blogmaker</code>처럼 폴더는 소문자로 공백없이 생성합니다.</p>
</blockquote>

<p><img src="assets/built/images/folder-status.png" alt="폴더 구조" /></p>

<p>command 창을 열어서 해당 폴더(<code class="highlighter-rouge">D:/blogmaker</code>)에서 다음과 같이 실행합니다.</p>

<blockquote>
  <p><strong>bundle exec jekyll serve</strong></p>
</blockquote>

<p>다음과 같은 에러가 발생합니다.</p>

<blockquote>
  <p><strong>Could not find gem ‘jekyll (~&gt; 3.6.2) x64-mingw32’ in any of the gem sources listed in your Gemfile.
 Run <code class="highlighter-rouge">bundle install</code> to install missing gems.</strong></p>
</blockquote>

<p>command 창에서 다음의 명령을 차례로 입력해 필요한 <code class="highlighter-rouge">gem</code>을 설치합니다.</p>

<blockquote>
  <p><strong>gem cleanup</strong></p>
</blockquote>

<blockquote>
  <p><strong>bundle install</strong></p>
</blockquote>

<p>이제 다시 아래와 같은 명령을 이용하여 실행시킵니다.</p>
<blockquote>
  <p><strong>bundle exec jekyll serve</strong></p>
</blockquote>

<p>Jekyll은 template처리를 위해 <code class="highlighter-rouge">Liquid</code> template 언어를 사용합니다. template 처리를 거쳐 결과 파일이
특정 폴더에 저장되고 로컬 웹 서버가 실행되어서 로컬에서 블로그를 확인해 볼 수 있습니다.
<code class="highlighter-rouge">build</code> 과정을 거쳐 로컬 웹서버를 이용하여 웹 서비스까지 실행시켜주는 명령이라고 생각하시면 됩니다.</p>

<p>아래와 같은 메시지가 출력되면서 로컬 웹 서버가 4000번 포트로 기동되고 
<code class="highlighter-rouge">http://localhost:4000/jasper2</code>로 접속하면 테마페이지를 보실 수 있습니다.</p>

<p><img src="assets/built/images/jekyll-running.png" alt="지킬 실행" /></p>

<p><img src="assets/built/images/browser-view.png" alt="browser 실행" /></p>

<blockquote>
  <p>일단 화면을 띄웠습니다. 이제 각 메뉴를 원하는 내용을 바꾸고 이미지를 내 입맛에 맞게 수정하고 
기타 등등의 기능들을 추가하면 될 듯 보입니다.</p>
</blockquote>

	  ]]></description>
	</item>


</channel>
</rss>
